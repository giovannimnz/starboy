const fs = require('fs');
const path = require('path');

console.log('üîß Corrigindo erros de sintaxe no signalProcessor.js...\n');

// Fun√ß√£o para fazer backup
function createBackup(filePath) {
  const backupPath = `${filePath}.backup.syntax-fix.${Date.now()}`;
  if (fs.existsSync(filePath)) {
    fs.copyFileSync(filePath, backupPath);
    console.log(`üìÅ Backup criado: ${backupPath}`);
    return true;
  }
  return false;
}

const signalProcessorPath = path.join(__dirname, 'posicoes', 'signalProcessor.js');
createBackup(signalProcessorPath);

let content = fs.readFileSync(signalProcessorPath, 'utf8');

// Adicionar import do sendTelegramMessage no topo
if (!content.includes('sendTelegramMessage')) {
  content = content.replace(
    /const api = require\('\.\.\/api'\);/,
    `const api = require('../api');
const { sendTelegramMessage } = require('../utils/telegram');`
  );
}

// Corrigir o erro de sintaxe espec√≠fico nas linhas 140-142
const brokenCode = `      // Atualizar status para ERROR
      try {
        await db.query(
          \`UPDATE webhook_signals SET status = 'ERROR', error_message = ? WHERE id = ?\`,
          [const errorMessage = error.message;
      errorMessage, signal.id] // Usar errorMessage formatado
        );
      } catch (updateError) {
        console.error(\`[SIGNAL] Erro ao atualizar status para ERROR:\`, updateError);
      }`;

const fixedCode = `      // Atualizar status para ERROR
      try {
        const errorMessage = formatErrorMessage(error);
        await db.query(
          \`UPDATE webhook_signals SET status = 'ERROR', error_message = ? WHERE id = ?\`,
          [errorMessage, signal.id]
        );
      } catch (updateError) {
        console.error(\`[SIGNAL] Erro ao atualizar status para ERROR:\`, updateError);
      }`;

content = content.replace(brokenCode, fixedCode);

// Adicionar fun√ß√µes utilit√°rias que est√£o sendo usadas mas n√£o existem
const utilityFunctions = `
/**
 * Formata mensagem de entrada para Telegram
 */
function formatEntryMessage(signal, quantity, averagePrice, totalValue) {
  return \`üìà ENTRADA EXECUTADA

S√≠mbolo: \${signal.symbol}
Lado: \${signal.side}
Quantidade: \${quantity}
Pre√ßo M√©dio: \${averagePrice}
Valor Total: \${totalValue.toFixed(2)} USDT
Alavancagem: \${signal.leverage}x

üéØ Take Profit: \${signal.tp_price}
üõ°Ô∏è Stop Loss: \${signal.sl_price}\`;
}

/**
 * Formata mensagem de erro para Telegram
 */
function formatErrorMessage(signal, errorMsg) {
  return \`üö® ERRO NA EXECU√á√ÉO

S√≠mbolo: \${signal.symbol}
Lado: \${signal.side}
Pre√ßo Entrada: \${signal.entry_price}

‚ùå Erro: \${errorMsg}

Verifique os logs para mais detalhes.\`;
}

`;

// Adicionar as fun√ß√µes utilit√°rias antes da fun√ß√£o processSignal
content = content.replace(
  /async function processSignal/,
  `${utilityFunctions}
/**
 * Processa um sinal de entrada
 * @param {Object} db - Conex√£o com banco
 * @param {Object} signal - Dados do sinal
 * @param {number} currentPrice - Pre√ßo atual
 * @param {number} accountId - ID da conta
 */
async function processSignal`
);

// Corrigir outras chamadas para sendTelegramMessage que est√£o incorretas
content = content.replace(
  /await sendTelegramMessage\(accountId, chat_id, message\);/g,
  'await sendTelegramMessage(message, accountId);'
);

content = content.replace(
  /await sendTelegramMessage\(accountId, signal\.chat_id, errorMessage\);/g,
  'await sendTelegramMessage(errorMessage, accountId);'
);

// Corrigir a chamada na fun√ß√£o processSignal onde chat_id √© usado
content = content.replace(
  /await sendTelegramMessage\(message, accountId\);/g,
  'try { await sendTelegramMessage(message, accountId); } catch (telegramError) { console.warn("[TELEGRAM] Erro ao enviar mensagem:", telegramError.message); }'
);

// Garantir que todas as mensagens de erro sejam tratadas adequadamente
content = content.replace(
  /const errorMessage = formatErrorMessage\(signal, error\.message\);/g,
  'const errorMessage = formatErrorMessage(signal, formatErrorMessage(error));'
);

// Corrigir problema onde errorMessage pode n√£o estar definido em alguns catches
const problematicCatch = `if (signal.chat_id) {
        const errorMessage = formatErrorMessage(signal, error.message);
        await sendTelegramMessage(errorMessage, accountId);
      }`;

const fixedCatch = `if (signal.chat_id) {
        try {
          const errorMsg = formatErrorMessage(signal, formatErrorMessage(error));
          await sendTelegramMessage(errorMsg, accountId);
        } catch (telegramError) {
          console.warn("[TELEGRAM] Erro ao enviar notifica√ß√£o de erro:", telegramError.message);
        }
      }`;

content = content.replace(problematicCatch, fixedCatch);

fs.writeFileSync(signalProcessorPath, content, 'utf8');

console.log('‚úÖ signalProcessor.js corrigido');

// Criar um arquivo de teste espec√≠fico para o signalProcessor
const testScript = `// Teste espec√≠fico do signalProcessor
const { checkNewTrades } = require('./posicoes/signalProcessor');

async function testSignalProcessor() {
  console.log('üß™ Testando signalProcessor...');
  
  try {
    console.log('\\n=== TESTE: checkNewTrades ===');
    
    // Testar com accountId v√°lido
    await checkNewTrades(1);
    console.log('‚úÖ checkNewTrades executado sem erros de sintaxe');
    
    console.log('\\nüéâ signalProcessor funcionando corretamente!');
    
  } catch (error) {
    console.error('‚ùå Erro no teste do signalProcessor:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

if (require.main === module) {
  testSignalProcessor();
}

module.exports = { testSignalProcessor };`;

fs.writeFileSync(path.join(__dirname, 'test-signalprocessor.js'), testScript);

console.log('‚úÖ Arquivo de teste criado: test-signalprocessor.js');

console.log('\nüéâ Corre√ß√£o de sintaxe conclu√≠da!');
console.log('\nüìã Principais corre√ß√µes:');
console.log('1. ‚úÖ Erro de sintaxe na linha 140-142 corrigido');
console.log('2. ‚úÖ Import de sendTelegramMessage adicionado');
console.log('3. ‚úÖ Fun√ß√µes utilit√°rias formatEntryMessage e formatErrorMessage adicionadas');
console.log('4. ‚úÖ Chamadas para sendTelegramMessage corrigidas');
console.log('5. ‚úÖ Tratamento de erros melhorado');

console.log('\nüß™ Execute o teste:');
console.log('   node test-signalprocessor.js');

console.log('\nüöÄ Depois teste o monitoramento completo:');
console.log('   node posicoes/monitoramento.js --account 1');

console.log('\nüíæ Backup criado para seguran√ßa.');