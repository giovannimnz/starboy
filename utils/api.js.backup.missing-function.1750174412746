const axios = require('axios');
const crypto = require('crypto');
const { getDatabaseInstance } = require('./db/conexao');

// Mapa global para armazenar estados das conexões de cada conta
const accountConnections = new Map();

/**
 * Obtém ou cria o estado de conexão para uma conta
 */
function getAccountConnectionState(accountId, createIfMissing = false) {
  console.log(`[API_STATE] getAccountConnectionState chamado: accountId=${accountId}, createIfMissing=${createIfMissing}`);
  
  if (!accountId || typeof accountId !== 'number') {
    console.warn(`[API_STATE] AccountId inválido: ${accountId} (tipo: ${typeof accountId})`);
    return null;
  }

  // Verificar se já existe
  let state = accountConnections.get(accountId);
  console.log(`[API_STATE] Estado existente para conta ${accountId}: ${state ? 'SIM' : 'NÃO'}`);

  if (!state && createIfMissing) {
    console.log(`[API_STATE] Criando novo estado para conta ${accountId}...`);
    state = {
      accountId: accountId,
      apiKey: null,
      secretKey: null,
      wsApiKey: null,
      wsApiSecret: null,
      privateKey: null,
      apiUrl: null,
      wsUrl: null,
      wsApiUrl: null,
      isAuthenticated: false,
      wsApiAuthenticated: false,
      wsApiConnection: null,
      wsApiRequestCallbacks: new Map(),
      wsApiKeepAliveInterval: null,
      lastWsApiActivity: 0,
      userDataStream: null,
      listenKey: null,
      userDataKeepAliveInterval: null,
      lastUserDataStreamKeepAlive: 0,
      priceWebsockets: new Map(),
      monitoringCallbacks: null,
      isShuttingDown: false,
      dbInstance: null,
      lastPongTime: 0,
      pingInterval: null,
      ambiente: null,
      corretora: null,
      nomeConta: null,
    };
    
    accountConnections.set(accountId, state);
    console.log(`[API_STATE] ✅ Estado criado e armazenado para conta ${accountId}`);
    console.log(`[API_STATE] Total de contas no Map: ${accountConnections.size}`);
  }
  
  // Verificar novamente se existe
  const finalState = accountConnections.get(accountId);
  console.log(`[API_STATE] Estado final para conta ${accountId}: ${finalState ? 'ENCONTRADO' : 'NÃO ENCONTRADO'}`);
  
  return finalState || null;
}

/**
 * Retorna todas as conexões de contas
 */
function getAllAccountConnections() {
  console.log(`[API] getAllAccountConnections chamado. Total de contas: ${accountConnections.size}`);
  return accountConnections;
}

/**
 * Carrega credenciais do banco de dados e atualiza o estado da conta
 */
async function loadCredentialsFromDatabase(accountId) {
  console.log(`[API] === NOVA FUNÇÃO loadCredentialsFromDatabase para conta ${accountId} ===`);
  
  if (typeof accountId !== 'number' || isNaN(accountId)) {
    const errorMsg = `AccountId deve ser um número válido: ${String(accountId)} (tipo: ${typeof accountId})`;
    console.error(`[API] ${errorMsg}`);
    throw new Error(errorMsg);
  }

  // PASSO 1: Garantir que o estado existe
  console.log(`[API] PASSO 1: Criando/obtendo estado para conta ${accountId}...`);
  const accountState = getAccountConnectionState(accountId, true);
  
  if (!accountState) {
    console.error(`[API] ERRO: Não foi possível criar estado para conta ${accountId}`);
    throw new Error(`Não foi possível criar estado para conta ${accountId}`);
  }
  
  console.log(`[API] ✅ Estado obtido para conta ${accountId}, accountId no estado: ${accountState.accountId}`);

  // PASSO 2: Obter conexão com banco
  console.log(`[API] PASSO 2: Obtendo conexão com banco...`);
  const db = await getDatabaseInstance(accountId);

  // PASSO 3: Executar query
  console.log(`[API] PASSO 3: Executando query para carregar credenciais...`);
  
  const [rows] = await db.query(
    `SELECT c.id, c.nome, c.api_key, c.api_secret, c.ws_api_key, c.ws_api_secret, 
            co.ambiente, co.corretora, co.futures_rest_api_url, co.futures_ws_market_url, co.futures_ws_api_url
     FROM contas c
     JOIN corretoras co ON c.id_corretora = co.id
     WHERE c.id = ? AND c.ativa = 1`,
    [accountId]
  );

  console.log(`[API] Query executada, ${rows.length} linha(s) retornada(s)`);
  
  if (rows.length === 0) {
    throw new Error(`Conta ${accountId} não encontrada, inativa ou sem corretora associada.`);
  }
  
  const creds = rows[0];
  console.log(`[API] Dados obtidos do banco:`, {
    id: creds.id,
    nome: creds.nome,
    has_api_key: !!creds.api_key,
    has_api_secret: !!creds.api_secret,
    has_ws_api_key: !!creds.ws_api_key,
    has_ws_api_secret: !!creds.ws_api_secret,
    futures_rest_api_url: creds.futures_rest_api_url,
    futures_ws_market_url: creds.futures_ws_market_url,
    futures_ws_api_url: creds.futures_ws_api_url,
    ambiente: creds.ambiente,
    corretora: creds.corretora
  });

  // PASSO 4: Atualizar estado
  console.log(`[API] PASSO 4: Atualizando estado com credenciais...`);
  
  accountState.accountId = accountId;
  accountState.apiKey = creds.api_key;
  accountState.secretKey = creds.api_secret;
  accountState.wsApiKey = creds.ws_api_key;
  accountState.wsApiSecret = creds.ws_api_secret;
  accountState.privateKey = creds.ws_api_secret;
  accountState.apiUrl = creds.futures_rest_api_url;
  accountState.wsUrl = creds.futures_ws_market_url;
  accountState.wsApiUrl = creds.futures_ws_api_url;
  accountState.ambiente = creds.ambiente;
  accountState.corretora = creds.corretora;
  accountState.nomeConta = creds.nome;

  console.log(`[API] PASSO 5: Verificando estado final...`);
  console.log(`[API] Estado final da conta ${accountId}:`);
  console.log(`  - accountId: ${accountState.accountId}`);
  console.log(`  - apiKey: ${accountState.apiKey ? accountState.apiKey.substring(0, 8) + '...' : 'MISSING'}`);
  console.log(`  - secretKey: ${accountState.secretKey ? 'OK' : 'MISSING'}`);
  console.log(`  - wsApiKey: ${accountState.wsApiKey ? accountState.wsApiKey.substring(0, 8) + '...' : 'MISSING'}`);
  console.log(`  - wsApiSecret: ${accountState.wsApiSecret ? 'OK' : 'MISSING'}`);
  console.log(`  - apiUrl: ${accountState.apiUrl || 'MISSING'}`);
  console.log(`  - wsUrl: ${accountState.wsUrl || 'MISSING'}`);
  console.log(`  - wsApiUrl: ${accountState.wsApiUrl || 'MISSING'}`);
  console.log(`  - ambiente: ${accountState.ambiente || 'MISSING'}`);
  console.log(`  - corretora: ${accountState.corretora || 'MISSING'}`);
  
  // PASSO 6: Verificar se o estado foi salvo no Map
  const verifyState = accountConnections.get(accountId);
  console.log(`[API] Verificação final: Estado existe no Map: ${verifyState ? 'SIM' : 'NÃO'}`);
  
  if (verifyState) {
    console.log(`[API] ✅ Estado verificado no Map para conta ${accountId}`);
    console.log(`[API] Estado verificado possui: apiKey=${!!verifyState.apiKey}, apiUrl=${!!verifyState.apiUrl}`);
  } else {
    console.error(`[API] ❌ ERRO: Estado não encontrado no Map após criação!`);
  }
  
  console.log(`[API] === FIM loadCredentialsFromDatabase para conta ${accountId} ===`);
  return accountState;
}

/**
 * Faz requisição autenticada para a API
 */
async function makeAuthenticatedRequest(accountId, method = 'GET', endpoint, data = null) {
  console.log(`[API] makeAuthenticatedRequest chamado: accountId=${accountId}, method=${method}, endpoint=${endpoint}`);

  if (!accountId || typeof accountId !== 'number') {
    const errorMsg = `AccountId deve ser um número válido: ${accountId} (tipo: ${typeof accountId})`;
    console.error(`[API] ${errorMsg}`);
    throw new Error(errorMsg);
  }

  if (!endpoint || typeof endpoint !== 'string') {
    const errorMsg = `Endpoint deve ser uma string válida: ${endpoint}`;
    console.error(`[API] ${errorMsg}`);
    throw new Error(errorMsg);
  }

  const accountState = getAccountConnectionState(accountId);
  if (!accountState || !accountState.apiKey || !accountState.secretKey) {
    console.warn(`[API] Credenciais não encontradas para conta ${accountId}. Tentando carregar...`);
    await loadCredentialsFromDatabase(accountId);
    const newState = getAccountConnectionState(accountId);
    if (!newState || !newState.apiKey || !newState.secretKey) {
      throw new Error(`Credenciais incompletas para conta ${accountId}`);
    }
  }

  const currentState = getAccountConnectionState(accountId);
  const timestamp = Date.now();
  const params = data ? { ...data, timestamp } : { timestamp };
  
  const queryString = Object.keys(params)
    .sort()
    .map(key => `${key}=${params[key]}`)
    .join('&');
  
  const signature = crypto
    .createHmac('sha256', currentState.secretKey)
    .update(queryString)
    .digest('hex');
  
  const finalParams = { ...params, signature };
  const url = `${currentState.apiUrl}${endpoint}`;
  
  console.log(`[API] Fazendo requisição: ${method} ${url}`);
  
  const config = {
    method,
    url,
    headers: {
      'X-MBX-APIKEY': currentState.apiKey,
      'Content-Type': 'application/json',
    },
    timeout: 10000,
  };
  
  if (method === 'GET') {
    config.params = finalParams;
  } else {
    config.data = finalParams;
  }
  
  try {
    const response = await axios(config);
    return response.data;
  } catch (error) {
    const errorMsg = `Falha na requisição ${method} ${endpoint}: ${error.response?.data?.msg || error.message}`;
    console.error(`[API] ${errorMsg}`);
    throw new Error(errorMsg);
  }
}

/**
 * Obtém preço de um símbolo
 */
async function getPrice(symbol, accountId) {
  try {
    console.log(`[API] getPrice - symbol: ${symbol}, accountId: ${accountId}`);
    
    if (!symbol || typeof symbol !== 'string') {
      throw new Error(`Símbolo inválido: ${symbol}`);
    }
    
    if (!accountId || typeof accountId !== 'number') {
      throw new Error(`AccountId deve ser um número válido: ${accountId}`);
    }

    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v1/ticker/price', { symbol });
    
    if (response && response.price) {
      const price = parseFloat(response.price);
      if (isNaN(price) || price <= 0) {
        console.error(`[API] Preço inválido recebido para ${symbol}: ${response.price}`);
        return null;
      }
      console.log(`[API] ✅ Preço obtido para ${symbol}: ${price}`);
      return price;
    } else {
      console.error(`[API] Resposta inválida ao obter preço para ${symbol}:`, response);
      return null;
    }
  } catch (error) {
    console.error(`[API] Erro ao obter preço para ${symbol} (conta ${accountId}):`, error.message);
    return null;
  }
}

/**
 * Obtém todas as posições abertas
 */
async function getAllOpenPositions(accountId) {
  try {
    console.log(`[API] Obtendo posições abertas para conta ${accountId}...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v2/positionRisk', {});
    
    if (!Array.isArray(response)) {
      console.error(`[API] Resposta inválida ao obter posições para conta ${accountId}:`, response);
      return [];
    }

    const openPositions = response
      .filter(pos => parseFloat(pos.positionAmt) !== 0)
      .map(pos => ({
        simbolo: pos.symbol,
        quantidade: Math.abs(parseFloat(pos.positionAmt)),
        lado: parseFloat(pos.positionAmt) > 0 ? 'LONG' : 'SHORT',
        precoEntrada: parseFloat(pos.entryPrice),
        precoAtual: parseFloat(pos.markPrice),
        alavancagem: parseInt(pos.leverage) || 1,
        pnlNaoRealizado: parseFloat(pos.unRealizedProfit),
        margem: parseFloat(pos.isolatedMargin),
        tipo: pos.marginType === 'isolated' ? 'ISOLATED' : 'CROSS'
      }));

    console.log(`[API] ✅ ${openPositions.length} posições abertas encontradas para conta ${accountId}`);
    return openPositions;
  } catch (error) {
    console.error(`[API] Erro ao obter posições abertas para conta ${accountId}:`, error.message);
    throw error;
  }
}

/**
 * Obtém listen key para UserDataStream
 */
async function getListenKey(accountId) {
  try {
    console.log(`[API] Obtendo listen key para conta ${accountId}...`);
    
    const accountState = getAccountConnectionState(accountId);
    if (!accountState || !accountState.apiKey || !accountState.apiUrl) {
      console.log(`[API] API Key ou API URL não configuradas para getListenKey da conta ${accountId}.`);
      return null;
    }

    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/listenKey', {});
    
    if (response && response.listenKey) {
      console.log(`[API] ✅ Listen key obtido para conta ${accountId}`);
      return response.listenKey;
    } else {
      console.error(`[API] Resposta inválida ao obter listen key para conta ${accountId}:`, response);
      return null;
    }
  } catch (error) {
    console.error(`[API] Erro ao obter listen key para conta ${accountId}:`, error.message);
    return null;
  }
}


/**
 * Obtém precisão de um símbolo
 */
async function getPrecision(symbol, accountId) {
  try {
    console.log(`[API] Obtendo precisão para ${symbol} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v1/exchangeInfo', {});
    
    if (response && response.symbols) {
      const symbolInfo = response.symbols.find(s => s.symbol === symbol);
      if (symbolInfo) {
        const quantityPrecision = symbolInfo.quantityPrecision || 3;
        const pricePrecision = symbolInfo.pricePrecision || 2;
        
        console.log(`[API] ✅ Precisão obtida para ${symbol}: quantity=${quantityPrecision}, price=${pricePrecision}`);
        return {
          quantityPrecision,
          pricePrecision,
          minQty: parseFloat(symbolInfo.filters?.find(f => f.filterType === 'LOT_SIZE')?.minQty || '0.001'),
          stepSize: parseFloat(symbolInfo.filters?.find(f => f.filterType === 'LOT_SIZE')?.stepSize || '0.001'),
          tickSize: parseFloat(symbolInfo.filters?.find(f => f.filterType === 'PRICE_FILTER')?.tickSize || '0.01')
        };
      }
    }
    
    console.warn(`[API] Precisão não encontrada para ${symbol}, usando padrões`);
    return { quantityPrecision: 3, pricePrecision: 2, minQty: 0.001, stepSize: 0.001, tickSize: 0.01 };
  } catch (error) {
    console.error(`[API] Erro ao obter precisão para ${symbol}:`, error.message);
    return { quantityPrecision: 3, pricePrecision: 2, minQty: 0.001, stepSize: 0.001, tickSize: 0.01 };
  }
}
/**
 * Obtém alavancagem atual de um símbolo
 */
async function getCurrentLeverage(symbol, accountId) {
  try {
    console.log(`[API] Obtendo alavancagem atual para ${symbol} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v2/positionRisk', { symbol });
    
    if (response && Array.isArray(response) && response.length > 0) {
      const leverage = parseInt(response[0].leverage) || 20;
      console.log(`[API] ✅ Alavancagem atual para ${symbol}: ${leverage}x`);
      return leverage;
    }
    
    console.warn(`[API] Alavancagem não encontrada para ${symbol}, usando padrão 20x`);
    return 20;
  } catch (error) {
    console.error(`[API] Erro ao obter alavancagem para ${symbol}:`, error.message);
    return 20;
  }
}
/**
 * Altera alavancagem inicial de um símbolo
 */
async function changeInitialLeverage(symbol, leverage, accountId) {
  try {
    console.log(`[API] Alterando alavancagem para ${symbol}: ${leverage}x (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/leverage', {
      symbol,
      leverage
    });
    
    if (response) {
      console.log(`[API] ✅ Alavancagem alterada para ${symbol}: ${leverage}x`);
      return response;
    }
    
    throw new Error('Resposta inválida');
  } catch (error) {
    console.error(`[API] Erro ao alterar alavancagem para ${symbol}:`, error.message);
    throw error;
  }
}
/**
 * Obtém tipo de margem atual de um símbolo
 */
async function getCurrentMarginType(symbol, accountId) {
  try {
    console.log(`[API] Obtendo tipo de margem para ${symbol} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v2/positionRisk', { symbol });
    
    if (response && Array.isArray(response) && response.length > 0) {
      const marginType = response[0].marginType || 'cross';
      console.log(`[API] ✅ Tipo de margem para ${symbol}: ${marginType}`);
      return marginType.toLowerCase();
    }
    
    console.warn(`[API] Tipo de margem não encontrado para ${symbol}, usando padrão 'cross'`);
    return 'cross';
  } catch (error) {
    console.error(`[API] Erro ao obter tipo de margem para ${symbol}:`, error.message);
    return 'cross';
  }
}
/**
 * Altera tipo de margem de um símbolo
 */
async function changeMarginType(symbol, marginType, accountId) {
  try {
    console.log(`[API] Alterando tipo de margem para ${symbol}: ${marginType} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/marginType', {
      symbol,
      marginType: marginType.toUpperCase()
    });
    
    if (response) {
      console.log(`[API] ✅ Tipo de margem alterado para ${symbol}: ${marginType}`);
      return response;
    }
    
    throw new Error('Resposta inválida');
  } catch (error) {
    console.error(`[API] Erro ao alterar tipo de margem para ${symbol}:`, error.message);
    throw error;
  }
}


/**
 * Verifica e corrige consistência do ambiente
 */
async function verifyAndFixEnvironmentConsistency(accountId) {
  try {
    console.log(`[API] Verificando consistência de ambiente para conta ${accountId}...`);
    
    const accountState = getAccountConnectionState(accountId);
    if (!accountState) {
      console.warn(`[API] Estado da conta ${accountId} não encontrado para verificação de consistência`);
      return false;
    }
    
    // Verificar se URLs estão corretas para o ambiente
    const { ambiente, apiUrl, wsUrl, wsApiUrl } = accountState;
    
    if (ambiente === 'prd') {
      // Verificar se não está usando URLs de testnet
      const isTestnet = apiUrl?.includes('testnet') || wsUrl?.includes('testnet') || wsApiUrl?.includes('testnet');
      if (isTestnet) {
        console.warn(`[API] ⚠️ Ambiente de produção usando URLs de testnet para conta ${accountId}`);
        return false;
      }
    } else {
      // Verificar se não está usando URLs de produção
      const isProduction = !apiUrl?.includes('testnet') || !wsUrl?.includes('testnet') || !wsApiUrl?.includes('testnet');
      if (isProduction) {
        console.warn(`[API] ⚠️ Ambiente de testnet usando URLs de produção para conta ${accountId}`);
        return false;
      }
    }
    
    console.log(`[API] ✅ Consistência de ambiente verificada para conta ${accountId}`);
    return true;
  } catch (error) {
    console.error(`[API] Erro ao verificar consistência de ambiente:`, error.message);
    return false;
  }
}

module.exports = {
  getAccountConnectionState,
  getAllAccountConnections,
  loadCredentialsFromDatabase,
  makeAuthenticatedRequest,
  getPrice,
  getAllOpenPositions,
  getListenKey,
  getPrecision,
  getCurrentLeverage,
  changeInitialLeverage,
  getCurrentMarginType,
  changeMarginType,
  verifyAndFixEnvironmentConsistency
,
  getFuturesAccountBalanceDetails
};