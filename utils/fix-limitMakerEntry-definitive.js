const fs = require('fs');
const path = require('path');

console.log('üîß CORRE√á√ÉO DEFINITIVA DO limitMakerEntry.js...\n');

const limitEntryPath = path.join(__dirname, 'posicoes', 'limitMakerEntry.js');

if (fs.existsSync(limitEntryPath)) {
  // Backup de seguran√ßa
  const backupPath = `${limitEntryPath}.backup.definitive.${Date.now()}`;
  fs.copyFileSync(limitEntryPath, backupPath);
  console.log(`üìÅ Backup criado: ${backupPath}`);
  
  let content = fs.readFileSync(limitEntryPath, 'utf8');
  
  // 1. GARANTIR IMPORT DA API NO IN√çCIO
  const lines = content.split('\n');
  let hasApiImport = false;
  
  for (let i = 0; i < Math.min(10, lines.length); i++) {
    if (lines[i].includes("require('../api')") || lines[i].includes("require('./api')")) {
      hasApiImport = true;
      break;
    }
  }
  
  if (!hasApiImport) {
    content = "const api = require('../api');\n" + content;
    console.log('‚úÖ Import da API adicionado no in√≠cio');
  }
  
  // 2. CORRIGIR LINHA 337 - Substituir waitForOrderStatus por chamada direta
  content = content.replace(
    /const\s+orderStatus\s*=\s*await\s+waitForOrderStatus\([^)]*\);?/g,
    'const orderStatus = await api.getOrderStatus(signal.symbol, activeOrderId, numericAccountId);'
  );
  
  // 3. CORRIGIR LINHA 347 - Garantir ordem correta dos par√¢metros
  content = content.replace(
    /await\s+api\.getOrderStatus\(numericAccountId,\s*activeOrderId,\s*signal\.symbol\)/g,
    'await api.getOrderStatus(signal.symbol, activeOrderId, numericAccountId)'
  );
  
  // 4. SUBSTITUIR FUN√á√ÉO waitForOrderExecution POR IMPLEMENTA√á√ÉO SIMPLES
  const newWaitForOrderExecution = `
// Fun√ß√£o simplificada para aguardar execu√ß√£o
async function waitForOrderExecution(symbol, orderId, maxWaitMs, accountId) {
    console.log(\`[WAIT_ORDER] Aguardando execu√ß√£o da ordem \${orderId} para \${symbol} (conta \${accountId})...\`);
    
    const startTime = Date.now();
    
    while (Date.now() - startTime < maxWaitMs) {
        try {
            const orderStatus = await api.getOrderStatus(symbol, orderId, accountId);
            
            if (orderStatus.status === 'FILLED' || orderStatus.status === 'PARTIALLY_FILLED') {
                console.log(\`[WAIT_ORDER] ‚úÖ Ordem \${orderId} executada: \${orderStatus.status}\`);
                return orderStatus;
            }
            
            await new Promise(resolve => setTimeout(resolve, 200));
        } catch (error) {
            console.log(\`[WAIT_ORDER] Erro ao verificar ordem \${orderId}: \${error.message}\`);
            await new Promise(resolve => setTimeout(resolve, 200));
        }
    }
    
    // √öltima tentativa
    try {
        const finalStatus = await api.getOrderStatus(symbol, orderId, accountId);
        return finalStatus;
    } catch (error) {
        return { status: 'UNKNOWN', executedQty: '0', avgPrice: '0' };
    }
}`;

  // Substituir fun√ß√£o waitForOrderExecution
  content = content.replace(
    /async function waitForOrderExecution[\s\S]*?(?=\n(?:async function|function |\/\*\*|module\.exports)|\n$)/,
    newWaitForOrderExecution + '\n'
  );
  
  // 5. REMOVER FUN√á√ÉO waitForOrderStatus (problema raiz)
  content = content.replace(
    /async function waitForOrderStatus[\s\S]*?(?=\n(?:async function|function |\/\*\*|module\.exports)|\n$)/,
    ''
  );
  
  // 6. CORRIGIR TODAS AS CHAMADAS DE waitForOrderExecution
  content = content.replace(
    /await\s+waitForOrderExecution\([^)]*\)/g,
    'await waitForOrderExecution(signal.symbol, activeOrderId, EDIT_WAIT_TIMEOUT_MS, numericAccountId)'
  );
  
  // 7. GARANTIR QUE TODAS AS CHAMADAS DA API EST√ÉO CORRETAS
  content = content.replace(
    /api\.getOrderStatus\(([^,]*),\s*([^,]*),\s*([^)]*)\)/g,
    (match, p1, p2, p3) => {
      // Detectar se primeiro par√¢metro √© accountId (n√∫mero)
      if (p1.trim().match(/^\d+$/) || p1.includes('accountId') || p1.includes('numericAccountId')) {
        return \`api.getOrderStatus(\${p3.trim()}, \${p2.trim()}, \${p1.trim()})\`;
      }
      return match;
    }
  );
  
  fs.writeFileSync(limitEntryPath, content, 'utf8');
  console.log('‚úÖ limitMakerEntry.js corrigido definitivamente');
  
} else {
  console.log('‚ùå Arquivo limitMakerEntry.js n√£o encontrado');
}

// VERIFICAR E CORRIGIR api.js TAMB√âM
const apiPath = path.join(__dirname, 'api.js');
if (fs.existsSync(apiPath)) {
  let apiContent = fs.readFileSync(apiPath, 'utf8');
  
  // Verificar se getOrderStatus tem valida√ß√£o adequada
  if (!apiContent.includes('Symbol inv√°lido') || apiContent.includes('typeof symbol !== \'string\'')) {
    console.log('‚ö†Ô∏è api.js pode precisar de corre√ß√£o na fun√ß√£o getOrderStatus');
    
    const correctGetOrderStatusValidation = `
    // VALIDA√á√ÉO DE PAR√ÇMETROS CORRIGIDA
    if (!symbol || typeof symbol !== 'string') {
      throw new Error(\`Symbol deve ser uma string v√°lida. Recebido: \${symbol} (tipo: \${typeof symbol})\`);
    }
    
    if (!orderId || (typeof orderId !== 'string' && typeof orderId !== 'number')) {
      throw new Error(\`OrderId deve ser string ou number. Recebido: \${orderId} (tipo: \${typeof orderId})\`);
    }
    
    if (!accountId || typeof accountId !== 'number') {
      throw new Error(\`AccountId deve ser um n√∫mero. Recebido: \${accountId} (tipo: \${typeof accountId})\`);
    }`;
    
    // Atualizar valida√ß√£o se necess√°rio
    apiContent = apiContent.replace(
      /if\s*\(\s*!symbol\s*\|\|\s*typeof symbol\s*!==\s*['"]string['"]\s*\)\s*{[^}]*}/,
      correctGetOrderStatusValidation.trim()
    );
    
    fs.writeFileSync(apiPath, apiContent, 'utf8');
    console.log('‚úÖ api.js - valida√ß√£o atualizada');
  }
}

console.log('\nüéâ CORRE√á√ÉO DEFINITIVA CONCLU√çDA!');
console.log('\nüìã Mudan√ßas aplicadas:');
console.log('1. ‚úÖ Import da API garantido no in√≠cio');
console.log('2. ‚úÖ Linha 337: waitForOrderStatus substitu√≠do por chamada direta');
console.log('3. ‚úÖ Linha 347: par√¢metros corrigidos');
console.log('4. ‚úÖ Fun√ß√£o waitForOrderExecution simplificada');
console.log('5. ‚úÖ Fun√ß√£o waitForOrderStatus removida (fonte do problema)');
console.log('6. ‚úÖ Todas as chamadas da API corrigidas');

console.log('\nüöÄ Execute agora:');
console.log('   node posicoes/monitoramento.js --account 1');

console.log('\nüéØ Resultado esperado:');
console.log('‚úÖ Sem erro "api is not defined"');
console.log('‚úÖ Sem erro "Symbol inv√°lido"');
console.log('‚úÖ Verifica√ß√£o de status da ordem funcionando');