const WebSocket = require('ws');
const { EventEmitter } = require('events');
const crypto = require('crypto');
const nacl = require('tweetnacl');
const { v4: uuidv4 } = require('uuid');
const { getDatabaseInstance } = require('./db/conexao');
// Importar o módulo api completo e funções específicas que você já usa
const api = require('./api'); // Adicionado para acesso geral às funções da api
const { getAccountConnectionState } = require('./api');

// Variáveis para as bibliotecas Ed25519
let nobleEd25519SignFunction = null;
// tweetnaclInstance é carregado abaixo

// Função para carregar @noble/ed25519 dinamicamente
async function loadNobleEd25519() {
  if (nobleEd25519SignFunction) return true; // Já carregado
  try {
    const nobleModule = await import('@noble/ed25519');
    if (nobleModule && typeof nobleModule.sign === 'function') {
      nobleEd25519SignFunction = nobleModule.sign;
      console.log('[WS-API] @noble/ed25519 carregado dinamicamente com sucesso.');
      return true;
    }
    console.log('[WS-API] @noble/ed25519 carregado, mas a função sign não foi encontrada.');
    return false;
  } catch (e) {
    if (e.code !== 'ERR_MODULE_NOT_FOUND') {
        console.warn('[WS-API] Falha ao carregar @noble/ed25519 dinamicamente:', e.message);
    } else {
        console.log('[WS-API] @noble/ed25519 não instalado, pulando.');
    }
    return false;
  }
}

// Carregar tweetnacl (CommonJS, pode ser require direto)
let tweetnaclInstance = null; // Definido aqui para escopo do módulo
try {
  tweetnaclInstance = require('tweetnacl');
  console.log('[WS-API] tweetnacl carregado com sucesso.');
} catch (e) {
  console.log('[WS-API] tweetnacl não disponível, será usado apenas crypto nativo ou @noble/ed25519 (se disponível).');
}

// REMOVIDO: Cache de credenciais local, deve ser gerenciado por api.js
// const accountCredentialsCache = new Map();

// REMOVIDO: Mapa de conexões principal local, getAccountConnectionState de api.js é usado
// const accountConnections = new Map(); 

const priceWebsocketsByAccount = new Map(); // Mapeia accountId -> { symbol -> websocket }

function getAllAccountConnections() {
  // Esta função pode precisar ser repensada. Se api.js gerencia accountConnections,
  // talvez api.js deva exportar uma função similar ou esta função deve chamar api.js.
  // Por enquanto, se refere a um mapa local que não é mais o principal.
  // Se a intenção é obter o estado gerenciado por api.js, isso precisa ser ajustado.
  // Para este ajuste, vamos assumir que se refere ao priceWebsocketsByAccount ou que será removida/ajustada depois.
  // Se for para obter todos os estados de conta, deveria ser algo como:
  // return api.getAllAccountStates(); // Supondo que api.js exporte tal função
  console.warn("[WEBSOCKETS] getAllAccountConnections pode estar retornando dados incompletos ou desatualizados.");
  return priceWebsocketsByAccount; // Retornando o mapa de websockets de preço por enquanto
}

// Inicializar mapa de websockets de preço por conta
function getPriceWebsockets(accountId, create = false) {
  if (!priceWebsocketsByAccount.has(accountId) && create) {
    priceWebsocketsByAccount.set(accountId, new Map());
  }
  return priceWebsocketsByAccount.get(accountId) || new Map();
}

/**
 * Cria assinatura Ed25519.
 * Prioriza crypto nativo, depois @noble/ed25519, depois tweetnacl.
 * @param {string} payload - Payload para assinar
 * @param {number} accountId - ID da conta
 * @returns {Promise<string>} - Assinatura em base64
 */
async function createEd25519Signature(payload, accountId) {
  const accountState = getAccountConnectionState(accountId); // Usa a importada de api.js
  if (!accountState || !accountState.privateKey) { // privateKey deve ser a chave PEM string
    throw new Error(`Chave privada Ed25519 (ws_api_secret no formato PEM) não encontrada para conta ${accountId}`);
  }
  const pemPrivateKey = accountState.privateKey;

  // console.log(`[WS-API] Gerando assinatura Ed25519 para conta ${accountId}`);
  // console.log(`[WS-API] Payload: ${payload}`);

  const payloadBuffer = Buffer.from(payload, 'ascii');

  try {
    if (typeof pemPrivateKey !== 'string' || !pemPrivateKey.includes('-----BEGIN PRIVATE KEY-----')) {
        throw new Error('Chave privada não está no formato PEM string esperado.');
    }
    const privateKeyObject = crypto.createPrivateKey({
      key: pemPrivateKey,
      format: 'pem'
    });
    const signatureBuffer = crypto.sign(null, payloadBuffer, privateKeyObject);
    const signature = signatureBuffer.toString('base64');
    // console.log(`[WS-API] ✅ Assinatura Ed25519 criada com crypto nativo para conta ${accountId}`);
    return signature;
  } catch (nativeCryptoError) {
    console.warn(`[WS-API] Falha ao assinar com crypto nativo para conta ${accountId}: ${nativeCryptoError.message}. Tentando fallbacks.`);
  }

  function extractRawKeyFromPem(pemKey) {
    try {
      const keyObj = crypto.createPrivateKey({ key: pemKey, format: 'pem' });
      const pkcs8Der = keyObj.export({ format: 'der', type: 'pkcs8' });
      if (pkcs8Der[12] === 0x04 && pkcs8Der[13] === 0x22 && pkcs8Der[14] === 0x04 && pkcs8Der[15] === 0x20) {
        const rawKey = pkcs8Der.subarray(16, 16 + 32);
        if (rawKey.length === 32) return rawKey;
      }
      if (pkcs8Der.length >= 32) { // Fallback mais simples
        const potentialRawKey = pkcs8Der.subarray(-32);
        if (potentialRawKey.length === 32) return potentialRawKey;
      }
      console.warn('[WS-API] Não foi possível extrair a chave raw de 32 bytes do PEM de forma confiável.');
      return null;
    } catch (e) {
      console.error('[WS-API] Erro ao extrair chave raw do PEM:', e.message);
      return null;
    }
  }

  await loadNobleEd25519();
  if (nobleEd25519SignFunction) {
    try {
      const rawPrivateKey = extractRawKeyFromPem(pemPrivateKey);
      if (!rawPrivateKey) {
        throw new Error('Não foi possível extrair a chave raw de 32 bytes do PEM para @noble/ed25519.');
      }
      const signatureBytes = nobleEd25519SignFunction(payloadBuffer, rawPrivateKey);
      const signature = Buffer.from(signatureBytes).toString('base64');
      // console.log(`[WS-API] ✅ Assinatura Ed25519 criada com @noble/ed25519 para conta ${accountId}`);
      return signature;
    } catch (nobleError) {
      console.warn(`[WS-API] Falha ao assinar com @noble/ed25519 para conta ${accountId}: ${nobleError.message}. Tentando próximo fallback.`);
    }
  }

  if (tweetnaclInstance) {
    try {
      // tweetnacl.sign.detached precisa da chave secreta completa de 64 bytes (seed + chave pública)
      // ou apenas da seed de 32 bytes se usar tweetnacl.sign.keyPair.fromSeed para gerar o par.
      // A chave PEM PKCS#8 contém a seed de 32 bytes.
      const seed = extractRawKeyFromPem(pemPrivateKey);
      if (!seed) {
        throw new Error('Não foi possível extrair a seed de 32 bytes do PEM para tweetnacl.');
      }
      const keyPair = tweetnaclInstance.sign.keyPair.fromSeed(seed);
      const signatureBytes = tweetnaclInstance.sign.detached(payloadBuffer, keyPair.secretKey);
      const signature = Buffer.from(signatureBytes).toString('base64');
      // console.log(`[WS-API] ✅ Assinatura Ed25519 criada com tweetnacl para conta ${accountId}`);
      return signature;
    } catch (naclError) {
      console.error(`[WS-API] Erro ao assinar com tweetnacl para conta ${accountId}: ${naclError.message}. Este foi o último fallback.`);
    }
  }

  const errorMessage = `Falha ao criar assinatura Ed25519 para conta ${accountId}: Todos os métodos de assinatura falharam.`;
  console.error(`[WS-API] ${errorMessage}`);
  throw new Error(errorMessage);
}

/**
 * Cria uma requisição assinada para a API WebSocket
 * @param {string} method - Método da API
 * @param {Object} params - Parâmetros da requisição
 * @param {number} accountId - ID da conta
 * @returns {Promise<Object>} - Requisição pronta para envio (Promise por causa da assinatura async)
 */
async function createSignedRequest(method, params = {}, accountId) { // Tornar async
  const accountState = getAccountConnectionState(accountId);
  if (!accountState) {
    // Tentar carregar credenciais se o estado não existir
    console.warn(`[WS-API] Estado da conta ${accountId} não encontrado em createSignedRequest. Tentando carregar...`);
    await api.loadCredentialsFromDatabase(accountId); // Usa api.js
    const newState = getAccountConnectionState(accountId);
    if (!newState) {
      throw new Error(`Estado da conexão não encontrado para conta ${accountId} mesmo após tentativa de carga.`);
    }
    // Continuar com newState, mas a lógica abaixo já pega o accountState atualizado
  }
  
  const currentAccountState = getAccountConnectionState(accountId); // Re-obter
  if (!currentAccountState) {
      throw new Error(`Estado da conexão não encontrado para conta ${accountId}.`);
  }

  const requestId = uuidv4();
  
  if (method === 'ping' || method === 'pong' || method === 'session.status') {
    return {
      id: requestId,
      method,
      params: params || {}
    };
  }
  
  const requestParams = {
    ...params,
    apiKey: currentAccountState.wsApiKey || currentAccountState.apiKey,
    timestamp: Date.now()
  };
  
  const sortedParams = Object.keys(requestParams)
    .filter(key => key !== 'signature')
    .sort()
    .map(key => `${key}=${requestParams[key]}`)
    .join('&');
  
  // console.log(`[WS-API] Payload para assinatura (createSignedRequest): ${sortedParams}`);
  
  const signature = await createEd25519Signature(sortedParams, accountId); // Adicionado await
  
  requestParams.signature = signature;
  
  return {
    id: requestId,
    method,
    params: requestParams
  };
}

/**
 * Inicia conexão WebSocket API para uma conta
 * @param {number} accountId - ID da conta
 * @returns {Promise<boolean>} - true se conectado com sucesso
 */
async function startWebSocketApi(accountId) {
  try {
    await api.loadCredentialsFromDatabase(accountId); // Usa api.js
    let accountState = getAccountConnectionState(accountId);

    if (!accountState || !accountState.wsApiKey || !accountState.wsApiUrl) {
      console.error(`[WS-API] Credenciais ou URL da WebSocket API não encontradas para conta ${accountId}`);
      return false;
    }

    if (accountState.wsApiConnection && accountState.wsApiConnection.readyState === WebSocket.OPEN) {
      console.log(`[WS-API] Conexão WebSocket API já está ativa para conta ${accountId}`);
      if (accountState.wsApiAuthenticated) {
        return true;
      }
      try {
        console.log(`[WS-API] Tentando re-autenticar conexão existente para conta ${accountId}...`);
        const authenticated = await authenticateWebSocketApi(accountState.wsApiConnection, accountId);
        return authenticated;
      } catch (authError) {
        console.error(`[WS-API] Erro ao re-autenticar conexão existente para conta ${accountId}: ${authError.message}`);
        cleanupWebSocketApi(accountId); // Limpa o estado problemático
        return false; // Indica falha na re-autenticação
      }
    }

    console.log(`[WS-API] Iniciando WebSocket API para conta ${accountId}...`);
    const endpoint = accountState.wsApiUrl;
    console.log(`[WS-API] Conectando ao endpoint oficial: ${endpoint} para conta ${accountId}`);

    return new Promise((resolve, reject) => {
      const wsInstance = new WebSocket(endpoint);
      accountState.wsApiConnection = wsInstance; // Atribuir ao estado imediatamente

      const connectionTimeout = setTimeout(() => {
        if (wsInstance.readyState !== WebSocket.OPEN && wsInstance.readyState !== WebSocket.CLOSING && wsInstance.readyState !== WebSocket.CLOSED) {
          console.error(`[WS-API] Timeout ao conectar WebSocket API para conta ${accountId}. Estado: ${wsInstance.readyState}`);
          wsInstance.terminate(); // Força o fechamento
          // cleanupWebSocketApi(accountId); // O 'close' handler já deve chamar cleanup
          reject(new Error(`Timeout ao conectar WebSocket API para conta ${accountId}`));
        }
      }, 30000); // 30 segundos

      wsInstance.on('open', async () => {
        clearTimeout(connectionTimeout);
        console.log(`[WS-API] ✅ Conexão WebSocket API estabelecida para conta ${accountId}`);
        
        // accountState.wsApiConnection = wsInstance; // Já atribuído acima
        accountState.lastPongTime = Date.now(); // Para keep-alive do cliente

        try {
          const authenticated = await authenticateWebSocketApi(wsInstance, accountId);
          if (authenticated) {
            console.log(`[WS-API] Autenticação bem-sucedida para conta ${accountId}. Iniciando keep-alive.`);
            
            if (accountState.pingInterval) clearInterval(accountState.pingInterval);
            accountState.pingInterval = setInterval(() => {
              const currentWsConn = getAccountConnectionState(accountId)?.wsApiConnection;
              if (currentWsConn && currentWsConn.readyState === WebSocket.OPEN) {
                if (Date.now() - (getAccountConnectionState(accountId)?.lastPongTime || 0) > 7 * 60 * 1000) {
                  console.warn(`[WS-API] Nenhum pong recebido do SERVIDOR para conta ${accountId} em 7 minutos. Conexão pode estar instável.`);
                }
                const clientPingId = `client-ping-${Date.now()}-${accountId}`;
                currentWsConn.send(JSON.stringify({ id: clientPingId, method: 'ping' }));
              } else {
                if (accountState.pingInterval) clearInterval(accountState.pingInterval);
                accountState.pingInterval = null;
              }
            }, 3 * 60 * 1000); // A cada 3 minutos
            resolve(true);
          } else {
            console.error(`[WS-API] Falha na autenticação para conta ${accountId}. Conexão será fechada.`);
            wsInstance.close(1008, "Authentication Failed");
            resolve(false); // Resolveu, mas com falha na autenticação
          }
        } catch (authError) {
          console.error(`[WS-API] Erro durante a autenticação para conta ${accountId}:`, authError.message);
          wsInstance.close(1008, "Authentication Error");
          reject(authError); // Rejeita a promessa de startWebSocketApi
        }
      });

      wsInstance.on('message', (data) => {
        try {
          const message = JSON.parse(data.toString());
          handleWebSocketApiMessage(message, accountId);
        } catch (e) {
          console.error('[WS-API] Erro ao parsear mensagem JSON:', e, data.toString().substring(0, 500));
        }
      });

      wsInstance.on('error', (error) => {
        clearTimeout(connectionTimeout);
        console.error(`[WS-API] Erro na conexão WebSocket API para conta ${accountId}: ${error.message}`);
        // cleanupWebSocketApi(accountId); // O 'close' handler já chama
        reject(error); // Rejeita a promessa de startWebSocketApi
      });

      wsInstance.on('close', (code, reason) => {
        clearTimeout(connectionTimeout);
        console.log(`[WS-API] Conexão WebSocket API fechada para conta ${accountId}. Code: ${code}, Reason: ${reason ? reason.toString() : 'N/A'}`);
        cleanupWebSocketApi(accountId);
        // Se a promessa ainda estiver pendente (ex: erro antes de 'open'), rejeitar.
        // No entanto, 'error' ou o timeout já deveriam ter cuidado disso.
        // Se 'open' já resolveu, este é apenas um evento informativo.
      });
    });

  } catch (error) {
    console.error(`[WS-API] Erro GERAL ao iniciar WebSocket API para conta ${accountId}:`, error.message);
    cleanupWebSocketApi(accountId);
    return false; // Retorna false em caso de erro geral na inicialização
  }
}

/**
 * Processa mensagens recebidas via WebSocket API
 * @param {Object} message - Mensagem recebida
 * @param {number} accountId - ID da conta
 */
function handleWebSocketApiMessage(message, accountId) {
    try {
        const accountState = getAccountConnectionState(accountId);
        if (!accountState) {
            console.error(`[WS-API] Estado da conta ${accountId} não encontrado para processar mensagem`);
            return;
        }
        
        if (message.id) {
            const callbackEntry = accountState.requestCallbacks.get(message.id);
            
            if (callbackEntry) {
                // Se callbackEntry for uma função (caso de authenticateWebSocketApi)
                if (typeof callbackEntry === 'function') {
                    callbackEntry(message); // Chama a função callback (responseMessage) => {...}
                } 
                // Se callbackEntry for um objeto { resolve, reject, timer } (caso de sendWebSocketApiRequest)
                else if (typeof callbackEntry === 'object' && callbackEntry.resolve && callbackEntry.reject && callbackEntry.timer) {
                    clearTimeout(callbackEntry.timer);
                    if (message.error) {
                        // console.warn(`[WS-API] Erro na resposta para ID ${message.id} (Conta: ${accountId}):`, message.error);
                        callbackEntry.reject(message);
                    } else {
                        callbackEntry.resolve(message);
                    }
                } else {
                    console.warn(`[WS-API] Formato de callback inesperado para ID ${message.id} na conta ${accountId}. Callback:`, callbackEntry);
                }
                accountState.requestCallbacks.delete(message.id); // Remover callback após processamento
            } else {
                // Não é necessariamente um aviso se for um evento não solicitado com ID, mas raro.
                // console.warn(`[WS-API] Callback não encontrado para ID ${message.id} na conta ${accountId}. Mensagem:`, JSON.stringify(message));
            }
        } else if (message.method === 'ping') {
            // Responder ao ping do servidor
            console.log(`[WS-API] Ping recebido do servidor para conta ${accountId} (ID: ${message.id || 'N/A'}), enviando pong...`);
            // A Binance espera que o ID do ping seja ecoado no pong.
            sendPong(message.id, accountId); 
        } else if (message.method === 'pong') {
            // Pong recebido do servidor (provavelmente em resposta ao nosso ping de cliente)
            console.log(`[WS-API] Pong recebido do servidor para conta ${accountId} (ID: ${message.id || 'N/A'})`);
            accountState.lastPongTime = Date.now(); // Atualizar o tempo do último pong recebido DO SERVIDOR
        } else if (message.e) { // Assumindo que 'e' indica um evento de stream (ex: order_update)
            // console.log(`[WS-API] Evento recebido para conta ${accountId}: ${message.e}`);
            if (accountState.handlers && accountState.handlers.handleOrderUpdate && message.e === 'ORDER_TRADE_UPDATE') {
                accountState.handlers.handleOrderUpdate(message, accountState.dbInstance, accountId);
            } else if (accountState.handlers && accountState.handlers.handleAccountUpdate && message.e === 'ACCOUNT_UPDATE') {
                 accountState.handlers.handleAccountUpdate(message, accountState.dbInstance, accountId);
            }
            // Adicionar mais handlers de eventos conforme necessário
        } else {
            console.log(`[WS-API] Mensagem não tratada recebida para conta ${accountId}:`, JSON.stringify(message));
        }
        
    } catch (error) {
        console.error(`[WS-API] Erro ao processar mensagem para conta ${accountId}:`, error.message, error.stack);
        console.error('[WS-API] Mensagem original:', JSON.stringify(message, null, 2));
    }
}

/**
 * Limpa recursos do WebSocket API para uma conta específica
 * @param {number} accountId - ID da conta
 */
function cleanupWebSocketApi(accountId) {
  const accountState = getAccountConnectionState(accountId);
  if (!accountState) return;

  if (accountState.pingInterval) {
    clearInterval(accountState.pingInterval);
    accountState.pingInterval = null;
  }

  const wsConn = accountState.wsApiConnection; // Pegar referência
  if (wsConn) {
    // Remover todos os listeners para evitar chamadas em um objeto que está sendo limpo
    wsConn.removeAllListeners('open');
    wsConn.removeAllListeners('message');
    wsConn.removeAllListeners('error');
    wsConn.removeAllListeners('close');
    wsConn.removeAllListeners('ping');
    wsConn.removeAllListeners('pong');

    if (typeof wsConn.terminate === 'function' && 
        (wsConn.readyState === WebSocket.OPEN || wsConn.readyState === WebSocket.CONNECTING)) {
      try {
        // console.log(`[WS-API] Terminando wsApiConnection para conta ${accountId}. Estado: ${wsConn.readyState}`);
        wsConn.terminate();
      } catch (e) {
        console.warn(`[WS-API] Erro menor ao terminar wsApiConnection para conta ${accountId}: ${e.message}`);
      }
    }
  }
  accountState.wsApiConnection = null;
  accountState.wsApiAuthenticated = false;
  
  if (accountState.requestCallbacks) {
    for (const [id, callbackEntry] of accountState.requestCallbacks.entries()) {
      if (callbackEntry && callbackEntry.timer) clearTimeout(callbackEntry.timer);
      if (callbackEntry && typeof callbackEntry.reject === 'function') {
        // Não logar erro aqui, apenas rejeitar a promessa se existir
        callbackEntry.reject({ error: 'WebSocket connection closed or cleaned up', id });
      } else if (typeof callbackEntry === 'function') {
        // Para o callback de autenticação, não há reject explícito aqui,
        // o timeout ou erro de conexão já teria tratado.
      }
    }
    accountState.requestCallbacks.clear();
  }
  // console.log(`[WS-API] Estado da WebSocket API limpo para conta ${accountId}`);
}

/**
 * Envia pong em resposta a ping do servidor ou como keep-alive.
 * @param {string | undefined} pingId - ID da mensagem de ping original, para ecoar. Se undefined, um novo ID pode ser gerado.
 * @param {number} accountId - ID da conta
 */
function sendPong(pingId, accountId) {
  const accountState = getAccountConnectionState(accountId);
  if (!accountState || !accountState.wsApiConnection || accountState.wsApiConnection.readyState !== WebSocket.OPEN) {
    // console.warn(`[WS-API] Não é possível enviar pong para conta ${accountId}, conexão não está aberta ou estado não encontrado.`);
    return;
  }
  
  try {
    const pongRequest = {
      method: 'pong'
    };
    // Se um pingId foi fornecido (resposta a um ping do servidor), use-o.
    // Caso contrário (ping proativo do cliente), o ID é opcional ou pode ser gerado.
    // A documentação da Binance sugere ecoar o ID do ping.
    if (pingId) {
      pongRequest.id = pingId;
    }
    // Se não há pingId, a Binance aceita pong sem ID ou com um ID arbitrário.
    // Ex: {"method": "pong"} ou {"id": "client-pong-123", "method": "pong"}

    // console.log(`[WS-API] Enviando pong para conta ${accountId}:`, JSON.stringify(pongRequest));
    accountState.wsApiConnection.send(JSON.stringify(pongRequest));
  } catch (error) {
    console.error(`[WS-API] Erro ao enviar pong para conta ${accountId}:`, error);
  }
}

/**
 * Verifica o status da sessão da WebSocket API
 * @param {number} accountId - ID da conta
 * @returns {Promise<Object>} - Status da sessão
 */
async function checkSessionStatus(accountId) {
  try {
    // Criar a requisição usando createSignedRequest, que lida com o ID e não assina 'session.status'
    const request = await createSignedRequest('session.status', {}, accountId);
    const response = await sendWebSocketApiRequest(request, 30000, accountId); // Passar o objeto request completo
    
    const accountState = getAccountConnectionState(accountId, true); // Garante que o estado existe
    
    if (response && response.result) {
      // Atualiza o estado de autenticação baseado na resposta
      accountState.wsApiAuthenticated = response.result.apiKey !== null && response.result.authorizedSince > 0;
    } else {
      // Se não houver resultado ou houver erro na resposta, considerar não autenticado
      accountState.wsApiAuthenticated = false;
    }
    
    return response; // Retorna a resposta completa
  } catch (error) {
    console.error(`[WS-API] Erro ao verificar status da sessão para conta ${accountId}:`, error.message || error);
    const accountState = getAccountConnectionState(accountId, true);
    accountState.wsApiAuthenticated = false; // Considerar não autenticado em caso de erro
    return { result: { apiKey: null, authorizedSince: 0, connectedSince: 0 }, error: { message: error.message || 'Erro desconhecido ao verificar status', code: error.code || -1 } };
  }
}

/**
 * Autentica na WebSocket API usando session.logon conforme documentação Binance
 * @param {WebSocket} ws - Conexão WebSocket
 * @param {number} accountId - ID da conta
 * @returns {Promise<boolean>} - true se autenticação bem-sucedida
 */
async function authenticateWebSocketApi(ws, accountId) {
  try {
    const accountState = getAccountConnectionState(accountId);
    if (!accountState || !accountState.wsApiKey || !accountState.privateKey) { // privateKey aqui é a PEM
      throw new Error(`Credenciais WebSocket (apiKey ou privateKey PEM) incompletas para conta ${accountId}`);
    }

    console.log(`[WS-API] Iniciando autenticação session.logon para conta ${accountId}...`);

    const timestamp = Date.now();
    const authParams = {
      apiKey: accountState.wsApiKey,
      timestamp: timestamp
    };
    const sortedKeys = Object.keys(authParams).sort();
    const payload = sortedKeys.map(key => `${key}=${authParams[key]}`).join('&');
    const signature = await createEd25519Signature(payload, accountId);

    const authRequest = {
      id: `auth-${timestamp}-${accountId}`,
      method: 'session.logon',
      params: {
        apiKey: authParams.apiKey,
        signature: signature,
        timestamp: authParams.timestamp
      }
    };

    return new Promise((resolve, reject) => {
      const timeoutDuration = 30000;
      const timeoutId = setTimeout(() => {
        // accountState.requestCallbacks.delete(authRequest.id); // Removido daqui, será deletado no handler
        console.error(`[WS-API] Timeout na autenticação WebSocket API para conta ${accountId} (ID: ${authRequest.id})`);
        reject(new Error(`Timeout na autenticação WebSocket API (ID: ${authRequest.id})`));
      }, timeoutDuration);

      // CORREÇÃO: Usar .set() para o Map e armazenar a função de callback diretamente
      // O handler de mensagens vai chamar esta função diretamente.
      accountState.requestCallbacks.set(authRequest.id, (responseMessage) => {
        clearTimeout(timeoutId); // Limpar o timeout específico desta autenticação
        // O callback já foi removido do Map pelo handleWebSocketApiMessage
        
        console.log(`[WS-API] Resposta recebida para autenticação (ID: ${authRequest.id}):`, JSON.stringify(responseMessage, null, 2));
        
        if (responseMessage.status === 200 && responseMessage.result) {
          console.log(`[WS-API] ✅ Autenticação session.logon bem-sucedida para conta ${accountId}`);
          accountState.wsApiAuthenticated = true;
          accountState.isAuthenticated = true;
          resolve(true);
        } else {
          const errorMsg = responseMessage.error?.msg || 'Erro desconhecido na autenticação';
          console.error(`[WS-API] Falha na autenticação session.logon para conta ${accountId}:`, errorMsg, responseMessage.error);
          reject(new Error(`Falha na autenticação session.logon: ${errorMsg} (Code: ${responseMessage.error?.code})`));
        }
      });

      console.log(`[WS-API] Enviando requisição de autenticação (ID: ${authRequest.id}):`, JSON.stringify(authRequest, null, 2));
      if (ws.readyState === WebSocket.OPEN) {
        ws.send(JSON.stringify(authRequest));
      } else {
        clearTimeout(timeoutId);
        accountState.requestCallbacks.delete(authRequest.id); // Remover se não pôde enviar
        console.error(`[WS-API] WebSocket não está aberto ao tentar enviar autenticação para conta ${accountId}. Estado: ${ws.readyState}`);
        reject(new Error('WebSocket não está aberto para autenticação.'));
      }
    });

  } catch (error) {
    console.error(`[WS-API] Erro crítico na função authenticateWebSocketApi para conta ${accountId}:`, error.message);
    throw error;
  }
}

/**
 * Envia uma requisição via WebSocket API
 * @param {Object} request - Objeto de requisição, idealmente já processado por createSignedRequest se necessitar assinatura.
 * @param {number} timeout - Tempo limite em ms
 * @param {number} accountId - ID da conta
 * @returns {Promise<Object>} - Resposta da API
 */
async function sendWebSocketApiRequest(request, timeout = 30000, accountId) {
  const accountState = getAccountConnectionState(accountId);

  if (!accountState) {
    // Tentar carregar credenciais e estado se não existir
    try {
      await api.loadCredentialsFromDatabase(accountId);
      // Após carregar, accountState deve existir
      const newState = getAccountConnectionState(accountId);
      if (!newState) {
        return Promise.reject(new Error(`[WS-API] Estado da conta ${accountId} não pôde ser inicializado.`));
      }
      // Continuar com newState, mas a lógica abaixo já pega o accountState atualizado
    } catch (loadErr) {
      return Promise.reject(new Error(`[WS-API] Falha ao carregar credenciais para conta ${accountId} antes de enviar requisição: ${loadErr.message}`));
    }
  }
  
  // Re-obter accountState caso tenha sido criado/atualizado acima
  const currentAccountState = getAccountConnectionState(accountId);
  if (!currentAccountState) {
      return Promise.reject(new Error(`[WS-API] Estado da conta ${accountId} não encontrado após tentativa de carga.`));
  }


  // Verificar conexão WebSocket
  if (!currentAccountState.wsApiConnection || currentAccountState.wsApiConnection.readyState !== WebSocket.OPEN) {
    console.log(`[WS-API] Conexão WebSocket API não está aberta para conta ${accountId}. Tentando estabelecer...`);
    try {
      const connected = await startWebSocketApi(accountId); // startWebSocketApi já atualiza currentAccountState.wsApiConnection
      if (!connected || !currentAccountState.wsApiConnection || currentAccountState.wsApiConnection.readyState !== WebSocket.OPEN) {
        throw new Error('Falha ao estabelecer conexão WebSocket API.');
      }
      // Pequena pausa para garantir estabilidade após abertura, se necessário
      // await new Promise(resolve => setTimeout(resolve, 200));
      console.log(`[WS-API] Conexão WebSocket API restabelecida para conta ${accountId}.`);
    } catch (connError) {
      console.error(`[WS-API] Erro ao tentar (re)estabelecer conexão WebSocket API para conta ${accountId}: ${connError.message}`);
      return Promise.reject(new Error(`[WS-API] WebSocket API não conectado para conta ${accountId}: ${connError.message}`));
    }
  }

  // Garantir que temos um ID para a requisição.
  // Se a requisição veio de createSignedRequest, ela já terá um ID.
  const requestId = request.id || uuidv4();
  request.id = requestId; // Assegura que o objeto request tenha o ID que será usado no callback

  return new Promise((resolve, reject) => {
    const timer = setTimeout(() => {
      if (currentAccountState.requestCallbacks.has(requestId)) {
        currentAccountState.requestCallbacks.delete(requestId);
        console.error(`[WS-API] Timeout para requisição ID ${requestId} (Conta: ${accountId}, Método: ${request.method})`);
        reject({ error: `Timeout para requisição ${requestId}`, id: requestId, method: request.method });
      }
    }, timeout);

    currentAccountState.requestCallbacks.set(requestId, { resolve, reject, timer });

    try {
      const requestString = JSON.stringify(request);
      // console.log(`[WS-API] Enviando para conta ${accountId} (ID: ${requestId}): ${requestString}`); // Log verboso
      if (currentAccountState.wsApiConnection.readyState === WebSocket.OPEN) {
        currentAccountState.wsApiConnection.send(requestString);
      } else {
        // Limpar callback e timer se a conexão fechou antes do send
        clearTimeout(timer);
        currentAccountState.requestCallbacks.delete(requestId);
        console.error(`[WS-API] Conexão fechou antes de enviar req ID ${requestId} (Conta: ${accountId})`);
        reject(new Error(`WebSocket API connection closed before sending request ${requestId} for account ${accountId}.`));
      }
    } catch (error) {
      clearTimeout(timer);
      currentAccountState.requestCallbacks.delete(requestId);
      console.error(`[WS-API] Erro ao enviar requisição ID ${requestId} (Conta: ${accountId}):`, error);
      reject({ error: `Erro ao enviar requisição: ${error.message}`, id: requestId, method: request.method });
    }
  });
}

/**
 * Cria um buffer DER para chave privada Ed25519 a partir de chave raw
 * @param {Buffer} rawKey - Chave privada raw de 32 bytes
 * @returns {Buffer} - Chave no formato DER
 */
function createEd25519DERFromRaw(rawKey) {
    // Ed25519 private key DER structure:
    // SEQUENCE {
    //   INTEGER 0
    //   SEQUENCE {
    //     OBJECT IDENTIFIER 1.3.101.112 (Ed25519)
    //   }
    //   OCTET STRING {
    //     OCTET STRING (32-byte private key)
    //   }
    // }
    
    const ed25519OID = Buffer.from('302a300506032b657004200420', 'hex');
    const derKey = Buffer.concat([ed25519OID, rawKey]);
    
    return derKey;
}

/**
 * Limpa completamente todas as conexões para uma conta
 * @param {number} accountId - ID da conta
 */
function forceCleanupAccount(accountId) {
  console.log(`[WEBSOCKET] 🧹 Limpeza completa para conta ${accountId}...`);
  
  try {
    // Limpar WebSocket API
    cleanupWebSocketApi(accountId);
    
    // Limpar WebSockets de preço
    const priceWebsockets = getPriceWebsockets(accountId);
    if (priceWebsockets) {
      for (const [symbol, ws] of priceWebsockets.entries()) {
        if (ws && ws.readyState !== WebSocket.CLOSED) {
          ws.close(1000, 'Graceful shutdown');
        }
      }
      priceWebsockets.clear();
    }
    
    // Limpar userDataWebSocket
    const accountState = getAccountConnectionState(accountId);
    if (accountState) {
      if (accountState.userDataWebSocket && accountState.userDataWebSocket.readyState !== WebSocket.CLOSED) {
        accountState.userDataWebSocket.close(1000, 'Graceful shutdown');
      }
      
      // Limpar keepalive do listenKey
      if (accountState.listenKeyKeepAliveInterval) {
        clearInterval(accountState.listenKeyKeepAliveInterval);
        accountState.listenKeyKeepAliveInterval = null;
      }
      
      // Remover estado da conta
      accountConnections.delete(accountId);
    }
    
    console.log(`[WEBSOCKETS] ✅ Limpeza completa concluída para conta ${accountId}`);
    
  } catch (error) {
    console.error(`[WEBSOCKETS] ❌ Erro durante limpeza da conta ${accountId}:`, error.message);
  }
}

// Atualizar função reset para usar o novo cleanup
function reset(accountId) {
  forceCleanupAccount(accountId);
}

module.exports = {
  startUserDataStream,
  setupBookDepthWebsocket,
  ensurePriceWebsocketExists,
  stopPriceMonitoring,
  reset, // reset agora chama forceCleanupAccount
  startWebSocketApi,
  authenticateWebSocketApi,
  sendWebSocketApiRequest,
  createSignedRequest, // Exportar esta função async
  checkSessionStatus,
  cleanupWebSocketApi,
  isWebSocketApiAuthenticated,
  isWebSocketApiConnected,
  // loadCredentialsFromDatabase, // REMOVIDO - usar api.loadCredentialsFromDatabase
  setMonitoringCallbacks,
  getHandlers,
  getCredentials,
  ensureWebSocketApiExists,
  getAllAccountConnections, // Revisar o que esta função deve retornar
  handleWebSocketApiMessage,
  createEd25519Signature, // Exportar esta função async
  createEd25519DERFromRaw,
  forceCleanupAccount,
  loadNobleEd25519, // Exportar se precisar ser chamado externamente
};