const { getDatabaseInstance } = require('../db/conexao');
const { checkOrderTriggers } = require('./trailingStopLoss');
const { checkExpiredSignals } = require('./signalTimeout');
const { cleanupOrphanSignals, forceCloseGhostPositions } = require('./cleanup');
const websockets = require('../websockets');

/**
 * Atualiza pre√ßos das posi√ß√µes com trailing stop
 */
async function updatePositionPricesWithTrailing(db, symbol, currentPrice, accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[ENHANCED] AccountId inv√°lido: ${accountId}`);
      return;
    }
    
    // Buscar posi√ß√µes abertas para o s√≠mbolo
    const [positions] = await db.query(`
      SELECT * FROM posicoes 
      WHERE simbolo = ? AND status = 'OPEN' AND conta_id = ?
    `, [symbol, accountId]);
    
    for (const position of positions) {
      // Atualizar pre√ßo corrente
      await db.query(`
        UPDATE posicoes 
        SET preco_corrente = ?, data_hora_ultima_atualizacao = NOW()
        WHERE id = ?
      `, [currentPrice, position.id]);
      
      // Verificar trailing stops
      try {
        await checkOrderTriggers(db, position, currentPrice, accountId);
      } catch (trailingError) {
        console.error(`[ENHANCED] Erro no trailing stop para posi√ß√£o ${position.id}:`, trailingError.message);
      }
    }
    
  } catch (error) {
    console.error(`[ENHANCED] Erro ao atualizar pre√ßos para ${symbol} conta ${accountId}:`, error.message);
  }
}

/**
 * ‚úÖ ATUALIZA√á√ÉO COMPLETA DE PRE√áOS COM TRAILING E GATILHOS
 * Combina todas as verifica√ß√µes de pre√ßo em uma s√≥ fun√ß√£o
 */
async function updatePositionPricesWithTrailing(db, symbol, currentPrice, accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[ENHANCED] AccountId inv√°lido: ${accountId}`);
      return;
    }
    
    // ‚úÖ 1. VERIFICAR GATILHOS DE ENTRADA PRIMEIRO
    const { checkSignalTriggers } = require('./priceMonitoring');
    await checkSignalTriggers(symbol, currentPrice, db, accountId);
    
    // ‚úÖ 2. ATUALIZAR PRE√áOS DAS POSI√á√ïES
    const [positions] = await db.query(`
      SELECT * FROM posicoes 
      WHERE simbolo = ? AND status = 'OPEN' AND conta_id = ?
    `, [symbol, accountId]);
    
    for (const position of positions) {
      // Atualizar pre√ßo corrente
      await db.query(`
        UPDATE posicoes 
        SET preco_corrente = ?, data_hora_ultima_atualizacao = NOW()
        WHERE id = ?
      `, [currentPrice, position.id]);
      
      // ‚úÖ 3. VERIFICAR TRAILING STOPS
      try {
        const { checkOrderTriggers } = require('./trailingStopLoss');
        await checkOrderTriggers(db, position, currentPrice, accountId);
      } catch (trailingError) {
        console.error(`[ENHANCED] Erro no trailing stop para posi√ß√£o ${position.id}:`, trailingError.message);
      }
    }
    
    // ‚úÖ 4. LOG PERI√ìDICO (APENAS A CADA MINUTO)
    const now = Date.now();
    const lastLogKey = `${symbol}_${accountId}`;
    if (!global.lastPriceLog) global.lastPriceLog = {};
    
    if (!global.lastPriceLog[lastLogKey] || (now - global.lastPriceLog[lastLogKey]) > 60000) {
      if (positions.length > 0) {
        console.log(`[ENHANCED] üìä ${symbol} @ ${currentPrice} - ${positions.length} posi√ß√µes ativas (conta ${accountId})`);
      }
      global.lastPriceLog[lastLogKey] = now;
    }
    
  } catch (error) {
    console.error(`[ENHANCED] ‚ùå Erro ao atualizar pre√ßos para ${symbol} conta ${accountId}:`, error.message);
  }
}

/**
 * Job de limpeza peri√≥dica
 */
async function runPeriodicCleanup(accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[CLEANUP] AccountId inv√°lido: ${accountId}`);
      return;
    }
    
    //console.log(`[CLEANUP] Executando limpeza peri√≥dica para conta ${accountId}...`);
    
    // Verificar sinais expirados
    await checkExpiredSignals(accountId);
    
    // Limpar sinais √≥rf√£os
    await cleanupOrphanSignals(accountId);
    
    // A cada 10 minutos, verificar posi√ß√µes fantasma
    const now = new Date();
    if (now.getMinutes() % 10 === 0) {
      await forceCloseGhostPositions(accountId);
    }
    
    //console.log(`[CLEANUP] ‚úÖ Limpeza peri√≥dica conclu√≠da para conta ${accountId}`);
  } catch (error) {
    console.error(`[CLEANUP] Erro na limpeza peri√≥dica para conta ${accountId}:`, error.message);
  }
}

/**
 * Monitora sa√∫de dos WebSockets
 */
function monitorWebSocketHealth(accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[HEALTH] AccountId inv√°lido: ${accountId}`);
      return;
    }
    
    console.log(`[HEALTH] Verificando sa√∫de dos WebSockets para conta ${accountId}...`);
    
    const isApiConnected = websockets.isWebSocketApiConnected(accountId);
    const isApiAuthenticated = websockets.isWebSocketApiAuthenticated(accountId);
    
    console.log(`[HEALTH] Conta ${accountId}:`);
    console.log(`  - WebSocket API conectado: ${isApiConnected ? '‚úÖ' : '‚ùå'}`);
    console.log(`  - WebSocket API autenticado: ${isApiAuthenticated ? '‚úÖ' : '‚ùå'}`);
    
    // Reconectar se necess√°rio
    if (!isApiConnected || !isApiAuthenticated) {
      console.log(`[HEALTH] ‚ö†Ô∏è Problemas detectados na conta ${accountId}, tentando reconectar...`);
      websockets.startWebSocketApi(accountId).catch(error => {
        console.error(`[HEALTH] Erro ao reconectar conta ${accountId}:`, error.message);
      });
    }
    
  } catch (error) {
    console.error(`[HEALTH] Erro ao monitorar WebSockets para conta ${accountId}:`, error.message);
  }
}

/**
 * ‚úÖ FUN√á√ÉO COMPLETA DE MONITORAMENTO COMO NO _DEV
 * Combina trailing stops, verifica√ß√£o de posi√ß√µes fechadas e limpeza
 */
async function runAdvancedPositionMonitoring(accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[ADVANCED_MONITOR] AccountId inv√°lido: ${accountId}`);
      return;
    }
    
    console.log(`[ADVANCED_MONITOR] üîÑ Executando monitoramento avan√ßado para conta ${accountId}...`);
    
    const db = await getDatabaseInstance();
    const api = require('../api');
    const { movePositionToHistory } = require('./positionHistory');
    
    // ‚úÖ 1. VERIFICAR POSI√á√ïES ABERTAS NO BANCO
    const [openPositions] = await db.query(`
      SELECT * FROM posicoes 
      WHERE status = 'OPEN' AND conta_id = ?
    `, [accountId]);
    
    if (openPositions.length === 0) {
      console.log(`[ADVANCED_MONITOR] ‚ÑπÔ∏è Nenhuma posi√ß√£o aberta para conta ${accountId}`);
      return;
    }
    
    console.log(`[ADVANCED_MONITOR] üìä Monitorando ${openPositions.length} posi√ß√µes para conta ${accountId}`);
    
    // ‚úÖ 2. OBTER POSI√á√ïES DA CORRETORA PARA COMPARA√á√ÉO
    const exchangePositions = await api.getAllOpenPositions(accountId);
    const exchangePositionsMap = new Map();
    exchangePositions.forEach(pos => {
      exchangePositionsMap.set(pos.simbolo, pos);
    });
    
    let checkedCount = 0;
    let closedCount = 0;
    
    // ‚úÖ 3. VERIFICAR CADA POSI√á√ÉO
    for (const position of openPositions) {
      try {
        checkedCount++;
        
        // Verificar se posi√ß√£o ainda existe na corretora
        const exchangePos = exchangePositionsMap.get(position.simbolo);
        
        if (!exchangePos || Math.abs(parseFloat(exchangePos.quantidade)) <= 0.000001) {
          console.log(`[ADVANCED_MONITOR] üîÑ Posi√ß√£o ${position.simbolo} fechada na corretora, movendo para hist√≥rico...`);
          
          const moved = await movePositionToHistory(
            db, 
            position.id, 
            'CLOSED', 
            'Monitoramento autom√°tico - posi√ß√£o fechada na corretora',
            accountId
          );
          
          if (moved) {
            closedCount++;
          }
          
          continue; // Pular verifica√ß√µes de trailing para posi√ß√£o fechada
        }
        
        // ‚úÖ 4. OBTER PRE√áO ATUAL E VERIFICAR TRAILING STOPS
        const currentPrice = await api.getPrice(position.simbolo, accountId);
        
        if (currentPrice && currentPrice > 0) {
          // Atualizar pre√ßo corrente no banco
          await db.query(`
            UPDATE posicoes 
            SET preco_corrente = ?, data_hora_ultima_atualizacao = NOW()
            WHERE id = ?
          `, [currentPrice, position.id]);
          
          // Verificar trailing stops
          const { checkOrderTriggers } = require('./trailingStopLoss');
          await checkOrderTriggers(db, position, currentPrice, accountId);
          
          console.log(`[ADVANCED_MONITOR] ‚úÖ ${position.simbolo} @ ${currentPrice} - trailing verificado`);
        }
        
        // Pequena pausa entre verifica√ß√µes
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (posError) {
        console.error(`[ADVANCED_MONITOR] ‚ùå Erro ao verificar posi√ß√£o ${position.simbolo}:`, posError.message);
      }
    }
    
    console.log(`[ADVANCED_MONITOR] ‚úÖ Monitoramento conclu√≠do para conta ${accountId}:`);
    console.log(`[ADVANCED_MONITOR]   - Posi√ß√µes verificadas: ${checkedCount}`);
    console.log(`[ADVANCED_MONITOR]   - Posi√ß√µes movidas para hist√≥rico: ${closedCount}`);
    
  } catch (error) {
    console.error(`[ADVANCED_MONITOR] ‚ùå Erro no monitoramento avan√ßado para conta ${accountId}:`, error.message);
  }
}

/**
 * ‚úÖ VERIFICA√á√ÉO ESPEC√çFICA DE ORDERS E POSI√á√ïES COMO NO _DEV
 */
async function logOpenPositionsAndOrders(accountId) {
  try {
    const db = await getDatabaseInstance();
    const api = require('../api');
    
    if (!db) {
      console.error(`[LOG_STATUS] N√£o foi poss√≠vel conectar ao banco para conta ${accountId}`);
      return;
    }

    // Obter posi√ß√µes abertas do banco
    const [dbPositions] = await db.query(`
      SELECT id, simbolo, quantidade, preco_entrada, preco_corrente, side 
      FROM posicoes WHERE status = 'OPEN' AND conta_id = ?
    `, [accountId]);
    
    // Obter ordens pendentes
    const [pendingOrders] = await db.query(`
      SELECT simbolo, tipo_ordem_bot, tipo_ordem, preco, quantidade, status, side 
      FROM ordens 
      WHERE status IN ('NEW', 'PARTIALLY_FILLED') AND conta_id = ?
      ORDER BY simbolo, tipo_ordem_bot
    `, [accountId]);

    // Obter posi√ß√µes abertas da corretora para compara√ß√£o
    const exchangePositions = await api.getAllOpenPositions(accountId);
    
    console.log('\n=== POSI√á√ïES ABERTAS E ORDENS PENDENTES ===');
    console.log(`[MONITOR] Posi√ß√µes no banco: ${dbPositions.length} | Posi√ß√µes na corretora: ${exchangePositions.length}`);
    
    // Mostrar posi√ß√µes do banco
    if (dbPositions.length > 0) {
      console.log('\nüìä Posi√ß√µes no Banco:');
      dbPositions.forEach(pos => {
        console.log(`  ${pos.simbolo}: ${pos.quantidade} (${pos.side}) @ ${pos.preco_entrada} | Atual: ${pos.preco_corrente}`);
      });
    }
    
    // Mostrar posi√ß√µes da corretora
    if (exchangePositions.length > 0) {
      console.log('\nüè¶ Posi√ß√µes na Corretora:');
      exchangePositions.forEach(pos => {
        console.log(`  ${pos.simbolo}: ${pos.quantidade} (${pos.lado}) @ ${pos.precoEntrada} | Mark: ${pos.precoAtual}`);
      });
    }
    
    // Mostrar ordens pendentes
    if (pendingOrders.length > 0) {
      console.log('\nüìã Ordens Pendentes:');
      pendingOrders.forEach(order => {
        console.log(`  ${order.simbolo}: ${order.tipo_ordem_bot} ${order.side} ${order.quantidade} @ ${order.preco} (${order.status})`);
      });
    }
    
    console.log('===========================================\n');
  } catch (error) {
    console.error(`[LOG_STATUS] Erro ao obter posi√ß√µes e ordens para conta ${accountId}:`, error);
  }
}

// ‚úÖ ATUALIZAR module.exports:
module.exports = {
  updatePositionPricesWithTrailing,
  runPeriodicCleanup,
  monitorWebSocketHealth,
  runAdvancedPositionMonitoring, // ‚úÖ NOVA
  logOpenPositionsAndOrders       // ‚úÖ NOVA
};