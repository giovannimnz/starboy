const axios = require('axios');
const crypto = require('crypto');
const { getDatabaseInstance } = require('./db/conexao');





// ============================================================================
// MAP GLOBAL ÚNICO - VERSÃO ULTRA-SIMPLES SEM NENHUMA RECURSÃO
// ============================================================================
const accountStates = new Map();

console.log('[API] Map accountStates criado como singleton global (versão ultra-simples)');

/**
 * Define um estado de conta no Map - VERSÃO ULTRA-SIMPLES
 */
function setAccountState(accountId, state) {
  // OPERAÇÃO DIRETA SEM NENHUM LOG QUE POSSA CAUSAR RECURSÃO
  accountStates.set(accountId, state);
  return true;
}

/**
 * Obtém um estado de conta do Map - VERSÃO ULTRA-SIMPLES
 */
function getAccountState(accountId) {
  return accountStates.get(accountId) || null;
}

/**
 * Debug do Map - VERSÃO ULTRA-SIMPLES
 */
function debugAccountStates() {
  const size = accountStates.size;
  console.log(`[API] DEBUG - Map tem ${size} entradas`);
  if (size === 0) {
    console.log(`[API] DEBUG - Map está vazio!`);
  } else {
    for (const [id] of accountStates.entries()) {
      console.log(`[API] DEBUG - Conta ${id}: OK`);
    }
  }
}


// Map global para estados das contas - DEVE SER O MESMO EM TODO LUGAR
// Tornar disponível globalmente
if (typeof global !== 'undefined') {
  global.accountStates = accountStates;
}

/**
 * Obtém o Map de estados de forma consistente
 * @returns {Map} - Map de estados das contas
 */
function getAccountStatesMap() {
  // Sempre retornar a mesma referência
  return accountStates;
}

/**
 * Define um estado de conta no Map global
 * @param {number} accountId - ID da conta
 * @param {Object} state - Estado da conta
 */
function setAccountState(accountId, state) {
  console.log(`[API] Definindo estado para conta ${accountId} no Map global`);
  setAccountState(accountId, state);
  
  // Garantir que está disponível globalmente também
  if (typeof global !== 'undefined') {
    if (!global.accountStates) {
      global.accountStates = accountStates;
    }
    global.setAccountState(accountId, state);
  }
  
  console.log(`[API] Estado definido. Map agora tem ${accountStates.size} contas`);
}

/**
 * Obtém um estado de conta do Map global
 * @param {number} accountId - ID da conta
 * @returns {Object|null} - Estado da conta ou null
 */
function getAccountState(accountId) {
  let state = getAccountState(accountId);
  
  if (!state && typeof global !== 'undefined' && global.accountStates) {
    state = global.getAccountState(accountId);
    if (state) {
      console.log(`[API] Estado encontrado no global, copiando para Map local`);
      setAccountState(accountId, state);
    }
  }
  
  console.log(`[API] getAccountState(${accountId}): ${state ? 'ENCONTRADO' : 'NÃO ENCONTRADO'}`);
  return state;
}

// Map para armazenar estados das contas
// Mapa global para armazenar estados das conexões de cada conta
const accountConnections = new Map();

/**
 * Obtém ou cria o estado de conexão para uma conta
 */
function getAccountConnectionState(accountId, createIfMissing = false) {
  //console.log(`[API_STATE] getAccountConnectionState chamado: accountId=${accountId}, createIfMissing=${createIfMissing}`);
  
  if (!accountId || typeof accountId !== 'number') {
    console.warn(`[API_STATE] AccountId inválido: ${accountId} (tipo: ${typeof accountId})`);
    return null;
  }

  // Verificar se já existe
  let state = accountConnections.get(accountId);
  //console.log(`[API_STATE] Estado existente para conta ${accountId}: ${state ? 'SIM' : 'NÃO'}`);

  if (!state && createIfMissing) {
    console.log(`[API_STATE] Criando novo estado para conta ${accountId}...`);
    state = {
      accountId: accountId,
      apiKey: null,
      secretKey: null,
      wsApiKey: null,
      wsApiSecret: null,
      privateKey: null,
      apiUrl: null,
      wsUrl: null,
      wsApiUrl: null,
      isAuthenticated: false,
      wsApiAuthenticated: false,
      wsApiConnection: null,
      wsApiRequestCallbacks: new Map(),
      wsApiKeepAliveInterval: null,
      lastWsApiActivity: 0,
      userDataStream: null,
      listenKey: null,
      userDataKeepAliveInterval: null,
      lastUserDataStreamKeepAlive: 0,
      priceWebsockets: new Map(),
      monitoringCallbacks: null,
      isShuttingDown: false,
      dbInstance: null,
      lastPongTime: 0,
      pingInterval: null,
      ambiente: null,
      corretora: null,
      nomeConta: null,
    };
    
    accountConnections.set(accountId, state);
    console.log(`[API_STATE] ✅ Estado criado e armazenado para conta ${accountId}`);
    console.log(`[API_STATE] Total de contas no Map: ${accountConnections.size}`);
  }
  
  // Verificar novamente se existe
  const finalState = accountConnections.get(accountId);
  //console.log(`[API_STATE] Estado final para conta ${accountId}: ${finalState ? 'ENCONTRADO' : 'NÃO ENCONTRADO'}`);
  
  return finalState || null;
}

/**
 * Retorna todas as conexões de contas
 */
function getAllAccountConnections() {
  console.log(`[API] getAllAccountConnections chamado. Total de contas: ${accountConnections.size}`);
  return accountConnections;
}

/**
 * Carrega credenciais do banco de dados e atualiza o estado da conta
 */
async function loadCredentialsFromDatabase(accountId) {
  console.log(`[API] === NOVA FUNÇÃO loadCredentialsFromDatabase para conta ${accountId} ===`);
  
  if (typeof accountId !== 'number' || isNaN(accountId)) {
    const errorMsg = `AccountId deve ser um número válido: ${String(accountId)} (tipo: ${typeof accountId})`;
    console.error(`[API] ${errorMsg}`);
    throw new Error(errorMsg);
  }

  // PASSO 1: Garantir que o estado existe
  console.log(`[API] PASSO 1: Criando/obtendo estado para conta ${accountId}...`);
  const accountState = getAccountConnectionState(accountId, true);
  
  if (!accountState) {
    console.error(`[API] ERRO: Não foi possível criar estado para conta ${accountId}`);
    throw new Error(`Não foi possível criar estado para conta ${accountId}`);
  }
  
  console.log(`[API] ✅ Estado obtido para conta ${accountId}, accountId no estado: ${accountState.accountId}`);

  // PASSO 2: Obter conexão com banco
  console.log(`[API] PASSO 2: Obtendo conexão com banco...`);
  const db = await getDatabaseInstance(accountId);

  // PASSO 3: Executar query
  console.log(`[API] PASSO 3: Executando query para carregar credenciais...`);
  
  const [rows] = await db.query(
    `SELECT c.id, c.nome, c.api_key, c.api_secret, c.ws_api_key, c.ws_api_secret, 
            co.ambiente, co.corretora, co.futures_rest_api_url, co.futures_ws_market_url, co.futures_ws_api_url
     FROM contas c
     JOIN corretoras co ON c.id_corretora = co.id
     WHERE c.id = ? AND c.ativa = 1`,
    [accountId]
  );

  console.log(`[API] Query executada, ${rows.length} linha(s) retornada(s)`);
  
  if (rows.length === 0) {
    throw new Error(`Conta ${accountId} não encontrada, inativa ou sem corretora associada.`);
  }
  
  const creds = rows[0];
  console.log(`[API] Dados obtidos do banco:`, {
    id: creds.id,
    nome: creds.nome,
    has_api_key: !!creds.api_key,
    has_api_secret: !!creds.api_secret,
    has_ws_api_key: !!creds.ws_api_key,
    has_ws_api_secret: !!creds.ws_api_secret,
    futures_rest_api_url: creds.futures_rest_api_url,
    futures_ws_market_url: creds.futures_ws_market_url,
    futures_ws_api_url: creds.futures_ws_api_url,
    ambiente: creds.ambiente,
    corretora: creds.corretora
  });

  // PASSO 4: Atualizar estado
  console.log(`[API] PASSO 4: Atualizando estado com credenciais...`);
  
  accountState.accountId = accountId;
  accountState.apiKey = creds.api_key;
  accountState.secretKey = creds.api_secret;
  accountState.wsApiKey = creds.ws_api_key;
  accountState.wsApiSecret = creds.ws_api_secret;
  accountState.privateKey = creds.ws_api_secret;
  accountState.apiUrl = creds.futures_rest_api_url;
  accountState.wsUrl = creds.futures_ws_market_url;
  accountState.wsApiUrl = creds.futures_ws_api_url;
  accountState.ambiente = creds.ambiente;
  accountState.corretora = creds.corretora;
  accountState.nomeConta = creds.nome;

  console.log(`[API] PASSO 5: Verificando estado final...`);
  console.log(`[API] Estado final da conta ${accountId}:`);
  console.log(`  - accountId: ${accountState.accountId}`);
  console.log(`  - apiKey: ${accountState.apiKey ? accountState.apiKey.substring(0, 8) + '...' : 'MISSING'}`);
  console.log(`  - secretKey: ${accountState.secretKey ? 'OK' : 'MISSING'}`);
  console.log(`  - wsApiKey: ${accountState.wsApiKey ? accountState.wsApiKey.substring(0, 8) + '...' : 'MISSING'}`);
  console.log(`  - wsApiSecret: ${accountState.wsApiSecret ? 'OK' : 'MISSING'}`);
  console.log(`  - apiUrl: ${accountState.apiUrl || 'MISSING'}`);
  console.log(`  - wsUrl: ${accountState.wsUrl || 'MISSING'}`);
  console.log(`  - wsApiUrl: ${accountState.wsApiUrl || 'MISSING'}`);
  console.log(`  - ambiente: ${accountState.ambiente || 'MISSING'}`);
  console.log(`  - corretora: ${accountState.corretora || 'MISSING'}`);
  
  // PASSO 6: Verificar se o estado foi salvo no Map
  const verifyState = accountConnections.get(accountId);
  console.log(`[API] Verificação final: Estado existe no Map: ${verifyState ? 'SIM' : 'NÃO'}`);
  
  if (verifyState) {
    console.log(`[API] ✅ Estado verificado no Map para conta ${accountId}`);
    console.log(`[API] Estado verificado possui: apiKey=${!!verifyState.apiKey}, apiUrl=${!!verifyState.apiUrl}`);
  } else {
    console.error(`[API] ❌ ERRO: Estado não encontrado no Map após criação!`);
  }
  
  // GARANTIR que o estado está no Map unificado
  // Salvar estado no Map unificado
  accountStates.set(accountId, accountState);
  console.log('[API] Estado salvo diretamente no Map');
  
  console.log(`[API] === FIM loadCredentialsFromDatabase para conta ${accountId} ===`);
  return accountState;
}

/**
 * Faz requisição autenticada para a API
 */
/**
 * Faz uma requisição autenticada para a API da Binance
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
/**
 * Faz uma requisição autenticada para a API da Binance
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
/**
 * Faz uma requisição autenticada para a API da Binance
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
/**
 * Faz uma requisição autenticada para a API da Binance
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
/**
 * Faz uma requisição autenticada para a API da Binance
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
/**
 * Faz uma requisição autenticada para a API da Binance - SEM RECURSÃO
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
/**
 * Faz uma requisição autenticada para a API da Binance - VERSÃO COM ASSINATURA CORRIGIDA
 * @param {number} accountId - ID da conta
 * @param {string} method - Método HTTP (GET, POST, etc.)
 * @param {string} endpoint - Endpoint da API
 * @param {Object} params - Parâmetros da requisição
 * @returns {Promise<Object>} - Resposta da API
 */
async function makeAuthenticatedRequest(accountId, method, endpoint, params = {}) {
  try {
    console.log(`[API] makeAuthenticatedRequest chamado: accountId=${accountId}, method=${method}, endpoint=${endpoint}`);
    
    // Validar accountId
    if (!accountId || typeof accountId !== 'number') {
      throw new Error(`AccountId deve ser um número válido: ${accountId} (tipo: ${typeof accountId})`);
    }
    
    // Debug do Map
    debugAccountStates();
    
    // Buscar estado no Map
    const accountState = accountStates.get(accountId);
    console.log(`[API] makeAuthenticatedRequest - Estado direto do Map: ${accountState ? 'ENCONTRADO' : 'NÃO ENCONTRADO'}`);
    
    if (!accountState) {
      throw new Error(`Estado da conta ${accountId} não encontrado no Map. Deve ser carregado primeiro via loadCredentialsFromDatabase.`);
    }
    
    const { apiKey, secretKey, apiUrl } = accountState;
    
    if (!apiKey || !secretKey || !apiUrl) {
      throw new Error(`Credenciais incompletas para conta ${accountId}: apiKey=${!!apiKey}, secretKey=${!!secretKey}, apiUrl=${!!apiUrl}`);
    }
    
    console.log(`[API] ✅ Usando credenciais da conta ${accountId} - apiKey: ${apiKey.substring(0, 8)}...`);
    
    // CORREÇÃO CRÍTICA: Timestamp deve ser em milliseconds e recente
    const timestamp = Date.now();
    
    // CORREÇÃO CRÍTICA: Para métodos GET, incluir parâmetros na query string
    // Para métodos POST/PUT/DELETE, incluir no body
    let queryString = '';
    let bodyData = '';
    
    if (method === 'GET') {
      // Para GET: todos os parâmetros vão na query string para assinatura
      const queryParams = {
        ...params,
        timestamp: timestamp
      };
      
      queryString = Object.keys(queryParams)
        .sort() // IMPORTANTE: ordenar as chaves
        .map(key => {
          const value = queryParams[key];
          return `${key}=${encodeURIComponent(value)}`;
        })
        .join('&');
        
    } else {
      // Para POST/PUT/DELETE: parâmetros vão no body para assinatura
      const bodyParams = {
        ...params,
        timestamp: timestamp
      };
      
      queryString = Object.keys(bodyParams)
        .sort() // IMPORTANTE: ordenar as chaves
        .map(key => {
          const value = bodyParams[key];
          return `${key}=${encodeURIComponent(value)}`;
        })
        .join('&');
        
      bodyData = queryString;
    }
    
    // CORREÇÃO CRÍTICA: Gerar assinatura HMAC-SHA256 correta
    const crypto = require('crypto');
    const signature = crypto
      .createHmac('sha256', secretKey)
      .update(queryString) // Assinar a query string ordenada
      .digest('hex');
    
    console.log(`[API] Timestamp: ${timestamp}`);
    console.log(`[API] Query string para assinatura: ${queryString.substring(0, 100)}...`);
    console.log(`[API] Assinatura gerada: ${signature.substring(0, 16)}...`);
    
    // Adicionar assinatura
    const finalQueryString = queryString + `&signature=${signature}`;
    
    // Construir URL final
    let fullUrl;
    if (method === 'GET') {
      fullUrl = `${apiUrl}${endpoint}?${finalQueryString}`;
    } else {
      fullUrl = `${apiUrl}${endpoint}`;
    }
    
    console.log(`[API] Fazendo requisição: ${method} ${fullUrl.split('?')[0]}`);
    
    // Configurar headers
    const headers = {
      'X-MBX-APIKEY': apiKey,
      'Content-Type': 'application/x-www-form-urlencoded'
    };
    
    // Fazer requisição
    const axios = require('axios');
    let response;
    
    if (method === 'GET') {
      response = await axios.get(fullUrl, { headers });
    } else if (method === 'POST') {
      const postData = bodyData + `&signature=${signature}`;
      response = await axios.post(fullUrl, postData, { headers });
    } else if (method === 'PUT') {
      const putData = bodyData + `&signature=${signature}`;
      response = await axios.put(fullUrl, putData, { headers });
    } else if (method === 'DELETE') {
      const deleteData = bodyData + `&signature=${signature}`;
      response = await axios.delete(fullUrl, { headers, data: deleteData });
    } else {
      throw new Error(`Método HTTP não suportado: ${method}`);
    }
    
    return response.data;
    
  } catch (error) {
    const errorMessage = error.response?.data?.msg || error.message;
    console.error(`[API] Falha na requisição ${method} ${endpoint}: ${errorMessage}`);
    throw new Error(`Falha na requisição ${method} ${endpoint}: ${errorMessage}`);
  }
}

/**
 * Obtém preço de um símbolo
 */
async function getPrice(symbol, accountId) {
  try {
    console.log(`[API] getPrice - symbol: ${symbol}, accountId: ${accountId}`);
    
    if (!symbol || typeof symbol !== 'string') {
      throw new Error(`Símbolo inválido: ${symbol}`);
    }
    
    if (!accountId || typeof accountId !== 'number') {
      throw new Error(`AccountId deve ser um número válido: ${accountId}`);
    }

    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v1/ticker/price', { symbol });
    
    if (response && response.price) {
      const price = parseFloat(response.price);
      if (isNaN(price) || price <= 0) {
        console.error(`[API] Preço inválido recebido para ${symbol}: ${response.price}`);
        return null;
      }
      console.log(`[API] ✅ Preço obtido para ${symbol}: ${price}`);
      return price;
    } else {
      console.error(`[API] Resposta inválida ao obter preço para ${symbol}:`, response);
      return null;
    }
  } catch (error) {
    console.error(`[API] Erro ao obter preço para ${symbol} (conta ${accountId}):`, error.message);
    return null;
  }
}

/**
 * Obtém todas as posições abertas
 */
async function getAllOpenPositions(accountId) {
  try {
    console.log(`[API] Obtendo posições abertas para conta ${accountId}...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v2/positionRisk', {});
    
    if (!Array.isArray(response)) {
      console.error(`[API] Resposta inválida ao obter posições para conta ${accountId}:`, response);
      return [];
    }

    const openPositions = response
      .filter(pos => parseFloat(pos.positionAmt) !== 0)
      .map(pos => ({
        simbolo: pos.symbol,
        quantidade: Math.abs(parseFloat(pos.positionAmt)),
        lado: parseFloat(pos.positionAmt) > 0 ? 'LONG' : 'SHORT',
        precoEntrada: parseFloat(pos.entryPrice),
        precoAtual: parseFloat(pos.markPrice),
        alavancagem: parseInt(pos.leverage) || 1,
        pnlNaoRealizado: parseFloat(pos.unRealizedProfit),
        margem: parseFloat(pos.isolatedMargin),
        tipo: pos.marginType === 'isolated' ? 'ISOLATED' : 'CROSS'
      }));

    console.log(`[API] ✅ ${openPositions.length} posições abertas encontradas para conta ${accountId}`);
    return openPositions;
  } catch (error) {
    console.error(`[API] Erro ao obter posições abertas para conta ${accountId}:`, error.message);
    throw error;
  }
}

/**
 * Obtém listen key para UserDataStream
 */
async function getListenKey(accountId) {
  try {
    console.log(`[API] Obtendo listen key para conta ${accountId}...`);
    
    const accountState = getAccountConnectionState(accountId);
    if (!accountState || !accountState.apiKey || !accountState.apiUrl) {
      console.log(`[API] API Key ou API URL não configuradas para getListenKey da conta ${accountId}.`);
      return null;
    }

    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/listenKey', {});
    
    if (response && response.listenKey) {
      console.log(`[API] ✅ Listen key obtido para conta ${accountId}`);
      return response.listenKey;
    } else {
      console.error(`[API] Resposta inválida ao obter listen key para conta ${accountId}:`, response);
      return null;
    }
  } catch (error) {
    console.error(`[API] Erro ao obter listen key para conta ${accountId}:`, error.message);
    return null;
  }
}


/**
 * Obtém precisão de um símbolo
 */
async function getPrecision(symbol, accountId) {
  try {
    console.log(`[API] Obtendo precisão para ${symbol} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v1/exchangeInfo', {});
    
    if (response && response.symbols) {
      const symbolInfo = response.symbols.find(s => s.symbol === symbol);
      if (symbolInfo) {
        const quantityPrecision = symbolInfo.quantityPrecision || 3;
        const pricePrecision = symbolInfo.pricePrecision || 2;
        
        console.log(`[API] ✅ Precisão obtida para ${symbol}: quantity=${quantityPrecision}, price=${pricePrecision}`);
        return {
          quantityPrecision,
          pricePrecision,
          minQty: parseFloat(symbolInfo.filters?.find(f => f.filterType === 'LOT_SIZE')?.minQty || '0.001'),
          stepSize: parseFloat(symbolInfo.filters?.find(f => f.filterType === 'LOT_SIZE')?.stepSize || '0.001'),
          tickSize: parseFloat(symbolInfo.filters?.find(f => f.filterType === 'PRICE_FILTER')?.tickSize || '0.01')
        };
      }
    }
    
    console.warn(`[API] Precisão não encontrada para ${symbol}, usando padrões`);
    return { quantityPrecision: 3, pricePrecision: 2, minQty: 0.001, stepSize: 0.001, tickSize: 0.01 };
  } catch (error) {
    console.error(`[API] Erro ao obter precisão para ${symbol}:`, error.message);
    return { quantityPrecision: 3, pricePrecision: 2, minQty: 0.001, stepSize: 0.001, tickSize: 0.01 };
  }
}
/**
 * Obtém alavancagem atual de um símbolo
 */
async function getCurrentLeverage(symbol, accountId) {
  try {
    console.log(`[API] Obtendo alavancagem atual para ${symbol} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v2/positionRisk', { symbol });
    
    if (response && Array.isArray(response) && response.length > 0) {
      const leverage = parseInt(response[0].leverage) || 20;
      console.log(`[API] ✅ Alavancagem atual para ${symbol}: ${leverage}x`);
      return leverage;
    }
    
    console.warn(`[API] Alavancagem não encontrada para ${symbol}, usando padrão 20x`);
    return 20;
  } catch (error) {
    console.error(`[API] Erro ao obter alavancagem para ${symbol}:`, error.message);
    return 20;
  }
}
/**
 * Altera alavancagem inicial de um símbolo
 */
async function changeInitialLeverage(symbol, leverage, accountId) {
  try {
    console.log(`[API] Alterando alavancagem para ${symbol}: ${leverage}x (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/leverage', {
      symbol,
      leverage
    });
    
    if (response) {
      console.log(`[API] ✅ Alavancagem alterada para ${symbol}: ${leverage}x`);
      return response;
    }
    
    throw new Error('Resposta inválida');
  } catch (error) {
    console.error(`[API] Erro ao alterar alavancagem para ${symbol}:`, error.message);
    throw error;
  }
}
/**
 * Obtém tipo de margem atual de um símbolo
 */
async function getCurrentMarginType(symbol, accountId) {
  try {
    console.log(`[API] Obtendo tipo de margem para ${symbol} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v2/positionRisk', { symbol });
    
    if (response && Array.isArray(response) && response.length > 0) {
      const marginType = response[0].marginType || 'cross';
      console.log(`[API] ✅ Tipo de margem para ${symbol}: ${marginType}`);
      return marginType.toLowerCase();
    }
    
    console.warn(`[API] Tipo de margem não encontrado para ${symbol}, usando padrão 'cross'`);
    return 'cross';
  } catch (error) {
    console.error(`[API] Erro ao obter tipo de margem para ${symbol}:`, error.message);
    return 'cross';
  }
}
/**
 * Altera tipo de margem de um símbolo
 */
async function changeMarginType(symbol, marginType, accountId) {
  try {
    console.log(`[API] Alterando tipo de margem para ${symbol}: ${marginType} (conta ${accountId})...`);
    
    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/marginType', {
      symbol,
      marginType: marginType.toUpperCase()
    });
    
    if (response) {
      console.log(`[API] ✅ Tipo de margem alterado para ${symbol}: ${marginType}`);
      return response;
    }
    
    throw new Error('Resposta inválida');
  } catch (error) {
    console.error(`[API] Erro ao alterar tipo de margem para ${symbol}:`, error.message);
    throw error;
  }
}


/**
 * Verifica e corrige consistência do ambiente
 */
async function verifyAndFixEnvironmentConsistency(accountId) {
  try {
    console.log(`[API] Verificando consistência de ambiente para conta ${accountId}...`);
    
    const accountState = getAccountConnectionState(accountId);
    if (!accountState) {
      console.warn(`[API] Estado da conta ${accountId} não encontrado para verificação de consistência`);
      return false;
    }
    
    // Verificar se URLs estão corretas para o ambiente
    const { ambiente, apiUrl, wsUrl, wsApiUrl } = accountState;
    
    if (ambiente === 'prd') {
      // Verificar se não está usando URLs de testnet
      const isTestnet = apiUrl?.includes('testnet') || wsUrl?.includes('testnet') || wsApiUrl?.includes('testnet');
      if (isTestnet) {
        console.warn(`[API] ⚠️ Ambiente de produção usando URLs de testnet para conta ${accountId}`);
        return false;
      }
    } else {
      // Verificar se não está usando URLs de produção
      const isProduction = !apiUrl?.includes('testnet') || !wsUrl?.includes('testnet') || !wsApiUrl?.includes('testnet');
      if (isProduction) {
        console.warn(`[API] ⚠️ Ambiente de testnet usando URLs de produção para conta ${accountId}`);
        return false;
      }
    }
    
    console.log(`[API] ✅ Consistência de ambiente verificada para conta ${accountId}`);
    return true;
  } catch (error) {
    console.error(`[API] Erro ao verificar consistência de ambiente:`, error.message);
    return false;
  }
}


/**
 * Obtém detalhes do saldo da conta de futuros
 * @param {number} accountId - ID da conta
 * @returns {Promise<Object>} - Detalhes do saldo
 */
async function getFuturesAccountBalanceDetails(accountId) {
  try {
    console.log(`[API] Obtendo detalhes do saldo para conta ${accountId}...`);
    
    if (!accountId || typeof accountId !== 'number') {
      throw new Error(`AccountId inválido: ${accountId}`);
    }

    const result = await makeAuthenticatedRequest(accountId, 'GET', '/v2/balance');
    
    if (result && Array.isArray(result)) {
      console.log(`[API] ✅ Detalhes do saldo obtidos para conta ${accountId}`);
      return {
        assets: result
      };
    } else {
      throw new Error('Resposta inválida da API de saldo');
    }
  } catch (error) {
    console.error(`[API] Erro ao obter detalhes do saldo para conta ${accountId}:`, error.message);
    throw error;
  }
}


/**
 * Obtém ordens recentes para sincronização
 * @param {string} symbol - Símbolo do par
 * @param {number} accountId - ID da conta
 * @param {number} limit - Limite de ordens (padrão: 10)
 * @returns {Promise<Array>} - Lista de ordens recentes
 */
async function getRecentOrders(accountId, symbol, limit = 10) {
  try {
    console.log(`[API] Obtendo ordens recentes para ${symbol} (conta ${accountId})...`);
    
    const params = {
      symbol: symbol,
      limit: limit
    };
    
    const response = await makeAuthenticatedRequest(accountId, 'GET', '/v1/allOrders', params);
    
    if (Array.isArray(response)) {
      console.log(`[API] ✅ ${response.length} ordens recentes obtidas para ${symbol}`);
      return response;
    } else {
      console.error(`[API] Resposta inválida ao obter ordens recentes para ${symbol}:`, response);
      return [];
    }
  } catch (error) {
    console.error(`[API] Erro ao obter ordens recentes para ${symbol} (conta ${accountId}):`, error.message);
    return [];
  }
}

/**
 * Obtém o tick size (precisão de preço) para um símbolo
 * @param {string} symbol - Símbolo do par
 * @param {number} accountId - ID da conta
 * @returns {Promise<number>} - Tick size (ex: 0.00001)
 */
/**
 * Obtém o tick size (precisão de preço) para um símbolo
 * @param {string} symbol - Símbolo do par
 * @param {number} accountId - ID da conta
 * @returns {Promise<number>} - Tick size (ex: 0.00001)
 */
async function getTickSize(symbol, accountId) {
  try {
    console.log(`[API] Obtendo tick size para ${symbol} (conta ${accountId})...`);
    
    // Usar a função getPrecision existente que já obtém as informações do exchangeInfo
    const precision = await getPrecision(symbol, accountId);
    
    if (precision && typeof precision.price === 'number') {
      // Calcular tick size baseado na precisão
      // Se price precision = 7, então tick size = 0.0000001 (10^-7)
      const tickSize = Math.pow(10, -precision.price);
      
      console.log(`[API] ✅ Tick size para ${symbol}: ${tickSize} (precisão: ${precision.price})`);
      return tickSize;
    } else if (precision && typeof precision.pricePrecision === 'number') {
      // Fallback para campo alternativo
      const tickSize = Math.pow(10, -precision.pricePrecision);
      
      console.log(`[API] ✅ Tick size para ${symbol}: ${tickSize} (pricePrecision: ${precision.pricePrecision})`);
      return tickSize;
    } else {
      console.warn(`[API] Não foi possível obter precisão válida para ${symbol}, usando fallback`);
      // Fallback padrão para USDT pairs
      return 0.00001; // Padrão para a maioria dos pares USDT
    }
  } catch (error) {
    console.error(`[API] Erro ao obter tick size para ${symbol} (conta ${accountId}):`, error.message);
    // Fallback em caso de erro
    return 0.00001;
  }
}


/**
 * Arredonda preço para o tick size do símbolo
 * @param {string} symbol - Símbolo
 * @param {number} price - Preço a ser arredondado
 * @param {number} accountId - ID da conta
 * @returns {Promise<number>} - Preço arredondado
 */
async function roundPriceToTickSize(symbol, price, accountId) {
  try {
    console.log(`[API] Arredondando preço ${price} para ${symbol}...`);
    
    const tickSize = await getTickSize(symbol, accountId);
    
    if (!tickSize || tickSize <= 0) {
      console.warn(`[API] TickSize inválido para ${symbol}, usando preço original`);
      return parseFloat(price);
    }
    
    // Arredondar para o múltiplo mais próximo do tick size
    const rounded = Math.round(price / tickSize) * tickSize;
    
    console.log(`[API] Preço ${price} arredondado para ${rounded} (tick size: ${tickSize})`);
    return parseFloat(rounded.toFixed(8)); // Máximo 8 decimais
    
  } catch (error) {
    console.error(`[API] Erro ao arredondar preço para ${symbol}:`, error.message);
    return parseFloat(price); // Retorna preço original em caso de erro
  }
}


/**
 * Cria ordem limit maker
 * @param {number} accountId - ID da conta
 * @param {string} symbol - Símbolo
 * @param {string} quantity - Quantidade
 * @param {string} side - Lado (BUY/SELL)
 * @param {string} price - Preço
 * @returns {Promise<Object>} - Resultado da ordem
 */
async function newLimitMakerOrder(accountId, symbol, quantity, side, price) {
  try {
    console.log(`[API] Criando ordem LIMIT MAKER: ${side} ${quantity} ${symbol} @ ${price} (conta ${accountId})`);
    
    const orderParams = {
      symbol: symbol,
      side: side,
      type: 'LIMIT',
      timeInForce: 'GTC',
      quantity: quantity,
      price: price
    };
    
    const response = await makeAuthenticatedRequest(accountId, 'POST', '/v1/order', orderParams);
    
    if (response && response.orderId) {
      console.log(`[API] ✅ Ordem LIMIT MAKER criada: ID ${response.orderId}`);
      return response;
    } else {
      console.error(`[API] Resposta inválida ao criar ordem LIMIT MAKER:`, response);
      throw new Error('Resposta inválida da API ao criar ordem');
    }
  } catch (error) {
    console.error(`[API] Erro ao criar ordem LIMIT MAKER para ${symbol}:`, error.message);
    throw error;
  }
}

module.exports = {
  setAccountState,
  getAccountState,
  debugAccountStates,
  getAccountStatesMap,
  setAccountState,
  getAccountState,
  getAccountConnectionState,
  getAllAccountConnections,
  loadCredentialsFromDatabase,
  makeAuthenticatedRequest,
  getPrice,
  getAllOpenPositions,
  getListenKey,
  getPrecision,
  getCurrentLeverage,
  changeInitialLeverage,
  getCurrentMarginType,
  changeMarginType,
  verifyAndFixEnvironmentConsistency,
  getFuturesAccountBalanceDetails,
  getRecentOrders,
  getTickSize,
  roundPriceToTickSize,
  newLimitMakerOrder,
};