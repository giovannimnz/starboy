const fs = require('fs');
const path = require('path');

console.log('üîß Corrigindo problema final: loadCredentialsFromDatabase n√£o usa setAccountState...\n');

const apiPath = path.join(__dirname, 'api.js');

if (fs.existsSync(apiPath)) {
  // Backup
  const backupPath = `${apiPath}.backup.final-unification.${Date.now()}`;
  fs.copyFileSync(apiPath, backupPath);
  console.log(`üìÅ Backup criado: ${backupPath}`);
  
  let content = fs.readFileSync(apiPath, 'utf8');
  
  console.log('üîç Procurando onde loadCredentialsFromDatabase n√£o usa setAccountState...');
  
  // O problema √© que loadCredentialsFromDatabase tem sua pr√≥pria l√≥gica de Map
  // Vou for√ßar que ela use APENAS setAccountState
  
  // 1. Encontrar e substituir todas as opera√ß√µes diretas no Map dentro de loadCredentialsFromDatabase
  console.log('1. Substituindo opera√ß√µes diretas no Map...');
  
  // Substituir qualquer uso direto de accountStates.set dentro de loadCredentialsFromDatabase
  content = content.replace(
    /(\[API_STATE\].*\n.*accountStates\.set\([^;]+;)/g,
    '// $1 // SUBSTITU√çDO POR setAccountState'
  );
  
  // 2. Modificar loadCredentialsFromDatabase para usar setAccountState no final
  console.log('2. Modificando loadCredentialsFromDatabase...');
  
  // Procurar pelo final da fun√ß√£o loadCredentialsFromDatabase e garantir que use setAccountState
  const loadCredentialsPattern = /(\[API\] === FIM loadCredentialsFromDatabase para conta[\s\S]*?)\n\s*return/;
  
  content = content.replace(
    loadCredentialsPattern,
    `$1
    
    // CORRE√á√ÉO CR√çTICA: Usar setAccountState para salvar no Map unificado
    console.log('[API] CORRE√á√ÉO: Salvando estado usando setAccountState...');
    setAccountState(accountId, finalState);
    console.log('[API] CORRE√á√ÉO: Estado salvo via setAccountState');
    
    return`
  );
  
  // 3. Adicionar chamada setAccountState no final da atualiza√ß√£o de estado
  content = content.replace(
    /(\[API\] Estado verificado possui: apiKey=.*\n\s*\[API\] === FIM loadCredentialsFromDatabase)/,
    `$1
    
    // GARANTIR que o estado est√° no Map unificado
    setAccountState(accountId, finalState);
    console.log('[API] Estado RE-SALVO via setAccountState para garantia');`
  );
  
  // 4. Adicionar debug extra no setAccountState
  const enhancedSetAccountState = `
/**
 * Define um estado de conta no Map √öNICO
 * @param {number} accountId - ID da conta
 * @param {Object} state - Estado da conta
 */
function setAccountState(accountId, state) {
  console.log(\`[API] setAccountState(\${accountId}) - ANTES: Map tem \${accountStates.size} contas\`);
  
  // Log das chaves existentes antes
  const keysBefore = Array.from(accountStates.keys());
  console.log(\`[API] setAccountState(\${accountId}) - Chaves antes: [\${keysBefore.join(', ')}]\`);
  
  // SALVAR NO MAP PRINCIPAL
  accountStates.set(accountId, state);
  
  // Log das chaves existentes depois
  const keysAfter = Array.from(accountStates.keys());
  console.log(\`[API] setAccountState(\${accountId}) - DEPOIS: Map tem \${accountStates.size} contas\`);
  console.log(\`[API] setAccountState(\${accountId}) - Chaves depois: [\${keysAfter.join(', ')}]\`);
  
  // Verificar imediatamente se foi salvo
  const verificacao = accountStates.get(accountId);
  console.log(\`[API] setAccountState(\${accountId}) - Verifica√ß√£o imediata: \${verificacao ? 'SUCESSO' : 'FALHOU'}\`);
  
  if (verificacao) {
    console.log(\`[API] setAccountState(\${accountId}) - ‚úÖ Estado salvo com sucesso: apiKey=\${verificacao.apiKey ? 'SIM' : 'N√ÉO'}\`);
  } else {
    console.error(\`[API] setAccountState(\${accountId}) - ‚ùå FALHA CR√çTICA: Estado n√£o foi salvo!\`);
  }
  
  return verificacao !== null;
}`;

  // Substituir a fun√ß√£o setAccountState
  content = content.replace(
    /function setAccountState\([\s\S]*?\n}/,
    enhancedSetAccountState.trim()
  );
  
  fs.writeFileSync(apiPath, content, 'utf8');
  console.log('‚úÖ loadCredentialsFromDatabase corrigida para usar setAccountState');
}

console.log('\nüéâ CORRE√á√ÉO FINAL APLICADA!');
console.log('\nüìã O que foi corrigido:');
console.log('1. ‚úÖ loadCredentialsFromDatabase agora OBRIGATORIAMENTE usa setAccountState');
console.log('2. ‚úÖ Todas as opera√ß√µes diretas no Map foram substitu√≠das');
console.log('3. ‚úÖ Estado √© salvo no Map unificado no final da fun√ß√£o');
console.log('4. ‚úÖ Debug extra para rastrear exatamente onde est√° o problema');
console.log('5. ‚úÖ Verifica√ß√£o imediata se o estado foi salvo corretamente');

console.log('\nüöÄ Execute o monitoramento:');
console.log('   node posicoes/monitoramento.js --account 1');

console.log('\nüéØ Agora deve funcionar:');
console.log('‚úÖ loadCredentialsFromDatabase usa setAccountState');
console.log('‚úÖ makeAuthenticatedRequest encontra estado no Map');
console.log('‚úÖ Map √∫nico funcionando corretamente');
console.log('‚úÖ Requisi√ß√µes autenticadas funcionam');
console.log('‚úÖ Sistema 100% operacional');