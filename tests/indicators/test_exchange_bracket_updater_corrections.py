#!/usr/bin/env python3
"""
Teste para validar as corre√ß√µes do Exchange Bracket Updater
"""
import os
import sys
from pathlib import Path
from datetime import datetime

# Adicionar o diret√≥rio do backend ao path
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "backend"))
sys.path.insert(0, str(Path(__file__).parent.parent.parent / "backend" / "indicators"))

def test_exchange_bracket_updater_corrected():
    """Testa as corre√ß√µes do Exchange Bracket Updater"""
    print("=== TESTE: Exchange Bracket Updater Corrigido ===")
    print(f"Timestamp: {datetime.now().strftime('%d-%m-%Y | %H:%M:%S')}")
    print("=" * 60)
    
    # Teste 1: Import do m√≥dulo
    print("\nüîç Teste 1: Verificando importa√ß√£o do m√≥dulo")
    try:
        from utils.exchange_bracket_updater import (
            update_leverage_brackets,
            test_binance_credentials,
            test_database_connection
        )
        print("‚úÖ M√≥dulo importado com sucesso")
    except ImportError as e:
        print(f"‚ùå Erro ao importar m√≥dulo: {e}")
        return False
    
    # Teste 2: Conex√£o com banco
    print("\nüîç Teste 2: Testando conex√£o com banco de dados")
    try:
        db_ok = test_database_connection()
        if db_ok:
            print("‚úÖ Conex√£o com banco funcionando")
        else:
            print("‚ùå Falha na conex√£o com banco")
    except Exception as e:
        print(f"‚ùå Erro ao testar conex√£o com banco: {e}")
        db_ok = False
    
    # Teste 3: Credenciais Binance
    print("\nüîç Teste 3: Testando credenciais Binance")
    try:
        creds_ok = test_binance_credentials()
        if creds_ok:
            print("‚úÖ Credenciais Binance funcionando")
        else:
            print("‚ùå Falha nas credenciais Binance")
    except Exception as e:
        print(f"‚ùå Erro ao testar credenciais Binance: {e}")
        creds_ok = False
    
    # Teste 4: Fun√ß√£o de atualiza√ß√£o (sem executar)
    print("\nüîç Teste 4: Verificando fun√ß√£o de atualiza√ß√£o")
    try:
        assert callable(update_leverage_brackets)
        print("‚úÖ Fun√ß√£o update_leverage_brackets dispon√≠vel")
        func_ok = True
    except Exception as e:
        print(f"‚ùå Erro na fun√ß√£o update_leverage_brackets: {e}")
        func_ok = False
    
    # Teste 5: Verificar se n√£o h√° mais refer√™ncias a "exchange_info"
    print("\nüîç Teste 5: Verificando se n√£o h√° refer√™ncias a tabela 'exchange_info'")
    try:
        import inspect
        source = inspect.getsource(update_leverage_brackets)
        if "exchange_info" in source:
            print("‚ùå Ainda h√° refer√™ncias √† tabela 'exchange_info'")
            table_ok = False
        else:
            print("‚úÖ N√£o h√° refer√™ncias √† tabela 'exchange_info'")
            table_ok = True
    except Exception as e:
        print(f"‚ùå Erro ao verificar c√≥digo: {e}")
        table_ok = False
    
    # Resumo
    print("\n" + "=" * 60)
    print("RESUMO DOS TESTES:")
    tests = [
        ("Importa√ß√£o do m√≥dulo", True),
        ("Conex√£o com banco", db_ok),
        ("Credenciais Binance", creds_ok),
        ("Fun√ß√£o de atualiza√ß√£o", func_ok),
        ("Sem refer√™ncias a exchange_info", table_ok)
    ]
    
    passed = 0
    for test_name, result in tests:
        status = "‚úÖ" if result else "‚ùå"
        print(f"  {status} {test_name}")
        if result:
            passed += 1
    
    print(f"\nResultado: {passed}/{len(tests)} testes passaram")
    
    if passed == len(tests):
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("‚úÖ O Exchange Bracket Updater foi corrigido com sucesso")
        return True
    else:
        print("‚ö†Ô∏è Alguns testes falharam. Verifique a configura√ß√£o.")
        return False

def test_symbol_insertion_logic():
    """Testa especificamente a l√≥gica de inser√ß√£o de s√≠mbolos"""
    print("\n=== TESTE: L√≥gica de Inser√ß√£o de S√≠mbolos ===")
    
    try:
        from utils.exchange_bracket_updater import update_leverage_brackets
        import inspect
        
        source = inspect.getsource(update_leverage_brackets)
        
        # Verificar se h√° l√≥gica de inser√ß√£o
        if "INSERT INTO exchange_symbols" in source:
            print("‚úÖ L√≥gica de inser√ß√£o de s√≠mbolos implementada")
            insert_ok = True
        else:
            print("‚ùå L√≥gica de inser√ß√£o de s√≠mbolos n√£o encontrada")
            insert_ok = False
        
        # Verificar se h√° l√≥gica de remo√ß√£o de obsoletos
        if "DELETE FROM exchange_symbols" in source:
            print("‚úÖ L√≥gica de remo√ß√£o de s√≠mbolos obsoletos implementada")
            delete_ok = True
        else:
            print("‚ùå L√≥gica de remo√ß√£o de s√≠mbolos obsoletos n√£o encontrada")
            delete_ok = False
        
        # Verificar se h√° tratamento de erro e continua√ß√£o
        if "continue" in source:
            print("‚úÖ L√≥gica de continua√ß√£o em caso de erro implementada")
            continue_ok = True
        else:
            print("‚ùå L√≥gica de continua√ß√£o em caso de erro n√£o encontrada")
            continue_ok = False
        
        return insert_ok and delete_ok and continue_ok
    
    except Exception as e:
        print(f"‚ùå Erro ao testar l√≥gica de inser√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal"""
    print("üöÄ INICIANDO TESTES DE CORRE√á√ÉO DO EXCHANGE BRACKET UPDATER")
    print("=" * 80)
    
    # Executar testes
    test1_ok = test_exchange_bracket_updater_corrected()
    test2_ok = test_symbol_insertion_logic()
    
    print("\n" + "=" * 80)
    print("RESULTADO FINAL:")
    
    if test1_ok and test2_ok:
        print("üéâ TODAS AS CORRE√á√ïES FORAM APLICADAS COM SUCESSO!")
        print("‚úÖ O sistema est√° pronto para uso")
        print("\nüìã Recursos implementados:")
        print("  ‚Ä¢ Inser√ß√£o autom√°tica de s√≠mbolos n√£o encontrados")
        print("  ‚Ä¢ Remo√ß√£o de s√≠mbolos obsoletos")
        print("  ‚Ä¢ Continua√ß√£o do processamento em caso de erro")
        print("  ‚Ä¢ Uso das tabelas corretas (exchange_symbols e exchange_filters)")
        print("  ‚Ä¢ Fallback para credenciais em senhas.py")
    else:
        print("‚ùå Algumas corre√ß√µes ainda precisam ser verificadas")
        print("üìã Verifique os erros acima e tente novamente")
    
    return test1_ok and test2_ok

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
