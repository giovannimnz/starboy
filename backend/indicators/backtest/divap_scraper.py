#!/usr/bin/env python3
"""
DIVAP Scraper - Busca sinais do banco de dados para an√°lise
"""

import sys
import os
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta
from pathlib import Path
from dotenv import load_dotenv
import logging

# Configurar logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("DIVAP_Scraper")

# Configurar paths
sys.path.append(str(Path(__file__).parent.parent))

# Carregar vari√°veis de ambiente
env_path = Path(__file__).parents[3] / 'config' / '.env'
load_dotenv(dotenv_path=env_path)

# Configura√ß√µes do banco
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}

class DivapScraper:
    """Scraper para buscar sinais DIVAP do banco de dados"""
    
    def __init__(self, db_config):
        self.db_config = db_config
        self.conn = None
        self.cursor = None
        
    def connect_db(self):
        """Conecta ao banco de dados"""
        try:
            self.conn = psycopg2.connect(**self.db_config)
            self.cursor = self.conn.cursor(cursor_factory=RealDictCursor)
            logger.info("Conectado ao banco de dados")
        except Exception as e:
            logger.error(f"Erro ao conectar ao banco: {e}")
            raise
    
    def close_connections(self):
        """Fecha conex√µes"""
        if self.cursor:
            self.cursor.close()
        if self.conn:
            self.conn.close()
        logger.info("Conex√µes fechadas")
    
    def get_available_channels(self):
        """Obt√©m canais dispon√≠veis com sinais"""
        try:
            query = """
                SELECT 
                    chat_id_orig_sinal,
                    COUNT(*) as total_signals,
                    MIN(created_at) as first_signal,
                    MAX(created_at) as last_signal
                FROM webhook_signals 
                WHERE chat_id_orig_sinal IS NOT NULL
                GROUP BY chat_id_orig_sinal
                ORDER BY total_signals DESC
            """
            
            self.cursor.execute(query)
            channels = self.cursor.fetchall()
            
            logger.info(f"Encontrados {len(channels)} canais com sinais")
            return channels
            
        except Exception as e:
            logger.error(f"Erro ao obter canais: {e}")
            return []
    
    def get_signals_by_channel(self, channel_id, start_date=None, end_date=None, limit=None):
        """Obt√©m sinais de um canal espec√≠fico"""
        try:
            query = """
                SELECT ws.*, sa.divap_confirmed, sa.analysis_type
                FROM webhook_signals ws
                LEFT JOIN signals_analysis sa ON ws.id = sa.signal_id
                WHERE ws.chat_id_orig_sinal = %s
            """
            
            params = [channel_id]
            
            if start_date:
                query += " AND ws.created_at >= %s"
                params.append(start_date)
            
            if end_date:
                query += " AND ws.created_at <= %s"
                params.append(end_date)
            
            query += " ORDER BY ws.created_at DESC"
            
            if limit:
                query += " LIMIT %s"
                params.append(limit)
            
            self.cursor.execute(query, params)
            signals = self.cursor.fetchall()
            
            logger.info(f"Obtidos {len(signals)} sinais do canal {channel_id}")
            return signals
            
        except Exception as e:
            logger.error(f"Erro ao obter sinais: {e}")
            return []
    
    def get_signals_by_date_range(self, start_date, end_date, channel_id=None):
        """Obt√©m sinais por per√≠odo de data"""
        try:
            query = """
                SELECT ws.*, sa.divap_confirmed, sa.analysis_type
                FROM webhook_signals ws
                LEFT JOIN signals_analysis sa ON ws.id = sa.signal_id
                WHERE ws.created_at >= %s AND ws.created_at <= %s
            """
            
            params = [start_date, end_date]
            
            if channel_id:
                query += " AND ws.chat_id_orig_sinal = %s"
                params.append(channel_id)
            
            query += " ORDER BY ws.created_at DESC"
            
            self.cursor.execute(query, params)
            signals = self.cursor.fetchall()
            
            logger.info(f"Obtidos {len(signals)} sinais do per√≠odo")
            return signals
            
        except Exception as e:
            logger.error(f"Erro ao obter sinais: {e}")
            return []
    
    def print_channels_summary(self):
        """Imprime resumo dos canais dispon√≠veis"""
        channels = self.get_available_channels()
        
        if not channels:
            print("‚ùå Nenhum canal com sinais encontrado")
            return
        
        print("\n" + "="*80)
        print("üìä RESUMO DOS CANAIS DISPON√çVEIS")
        print("="*80)
        
        for channel in channels:
            first_signal = channel['first_signal'].strftime('%d-%m-%Y %H:%M:%S')
            last_signal = channel['last_signal'].strftime('%d-%m-%Y %H:%M:%S')
            
            print(f"\nüîó Canal: {channel['chat_id_orig_sinal']}")
            print(f"   üìä Total de sinais: {channel['total_signals']}")
            print(f"   üìÖ Primeiro sinal: {first_signal}")
            print(f"   üìÖ √öltimo sinal: {last_signal}")
    
    def print_signals_summary(self, signals, title="SINAIS"):
        """Imprime resumo dos sinais"""
        if not signals:
            print("‚ùå Nenhum sinal encontrado")
            return
        
        print(f"\n" + "="*80)
        print(f"üìã {title}")
        print("="*80)
        
        for i, signal in enumerate(signals[:10]):  # Mostrar apenas os primeiros 10
            signal_date = signal.get('created_at')
            if isinstance(signal_date, str):
                signal_datetime = datetime.fromisoformat(signal_date.replace('Z', '+00:00'))
            else:
                signal_datetime = signal_date
            
            formatted_date = signal_datetime.strftime('%d-%m-%Y %H:%M:%S')
            divap_status = "‚úÖ DIVAP" if signal.get('divap_confirmed') else "‚ùå N√£o DIVAP"
            
            print(f"{i+1:2d}. {signal.get('symbol'):10} {signal.get('side'):6} - {formatted_date} - {divap_status}")
        
        if len(signals) > 10:
            print(f"... e mais {len(signals) - 10} sinais")

def main():
    """Fun√ß√£o principal"""
    print("="*80)
    print("üîç DIVAP SCRAPER - AN√ÅLISE DE SINAIS DO BANCO")
    print("="*80)
    
    scraper = DivapScraper(DB_CONFIG)
    
    try:
        scraper.connect_db()
        
        # Mostrar resumo dos canais
        scraper.print_channels_summary()
        
        # Obter sinais dos √∫ltimos 7 dias
        print("\nüîç Buscando sinais dos √∫ltimos 7 dias...")
        end_date = datetime.now()
        start_date = end_date - timedelta(days=7)
        
        signals = scraper.get_signals_by_date_range(start_date, end_date)
        scraper.print_signals_summary(signals, "SINAIS DOS √öLTIMOS 7 DIAS")
        
        # Buscar sinais do canal espec√≠fico se solicitado
        target_channel = -1002444455075
        print(f"\nüîç Buscando sinais do canal espec√≠fico {target_channel}...")
        
        specific_signals = scraper.get_signals_by_channel(target_channel, limit=10)
        scraper.print_signals_summary(specific_signals, f"SINAIS DO CANAL {target_channel}")
        
    except Exception as e:
        logger.error(f"Erro no scraper: {e}")
        import traceback
        traceback.print_exc()
    
    finally:
        scraper.close_connections()

if __name__ == "__main__":
    main()
