#!/usr/bin/env python3
"""
Script de Teste para Valida√ß√£o de Booleanos PostgreSQL
Testa se todas as corre√ß√µes est√£o funcionando corretamente
"""

import os
import sys
import psycopg2
from pathlib import Path
import traceback

# Adicionar diret√≥rio pai ao path
sys.path.append(str(Path(__file__).parent))

def test_boolean_queries():
    """Testa queries booleanas espec√≠ficas"""
    print("üß™ TESTANDO QUERIES BOOLEANAS")
    print("="*50)
    
    # Importar configura√ß√µes
    try:
        from utils.senhas import get_db_config
        DB_CONFIG = get_db_config()
    except ImportError:
        # Configura√ß√£o alternativa
        from dotenv import load_dotenv
        import pathlib
        
        env_path = pathlib.Path(__file__).parents[2] / 'config' / '.env'
        load_dotenv(dotenv_path=env_path)
        
        DB_CONFIG = {
            'host': os.getenv('DB_HOST'),
            'port': int(os.getenv('DB_PORT', 5432)),
            'user': os.getenv('DB_USER'),
            'password': os.getenv('DB_PASSWORD'),
            'database': os.getenv('DB_NAME')
        }
    
    try:
        # Conectar ao banco
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor()
        
        # Teste 1: Query com par√¢metro booleano
        print("üìù Teste 1: Query com par√¢metro booleano")
        cursor.execute("SELECT COUNT(*) FROM contas WHERE ativa = %s", (True,))
        result = cursor.fetchone()
        print(f"   ‚úÖ Contas ativas encontradas: {result[0]}")
        
        # Teste 2: INSERT com valores booleanos
        print("üìù Teste 2: INSERT com valores booleanos (simulado)")
        test_query = """
            SELECT %s as test_bool1, %s as test_bool2, %s as test_bool3
        """
        cursor.execute(test_query, (True, False, None))
        result = cursor.fetchone()
        print(f"   ‚úÖ Valores booleanos: {result}")
        
        # Teste 3: Verificar se tabela signals_analysis existe
        print("üìù Teste 3: Verificar estrutura da tabela signals_analysis")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'signals_analysis' 
            AND column_name LIKE '%_divap%' OR column_name LIKE '%confirmed%'
        """)
        columns = cursor.fetchall()
        if columns:
            print("   ‚úÖ Colunas booleanas encontradas:")
            for col in columns:
                print(f"      - {col[0]}: {col[1]} (nullable: {col[2]})")
        else:
            print("   ‚ö†Ô∏è Tabela signals_analysis n√£o encontrada ou sem colunas booleanas")
        
        # Teste 4: Verificar se tabela webhook_signals existe
        print("üìù Teste 4: Verificar estrutura da tabela webhook_signals")
        cursor.execute("""
            SELECT column_name, data_type, is_nullable 
            FROM information_schema.columns 
            WHERE table_name = 'webhook_signals' 
            AND (column_name LIKE '%confirmado%' OR column_name LIKE '%cancelado%')
        """)
        columns = cursor.fetchall()
        if columns:
            print("   ‚úÖ Colunas booleanas encontradas:")
            for col in columns:
                print(f"      - {col[0]}: {col[1]} (nullable: {col[2]})")
        else:
            print("   ‚ö†Ô∏è Tabela webhook_signals n√£o encontrada ou sem colunas booleanas")
        
        cursor.close()
        conn.close()
        
        print("\n‚úÖ TODOS OS TESTES PASSARAM!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERRO NO TESTE: {e}")
        traceback.print_exc()
        return False

def validate_imports():
    """Valida se os imports est√£o funcionando"""
    print("\nüîç VALIDANDO IMPORTS")
    print("="*50)
    
    try:
        # Testar import do validador
        from utils.boolean_validator import validate_webhook_signals_data, normalize_boolean
        print("‚úÖ Import do validador de booleanos: OK")
        
        # Testar as fun√ß√µes
        test_data = {'divap_confirmado': 'true', 'cancelado_checker': 0}
        validated = validate_webhook_signals_data(test_data)
        print(f"‚úÖ Valida√ß√£o de dados: {validated}")
        
        # Testar normaliza√ß√£o
        normalized = normalize_boolean('true')
        print(f"‚úÖ Normaliza√ß√£o: 'true' -> {normalized}")
        
    except ImportError as e:
        print(f"‚ö†Ô∏è Import do validador falhou: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Erro na valida√ß√£o: {e}")
        return False
    
    return True

def main():
    print("üöÄ TESTE DE VALIDA√á√ÉO DE BOOLEANOS POSTGRESQL")
    print("="*60)
    
    # Teste 1: Validar imports
    imports_ok = validate_imports()
    
    # Teste 2: Validar queries booleanas
    queries_ok = test_boolean_queries()
    
    # Resultado final
    print("\n" + "="*60)
    if imports_ok and queries_ok:
        print("üéâ TODOS OS TESTES PASSARAM!")
        print("   ‚úÖ Imports funcionando corretamente")
        print("   ‚úÖ Queries booleanas funcionando corretamente")
        print("   ‚úÖ Sistema pronto para uso com PostgreSQL")
    else:
        print("‚ùå ALGUNS TESTES FALHARAM!")
        if not imports_ok:
            print("   ‚ùå Problema com imports")
        if not queries_ok:
            print("   ‚ùå Problema com queries booleanas")
    
    print("="*60)

if __name__ == "__main__":
    main()
