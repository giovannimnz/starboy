#!/usr/bin/env python3
"""
Script de teste final para validar que o erro KeyError: 0 foi corrigido
"""

import os
import sys
import pathlib
import psycopg2
from psycopg2.extras import RealDictCursor
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente do arquivo correto
env_path = pathlib.Path(__file__).parents[2] / 'config' / '.env'

# Limpar vari√°veis existentes
for key in ['DB_HOST', 'DB_PORT', 'DB_USER', 'DB_PASSWORD', 'DB_NAME']:
    if key in os.environ:
        del os.environ[key]

load_dotenv(dotenv_path=env_path, override=True)

print('üîß TESTE FINAL - VALIDA√á√ÉO DA CORRE√á√ÉO KeyError: 0')
print('=' * 70)

# Configura√ß√µes do banco
DB_CONFIG = {
    'host': os.getenv('DB_HOST'),
    'port': int(os.getenv('DB_PORT', 5432)),
    'user': os.getenv('DB_USER'),
    'password': os.getenv('DB_PASSWORD'),
    'database': os.getenv('DB_NAME')
}

print(f'üìä Configura√ß√µes do banco:')
print(f'   Host: {DB_CONFIG["host"]}')
print(f'   Port: {DB_CONFIG["port"]}')
print(f'   Database: {DB_CONFIG["database"]}')

def test_returning_id_syntax():
    """Teste espec√≠fico para verificar se result['id'] funciona"""
    try:
        print('\nüß™ TESTE: Inser√ß√£o com RETURNING id')
        conn = psycopg2.connect(**DB_CONFIG)
        cursor = conn.cursor(cursor_factory=RealDictCursor)
        
        # Remover s√≠mbolo de teste se existir
        cursor.execute("DELETE FROM exchange_symbols WHERE symbol = 'TEST_KEYERROR_FIX'")
        
        # Testar inser√ß√£o com RETURNING id
        sql = """
        INSERT INTO exchange_symbols (exchange, symbol, status, pair, contract_type, base_asset, quote_asset, margin_asset,
                                    price_precision, quantity_precision, base_asset_precision, quote_precision)
        VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s) RETURNING id
        """
        
        values = ('binance', 'TEST_KEYERROR_FIX', 'TESTING', 'TEST', 'PERPETUAL', 
                 'TEST', 'USDT', 'USDT', 2, 3, 8, 8)
        
        cursor.execute(sql, values)
        result = cursor.fetchone()
        
        # ESTE √â O TESTE CR√çTICO - DEVE SER result['id'] E N√ÉO result[0]
        symbol_id = result['id'] if result else None
        
        print(f'   ‚úÖ result["id"] funciona: {symbol_id}')
        print(f'   ‚úÖ Tipo do resultado: {type(result)}')
        
        # Limpar teste
        cursor.execute("DELETE FROM exchange_symbols WHERE symbol = 'TEST_KEYERROR_FIX'")
        conn.commit()
        cursor.close()
        conn.close()
        
        return True
        
    except KeyError as e:
        print(f'   ‚ùå ERRO KeyError: {e}')
        return False
    except Exception as e:
        print(f'   ‚ùå ERRO: {e}')
        return False

def test_exchange_info_updater():
    """Teste da fun√ß√£o completa do exchange_info_updater"""
    try:
        print('\nüöÄ TESTE: Execu√ß√£o do exchange_info_updater')
        
        # Importar e executar
        sys.path.append(str(pathlib.Path(__file__).parent / 'utils'))
        from backend.indicators.utils.exchange_info_updater import update_exchange_info_database
        
        # Executar com dados limitados para teste
        result = update_exchange_info_database('binance')
        print(f'   ‚úÖ Execu√ß√£o conclu√≠da: {result}')
        return True
        
    except Exception as e:
        print(f'   ‚ùå ERRO na execu√ß√£o: {e}')
        import traceback
        traceback.print_exc()
        return False

def main():
    # Teste 1: Verificar sintaxe RETURNING id
    test1_ok = test_returning_id_syntax()
    
    # Teste 2: Executar fun√ß√£o completa
    test2_ok = test_exchange_info_updater()
    
    # Resultado final
    print('\n' + '=' * 70)
    print('üéØ RESULTADO FINAL DOS TESTES:')
    print('=' * 70)
    print(f'‚úÖ Sintaxe RETURNING id: {"OK" if test1_ok else "FALHOU"}')
    print(f'‚úÖ Execu√ß√£o completa: {"OK" if test2_ok else "FALHOU"}')
    
    if test1_ok and test2_ok:
        print('\nüéâ TODOS OS TESTES PASSARAM!')
        print('‚úÖ O erro KeyError: 0 foi corrigido com sucesso!')
    else:
        print('\n‚ùå ALGUNS TESTES FALHARAM!')
        print('‚ö†Ô∏è O erro KeyError: 0 ainda pode estar presente')

if __name__ == '__main__':
    main()
