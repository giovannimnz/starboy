#!/usr/bin/env python3
"""
Testes simples de opera√ß√µes de banco de dados PostgreSQL
Vers√£o simplificada sem async, apenas psycopg2 s√≠ncrono
"""

import os
import sys
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime, timedelta
from decimal import Decimal
from dotenv import load_dotenv

# Carregar vari√°veis de ambiente
load_dotenv(os.path.join(os.path.dirname(__file__), '..', '..', 'config', '.env'))

# Configura√ß√£o do banco PostgreSQL
DB_CONFIG = {
    'host': os.getenv('DB_HOST', 'localhost'),
    'database': os.getenv('DB_NAME', 'starboy_postgres'),
    'user': os.getenv('DB_USER', 'postgres'),
    'password': os.getenv('DB_PASSWORD', 'password'),
    'port': int(os.getenv('DB_PORT', 5432))
}

class TestDatabaseOperationsFixed:
    """Classe para testes simples de opera√ß√µes de banco de dados"""
    
    def __init__(self):
        self.conn = None
    
    def setup(self):
        """Setup para os testes"""
        try:
            self.conn = psycopg2.connect(**DB_CONFIG)
            self.conn.autocommit = True
            print("‚úÖ Conex√£o estabelecida com sucesso")
        except Exception as e:
            print(f"‚ùå Erro ao conectar: {e}")
            raise
    
    def teardown(self):
        """Cleanup ap√≥s os testes"""
        if self.conn and not self.conn.closed:
            self.conn.close()
            print("‚úÖ Conex√£o fechada")
    
    def cleanup_test_data(self):
        """Remove dados de teste"""
        if not self.conn or self.conn.closed:
            return
            
        cursor = self.conn.cursor()
        try:
            # Ordem de limpeza respeitando foreign keys
            tables = [
                'logs', 'signals_backtest', 'signals_msg', 'divap_analysis',
                'webhook_signals', 'monitoramento', 'ordens_fechadas', 
                'posicoes_fechadas', 'ordens', 'posicoes', 'exchange_filters',
                'exchange_symbols', 'exchange_leverage_brackets', 'contas',
                'configuracoes', 'corretoras', 'users'
            ]
            
            for table in tables:
                try:
                    cursor.execute(f"DELETE FROM {table} WHERE id >= 9000")
                except Exception as e:
                    pass  # Tabela pode n√£o existir ou n√£o ter campo id
            
        finally:
            cursor.close()

    def test_users_crud(self):
        """Testa opera√ß√µes CRUD na tabela users"""
        print("\nüß™ TESTE: OPERA√á√ïES CRUD - USERS")
        cursor = self.conn.cursor(cursor_factory=RealDictCursor)
        
        try:
            # CREATE - Inserir usu√°rio
            user_data = {
                'id': 9001,
                'nome': 'Jo√£o Silva Test',
                'email': 'joao.test@example.com',
                'senha': 'senha_hash_123',
                'ativa': True
            }
            
            cursor.execute("""
                INSERT INTO users (id, nome, email, senha, ativa)
                VALUES (%(id)s, %(nome)s, %(email)s, %(senha)s, %(ativa)s)
            """, user_data)
            print("  ‚úÖ INSERT realizado")
            
            # READ - Buscar usu√°rio
            cursor.execute("SELECT * FROM users WHERE id = %s", (user_data['id'],))
            user = cursor.fetchone()
            assert user is not None
            assert user['nome'] == user_data['nome']
            assert user['email'] == user_data['email']
            assert user['ativa'] == user_data['ativa']
            print(f"  ‚úÖ SELECT realizado: {user['nome']}")
            
            # UPDATE - Atualizar usu√°rio
            new_nome = 'Jo√£o Silva Santos'
            cursor.execute("""
                UPDATE users 
                SET nome = %s
                WHERE id = %s
            """, (new_nome, user_data['id']))
            
            cursor.execute("SELECT * FROM users WHERE id = %s", (user_data['id'],))
            updated_user = cursor.fetchone()
            assert updated_user['nome'] == new_nome
            print(f"  ‚úÖ UPDATE realizado: {updated_user['nome']}")
            
            # DELETE - Remover usu√°rio
            cursor.execute("DELETE FROM users WHERE id = %s", (user_data['id'],))
            cursor.execute("SELECT * FROM users WHERE id = %s", (user_data['id'],))
            deleted_user = cursor.fetchone()
            assert deleted_user is None
            print("  ‚úÖ DELETE realizado")
            
        finally:
            cursor.close()

    def test_corretoras_crud(self):
        """Testa opera√ß√µes CRUD na tabela corretoras"""
        print("\nüß™ TESTE: OPERA√á√ïES CRUD - CORRETORAS")
        cursor = self.conn.cursor(cursor_factory=RealDictCursor)
        
        try:
            # CREATE
            corretora_data = {
                'id': 9002,
                'corretora': 'binance_test',
                'ambiente': 'testnet',
                'ativa': True
            }
            
            cursor.execute("""
                INSERT INTO corretoras (id, corretora, ambiente, ativa)
                VALUES (%(id)s, %(corretora)s, %(ambiente)s, %(ativa)s)
            """, corretora_data)
            print("  ‚úÖ INSERT realizado")
            
            # READ
            cursor.execute("SELECT * FROM corretoras WHERE id = %s", (corretora_data['id'],))
            corretora = cursor.fetchone()
            assert corretora['corretora'] == corretora_data['corretora']
            assert corretora['ambiente'] == corretora_data['ambiente']
            print(f"  ‚úÖ SELECT realizado: {corretora['corretora']}")
            
            # UPDATE
            new_ambiente = 'production'
            cursor.execute("""
                UPDATE corretoras 
                SET ambiente = %s
                WHERE id = %s
            """, (new_ambiente, corretora_data['id']))
            
            cursor.execute("SELECT * FROM corretoras WHERE id = %s", (corretora_data['id'],))
            updated_corretora = cursor.fetchone()
            assert updated_corretora['ambiente'] == new_ambiente
            print(f"  ‚úÖ UPDATE realizado: {updated_corretora['ambiente']}")
            
            # DELETE
            cursor.execute("DELETE FROM corretoras WHERE id = %s", (corretora_data['id'],))
            cursor.execute("SELECT * FROM corretoras WHERE id = %s", (corretora_data['id'],))
            deleted_corretora = cursor.fetchone()
            assert deleted_corretora is None
            print("  ‚úÖ DELETE realizado")
            
        finally:
            cursor.close()

    def test_signals_msg_crud(self):
        """Testa opera√ß√µes CRUD na tabela signals_msg"""
        print("\nüß™ TESTE: OPERA√á√ïES CRUD - SIGNALS_MSG")
        cursor = self.conn.cursor(cursor_factory=RealDictCursor)
        
        try:
            # CREATE
            signal_data = {
                'id': 9003,
                'message_id': 123456,
                'chat_id': -1001234567890,
                'text': 'Test signal message',
                'symbol': 'BTCUSDT',
                'created_at': datetime.now(),
                'message_source': 'test_source'
            }
            
            cursor.execute("""
                INSERT INTO signals_msg (id, message_id, chat_id, text, symbol, created_at, message_source)
                VALUES (%(id)s, %(message_id)s, %(chat_id)s, %(text)s, %(symbol)s, %(created_at)s, %(message_source)s)
            """, signal_data)
            print("  ‚úÖ INSERT realizado")
            
            # READ
            cursor.execute("SELECT * FROM signals_msg WHERE id = %s", (signal_data['id'],))
            signal = cursor.fetchone()
            assert signal['symbol'] == signal_data['symbol']
            assert signal['text'] == signal_data['text']
            print(f"  ‚úÖ SELECT realizado: {signal['symbol']}")
            
            # UPDATE
            new_symbol = 'ETHUSDT'
            cursor.execute("""
                UPDATE signals_msg 
                SET symbol = %s
                WHERE id = %s
            """, (new_symbol, signal_data['id']))
            
            cursor.execute("SELECT * FROM signals_msg WHERE id = %s", (signal_data['id'],))
            updated_signal = cursor.fetchone()
            assert updated_signal['symbol'] == new_symbol
            print(f"  ‚úÖ UPDATE realizado: {updated_signal['symbol']}")
            
            # DELETE
            cursor.execute("DELETE FROM signals_msg WHERE id = %s", (signal_data['id'],))
            cursor.execute("SELECT * FROM signals_msg WHERE id = %s", (signal_data['id'],))
            deleted_signal = cursor.fetchone()
            assert deleted_signal is None
            print("  ‚úÖ DELETE realizado")
            
        finally:
            cursor.close()

    def run_all_tests(self):
        """Executa todos os testes"""
        print("üöÄ INICIANDO TESTES DE OPERA√á√ïES DE BANCO - VERS√ÉO CORRIGIDA")
        print("=" * 70)
        
        try:
            self.setup()
            self.cleanup_test_data()
            
            # Executar testes
            self.test_users_crud()
            self.test_corretoras_crud()
            self.test_signals_msg_crud()
            
            print("\n" + "=" * 70)
            print("üéâ TODOS OS TESTES PASSARAM COM SUCESSO!")
            return True
            
        except Exception as e:
            print(f"\n‚ùå ERRO NOS TESTES: {e}")
            import traceback
            traceback.print_exc()
            return False
            
        finally:
            self.teardown()

if __name__ == "__main__":
    test_instance = TestDatabaseOperationsFixed()
    success = test_instance.run_all_tests()
    sys.exit(0 if success else 1)
