#!/bin/bash

# =========================================================================
# TESTE DE SINCRONIZA√á√ÉO DE TEMPO - STARBOY TRADING SYSTEM
# =========================================================================
# Script para testar as melhorias de sincroniza√ß√£o de tempo com a Binance
# Data: Janeiro 2025
# =========================================================================

echo "========================================================================="
echo "üïê TESTE DE SINCRONIZA√á√ÉO DE TEMPO - STARBOY TRADING SYSTEM"
echo "========================================================================="
echo "üìÖ Iniciado em: $(date)"
echo ""

# Verificar se Node.js est√° dispon√≠vel
if ! command -v node &> /dev/null; then
    echo "‚ùå Node.js n√£o encontrado. Instale Node.js para continuar."
    exit 1
fi

# Verificar se o arquivo de teste existe
TEST_FILE="test_time_sync.js"

# Criar arquivo de teste tempor√°rio
cat > "$TEST_FILE" << 'EOF'
const path = require('path');

// Configurar caminho para .env
require('dotenv').config({ path: path.resolve(__dirname, 'config/.env') });

// Importar m√≥dulos
const { checkServerTime, monitorTimeSync, getCorrectedTimestamp, getOptimizedRecvWindow } = require('./backend/exchanges/binance/api/rest');

async function testTimeSync() {
    console.log('üß™ INICIANDO TESTE DE SINCRONIZA√á√ÉO DE TEMPO\n');
    
    const accountId = 1; // ID da conta de teste
    
    try {
        console.log('üìä 1/4 - Testando sincroniza√ß√£o b√°sica...');
        const basicSync = await checkServerTime(accountId);
        console.log(`   Resultado: ${basicSync ? '‚úÖ SUCESSO' : '‚ùå FALHA'}\n`);
        
        console.log('üìä 2/4 - Testando monitoramento cont√≠nuo...');
        const monitorResult = await monitorTimeSync(accountId);
        console.log(`   Resultado: ${monitorResult.success ? '‚úÖ SUCESSO' : '‚ùå FALHA'}`);
        console.log(`   Qualidade: ${monitorResult.quality}`);
        console.log(`   RECV_WINDOW: ${monitorResult.recvWindow}ms`);
        console.log(`   Offset: ${monitorResult.timeOffset}ms\n`);
        
        console.log('üìä 3/4 - Testando timestamp corrigido...');
        const correctedTimestamp = getCorrectedTimestamp(accountId);
        const normalTimestamp = Date.now();
        const diff = Math.abs(correctedTimestamp - normalTimestamp);
        console.log(`   Timestamp normal: ${normalTimestamp}`);
        console.log(`   Timestamp corrigido: ${correctedTimestamp}`);
        console.log(`   Diferen√ßa: ${diff}ms`);
        console.log(`   Resultado: ${diff <= 5000 ? '‚úÖ ACEIT√ÅVEL' : '‚ö†Ô∏è ALTA DIFEREN√áA'}\n`);
        
        console.log('üìä 4/4 - Testando RECV_WINDOW otimizado...');
        const optimizedRecvWindow = getOptimizedRecvWindow(accountId);
        console.log(`   RECV_WINDOW otimizado: ${optimizedRecvWindow}ms`);
        console.log(`   Resultado: ${optimizedRecvWindow >= 5000 && optimizedRecvWindow <= 60000 ? '‚úÖ V√ÅLIDO' : '‚ö†Ô∏è FORA DO RANGE'}\n`);
        
        console.log('üéâ TESTE CONCLU√çDO COM SUCESSO!');
        console.log('‚úÖ Todas as fun√ß√µes de sincroniza√ß√£o est√£o operacionais.');
        
    } catch (error) {
        console.error('‚ùå ERRO DURANTE O TESTE:', error.message);
        console.error('Stack trace:', error.stack);
        process.exit(1);
    }
}

// Executar teste
testTimeSync()
    .then(() => {
        console.log('\nüìã RESUMO:');
        console.log('- Sincroniza√ß√£o de tempo: Implementada');
        console.log('- Corre√ß√£o autom√°tica: Ativa');
        console.log('- RECV_WINDOW din√¢mico: Configurado');
        console.log('- Monitoramento cont√≠nuo: Agendado');
        console.log('\nüöÄ Sistema pronto para produ√ß√£o!');
        process.exit(0);
    })
    .catch(error => {
        console.error('\nüí• FALHA CR√çTICA NO TESTE:', error.message);
        process.exit(1);
    });
EOF

echo "üìã Executando teste de sincroniza√ß√£o de tempo..."
echo ""

# Executar o teste
if node "$TEST_FILE"; then
    echo ""
    echo "‚úÖ TESTE CONCLU√çDO COM SUCESSO!"
    echo ""
    echo "üìä BENEF√çCIOS IMPLEMENTADOS:"
    echo "   - Sincroniza√ß√£o multi-amostra (5 amostras para precis√£o)"
    echo "   - Compensa√ß√£o autom√°tica de lat√™ncia de rede"
    echo "   - RECV_WINDOW din√¢mico baseado na qualidade"
    echo "   - Monitoramento cont√≠nuo a cada 5 minutos"
    echo "   - Timestamp corrigido com offset autom√°tico"
    echo "   - Configura√ß√£o de seguran√ßa em caso de erro"
    echo ""
    echo "‚ö° MELHORIAS DE PERFORMANCE:"
    echo "   - Redu√ß√£o de erros 'Timestamp for this request is outside of the recvWindow'"
    echo "   - Adapta√ß√£o autom√°tica √† qualidade da conex√£o"
    echo "   - Precis√£o de nanosegundos para medi√ß√£o de lat√™ncia"
    echo "   - Fallback inteligente para cen√°rios de erro"
    echo ""
    echo "üéØ PR√ìXIMOS PASSOS:"
    echo "   1. Testar em produ√ß√£o com conta real"
    echo "   2. Monitorar logs por 24-48h"
    echo "   3. Ajustar configura√ß√µes se necess√°rio"
    echo "   4. Validar redu√ß√£o de erros de timestamp"
else
    echo ""
    echo "‚ùå FALHA NO TESTE!"
    echo ""
    echo "üîç POSS√çVEIS CAUSAS:"
    echo "   - Problemas de conectividade com a Binance"
    echo "   - Configura√ß√µes incorretas no .env"
    echo "   - Depend√™ncias n√£o instaladas"
    echo "   - Firewall bloqueando conex√µes"
    echo ""
    echo "üõ†Ô∏è SOLU√á√ïES:"
    echo "   - Verificar conex√£o com internet"
    echo "   - Validar credenciais da API"
    echo "   - Executar 'npm install' se necess√°rio"
    echo "   - Verificar configura√ß√µes de proxy/firewall"
fi

# Limpar arquivo tempor√°rio
rm -f "$TEST_FILE"

echo ""
echo "========================================================================="
echo "üìÖ Finalizado em: $(date)"
echo "========================================================================="
