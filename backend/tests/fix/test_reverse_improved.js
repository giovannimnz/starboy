const { getDatabaseInstance, insertPosition, insertNewOrder, formatDateForPostgreSQL } = require('../../core/database/conexao');
const websockets = require('../../exchanges/binance/api/websocket');
const rest = require('../../exchanges/binance/api/rest');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../../config/.env') });
const { getOrderStatus, newMarketOrder, newStopOrder, newLimitMakerOrder, getPrecision, roundPriceToTickSize, validateQuantity, adjustQuantityToRequirements, getAllOpenPositions, getFuturesAccountBalanceDetails } = require('../../exchanges/binance/api/rest');
const { sendTelegramMessage, formatEntryMessage, formatErrorMessage } = require('../../exchanges/binance/services/telegramHelper');

/**
 * ‚úÖ NOVA FUN√á√ÉO: Executa o reverse com todas as melhorias solicitadas
 * - Cria√ß√£o obrigat√≥ria da posi√ß√£o no banco antes de qualquer ordem
 * - Atualiza√ß√£o do sinal (webhook_signals) com o id da posi√ß√£o
 * - Sistema Pub/Sub dedicado para esta execu√ß√£o
 * - Insert de cada ordem (entrada, SL, TP) no banco imediatamente ap√≥s envio para a corretora
 * - Delay de 3 segundos entre cada insert para evitar deadlock
 * - Timeout de 45 segundos para confirma√ß√£o via webhook
 * - Ap√≥s timeout, polling REST para status da ordem at√© preenchimento
 * - Atualiza√ß√£o da posi√ß√£o e ordens no banco com dados reais ap√≥s preenchimento
 * - N√£o depende exclusivamente do webhook para confirma√ß√£o de ordens
 */
async function executeReverse(signal, currentPrice, accountId) {
  console.log(`[REVERSE_IMPROVED] üöÄ Executando entrada para sinal ${signal.id}: ${signal.symbol} ${signal.side} a ${signal.entry_price} (conta ${accountId})`);

  // ‚úÖ CONSTANTES
  const WEBHOOK_TIMEOUT_MS = 45000; // 45 segundos para confirma√ß√£o webhook
  const DELAY_BETWEEN_INSERTS_MS = 3000; // 3 segundos entre inserts
  const REST_POLLING_INTERVAL_MS = 2000; // 2 segundos entre consultas REST
  const MAX_REST_POLLING_ATTEMPTS = 30; // M√°ximo 1 minuto de polling
  
  // ‚úÖ VARI√ÅVEIS DE CONTROLE
  let connection = null;
  let positionId = null;
  let entryOrderId = null;
  let isWebhookConfirmed = false;
  let totalFilledSize = 0;
  let averageEntryPrice = 0;
  let entryOrderStatus = null;
  
  // ‚úÖ NOVO: ID √∫nico para o listener tempor√°rio desta execu√ß√£o
  const temporaryListenerId = `reverse-entry-${signal.id}-${Date.now()}`;
  
  // ‚úÖ HANDLER PARA WEBHOOK DEDICADO
  const orderUpdateHandler = (orderMsg) => {
      if (!orderMsg || !orderMsg.o) return;
      
      const order = orderMsg.o;
      const orderId = String(order.i);
      const orderStatus = order.X;
      const executedQty = parseFloat(order.z || '0');
      const avgPrice = parseFloat(order.ap || '0');
      
      // Verificar se √© nossa ordem de entrada
      if (orderId === entryOrderId) {
          console.log(`[REVERSE_IMPROVED] üì® Webhook recebido para ordem de entrada ${orderId}: status=${orderStatus}, filled=${executedQty}`);
          
          entryOrderStatus = orderStatus;
          totalFilledSize = executedQty;
          averageEntryPrice = avgPrice;
          
          if (orderStatus === 'FILLED' || orderStatus === 'PARTIALLY_FILLED') {
              isWebhookConfirmed = true;
          }
      }
  };

  try {
      // ‚úÖ VALIDA√á√ïES INICIAIS
      if (!accountId || typeof accountId !== 'number') {
          throw new Error(`AccountId inv√°lido: ${accountId} (tipo: ${typeof accountId})`);
      }

      if (!signal || !signal.id || !signal.symbol) {
          throw new Error(`Signal inv√°lido: ${JSON.stringify(signal)}`);
      }

      const numericAccountId = parseInt(accountId) || accountId;

      // ‚úÖ OBTER CONEX√ÉO DO BANCO
      const db = await getDatabaseInstance(accountId);
      if (!db) {
          throw new Error(`N√£o foi poss√≠vel obter conex√£o com banco para conta ${accountId}`);
      }
      connection = await db.getConnection();
      await connection.beginTransaction();

      // ‚úÖ VERIFICAR SE J√Å EXISTE POSI√á√ÉO ABERTA
      const existingPositionsOnExchange = await getAllOpenPositions(numericAccountId);
      const positionAlreadyExists = existingPositionsOnExchange.some(p =>
          p.simbolo === signal.symbol && Math.abs(p.quantidade) > 0
      );

      if (positionAlreadyExists) {
          throw new Error(`Posi√ß√£o j√° existe para ${signal.symbol}`);
      }

      // ‚úÖ OBTER PRECIS√ÉO E CALCULAR TAMANHOS
      const precisionInfo = await getPrecision(signal.symbol, numericAccountId);
      const quantityPrecision = precisionInfo.quantityPrecision;
      const pricePrecision = precisionInfo.pricePrecision;
      const stepSize = precisionInfo.stepSize;

      const availableBalance = await getAvailableBalance(numericAccountId);
      const capitalPercentage = parseFloat(signal.capital_pct) / 100;
      const leverage = parseInt(signal.leverage);

      const entryPrice = parseFloat(signal.entry_price);
      let totalEntrySize = calculateOrderSize(
          availableBalance, capitalPercentage, entryPrice, leverage, stepSize, quantityPrecision
      );

      if (totalEntrySize <= 0 || isNaN(totalEntrySize)) {
          throw new Error(`Tamanho da ordem inv√°lido: ${totalEntrySize}`);
      }

      console.log(`[REVERSE_IMPROVED] Tamanho calculado: ${totalEntrySize.toFixed(quantityPrecision)} ${signal.symbol}`);

      // ‚úÖ VALIDAR QUANTIDADE
      const entryValidation = await validateQuantity(signal.symbol, totalEntrySize, entryPrice, numericAccountId, 'MARKET');
      if (!entryValidation.isValid) {
          const adjustment = await adjustQuantityToRequirements(signal.symbol, totalEntrySize, entryPrice, numericAccountId, 'MARKET');
          if (adjustment.success) {
              totalEntrySize = adjustment.adjustedQuantity;
              console.log(`[REVERSE_IMPROVED] Quantidade ajustada: ${totalEntrySize}`);
          } else {
              throw new Error(`Quantidade inv√°lida: ${entryValidation.reason}`);
          }
      }

      const binanceSide = signal.side.toUpperCase() === 'COMPRA' || signal.side.toUpperCase() === 'BUY' ? "BUY" : "SELL";

      // ‚úÖ PASSO 1: CRIAR POSI√á√ÉO NO BANCO OBRIGATORIAMENTE ANTES DE QUALQUER ORDEM
      console.log(`[REVERSE_IMPROVED] üèóÔ∏è Criando posi√ß√£o no banco de dados...`);
      
      const positionData = {
          simbolo: signal.symbol,
          quantidade: 0, // Ser√° atualizada ap√≥s preenchimento
          quantidade_aberta: totalEntrySize,
          preco_medio: 0, // Ser√° atualizada ap√≥s preenchimento
          status: 'OPEN',
          side: binanceSide,
          leverage: leverage,
          preco_entrada: entryPrice,
          preco_corrente: entryPrice,
          observacoes: `Criada automaticamente para sinal ${signal.id}`
      };

      positionId = await insertPosition(connection, positionData, accountId);
      console.log(`[REVERSE_IMPROVED] ‚úÖ Posi√ß√£o criada no banco com ID: ${positionId}`);

      // ‚úÖ PASSO 2: ATUALIZAR O SINAL COM O ID DA POSI√á√ÉO
      await connection.query(
          `UPDATE webhook_signals SET position_id = $1, status = 'ENTRADA_EM_PROGRESSO', updated_at = CURRENT_TIMESTAMP WHERE id = $2`,
          [positionId, signal.id]
      );
      console.log(`[REVERSE_IMPROVED] ‚úÖ Sinal ${signal.id} atualizado com position_id: ${positionId}`);

      // ‚úÖ PASSO 3: REGISTRAR LISTENER DEDICADO DO PUB/SUB
      websockets.registerEntryExecutionListener(orderUpdateHandler, accountId, temporaryListenerId);
      console.log(`[REVERSE_IMPROVED] üéß Listener dedicado registrado: ${temporaryListenerId}`);

      // ‚úÖ PASSO 4: ENVIAR ORDEM DE ENTRADA PARA A CORRETORA
      console.log(`[REVERSE_IMPROVED] üì§ Enviando ordem de entrada para a corretora...`);
      
      const entryOrderResponse = await newMarketOrder(
          signal.symbol,
          binanceSide,
          totalEntrySize,
          numericAccountId
      );

      if (!entryOrderResponse || !entryOrderResponse.orderId) {
          throw new Error(`Falha ao enviar ordem de entrada: ${JSON.stringify(entryOrderResponse)}`);
      }

      entryOrderId = String(entryOrderResponse.orderId);
      console.log(`[REVERSE_IMPROVED] ‚úÖ Ordem de entrada enviada: ${entryOrderId}`);

      // ‚úÖ PASSO 5: INSERIR ORDEM DE ENTRADA NO BANCO IMEDIATAMENTE
      const entryOrderData = {
          tipo_ordem: 'MARKET',
          preco: entryPrice,
          quantidade: totalEntrySize,
          id_posicao: positionId,
          status: 'NEW',
          data_hora_criacao: formatDateForPostgreSQL(new Date()),
          id_externo: entryOrderId,
          side: binanceSide,
          simbolo: signal.symbol,
          tipo_ordem_bot: 'ENTRADA',
          target: null,
          reduce_only: false,
          close_position: false,
          last_update: formatDateForPostgreSQL(new Date()),
          orign_sig: `WEBHOOK_${signal.id}`,
          observacao: `Ordem de entrada para sinal ${signal.id}`
      };

      await insertNewOrder(connection, entryOrderData);
      console.log(`[REVERSE_IMPROVED] ‚úÖ Ordem de entrada inserida no banco`);

      // ‚úÖ PASSO 6: AGUARDAR CONFIRMA√á√ÉO VIA WEBHOOK (45 segundos)
      console.log(`[REVERSE_IMPROVED] ‚è≥ Aguardando confirma√ß√£o via webhook por ${WEBHOOK_TIMEOUT_MS/1000}s...`);
      
      const webhookStartTime = Date.now();
      while ((Date.now() - webhookStartTime) < WEBHOOK_TIMEOUT_MS && !isWebhookConfirmed) {
          await new Promise(resolve => setTimeout(resolve, 500)); // Check a cada 500ms
      }

      // ‚úÖ PASSO 7: SE WEBHOOK N√ÉO CONFIRMOU, FAZER POLLING REST
      if (!isWebhookConfirmed) {
          console.log(`[REVERSE_IMPROVED] ‚ö†Ô∏è Webhook timeout - iniciando polling REST...`);
          
          let pollingAttempts = 0;
          let orderFound = false;
          
          while (pollingAttempts < MAX_REST_POLLING_ATTEMPTS && !orderFound) {
              try {
                  const orderStatus = await getOrderStatus(signal.symbol, entryOrderId, numericAccountId);
                  
                  if (orderStatus) {
                      console.log(`[REVERSE_IMPROVED] üìä Status REST da ordem: ${orderStatus.status}, filled: ${orderStatus.executedQty}`);
                      
                      entryOrderStatus = orderStatus.status;
                      totalFilledSize = parseFloat(orderStatus.executedQty || '0');
                      averageEntryPrice = parseFloat(orderStatus.avgPrice || entryPrice);
                      
                      if (orderStatus.status === 'FILLED') {
                          orderFound = true;
                          break;
                      }
                  }
              } catch (error) {
                  console.warn(`[REVERSE_IMPROVED] ‚ö†Ô∏è Erro ao consultar status da ordem via REST:`, error.message);
              }
              
              pollingAttempts++;
              if (pollingAttempts < MAX_REST_POLLING_ATTEMPTS) {
                  await new Promise(resolve => setTimeout(resolve, REST_POLLING_INTERVAL_MS));
              }
          }
          
          if (!orderFound) {
              throw new Error(`Ordem de entrada n√£o foi preenchida ap√≥s ${MAX_REST_POLLING_ATTEMPTS} tentativas de polling`);
          }
      }

      // ‚úÖ PASSO 8: ATUALIZAR POSI√á√ÉO E ORDEM NO BANCO COM DADOS REAIS
      if (totalFilledSize > 0 && averageEntryPrice > 0) {
          console.log(`[REVERSE_IMPROVED] üìä Atualizando posi√ß√£o: filled=${totalFilledSize}, avgPrice=${averageEntryPrice}`);
          
          // Atualizar posi√ß√£o
          await connection.query(`
              UPDATE posicoes 
              SET quantidade = $1, preco_medio = $2, preco_entrada = $3, preco_corrente = $4, last_update = CURRENT_TIMESTAMP
              WHERE id = $5
          `, [totalFilledSize, averageEntryPrice, averageEntryPrice, averageEntryPrice, positionId]);
          
          // Atualizar ordem
          await connection.query(`
              UPDATE ordens 
              SET status = $1, preco_executado = $2, quantidade_executada = $3, last_update = CURRENT_TIMESTAMP
              WHERE id_externo = $4 AND conta_id = $5
          `, ['FILLED', averageEntryPrice, totalFilledSize, entryOrderId, accountId]);
      }

      // ‚úÖ DELAY ANTES DE CRIAR AS PR√ìXIMAS ORDENS
      console.log(`[REVERSE_IMPROVED] ‚è≥ Aguardando ${DELAY_BETWEEN_INSERTS_MS/1000}s antes de criar Stop Loss...`);
      await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_INSERTS_MS));

      // ‚úÖ PASSO 9: CRIAR ORDEM DE STOP LOSS
      if (signal.sl_price && signal.sl_price > 0) {
          await createStopLossOrder(signal, averageEntryPrice, totalFilledSize, accountId, positionId, connection);
      }

      // ‚úÖ DELAY ANTES DE CRIAR TPS
      console.log(`[REVERSE_IMPROVED] ‚è≥ Aguardando ${DELAY_BETWEEN_INSERTS_MS/1000}s antes de criar Take Profits...`);
      await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_INSERTS_MS));

      // ‚úÖ PASSO 10: CRIAR ORDENS DE TAKE PROFIT
      const tpTargets = ['tp1_price', 'tp2_price', 'tp3_price', 'tp4_price', 'tp5_price'];
      for (let i = 0; i < tpTargets.length; i++) {
          const tpField = tpTargets[i];
          if (signal[tpField] && signal[tpField] > 0) {
              await createTakeProfitOrder(signal, signal[tpField], totalFilledSize / tpTargets.length, accountId, positionId, connection, i + 1);
              
              // Delay entre cada TP
              if (i < tpTargets.length - 1) {
                  await new Promise(resolve => setTimeout(resolve, DELAY_BETWEEN_INSERTS_MS));
              }
          }
      }

      // ‚úÖ COMMIT DA TRANSA√á√ÉO
      await connection.commit();
      
      // ‚úÖ ATUALIZAR STATUS DO SINAL
      await connection.query(
          `UPDATE webhook_signals SET status = 'EXECUTADO', updated_at = CURRENT_TIMESTAMP WHERE id = $1`,
          [signal.id]
      );

      console.log(`[REVERSE_IMPROVED] ‚úÖ Entrada executada com sucesso! Position ID: ${positionId}, Filled: ${totalFilledSize}`);

      // ‚úÖ NOTIFICA√á√ÉO TELEGRAM
      try {
          const telegramMessage = `‚úÖ Entrada Executada!\n\nüìä ${signal.symbol} ${binanceSide}\nüí∞ Quantidade: ${totalFilledSize}\nüí≤ Pre√ßo m√©dio: ${averageEntryPrice}\nüéØ Position ID: ${positionId}`;
          await sendTelegramMessage(telegramMessage, accountId);
      } catch (telegramError) {
          console.warn(`[REVERSE_IMPROVED] ‚ö†Ô∏è Erro ao enviar Telegram:`, telegramError.message);
      }

      return { 
          success: true, 
          positionId: positionId,
          entryOrderId: entryOrderId,
          filledQuantity: totalFilledSize,
          averagePrice: averageEntryPrice
      };

  } catch (error) {
      console.error(`[REVERSE_IMPROVED] ‚ùå Erro durante execu√ß√£o:`, error.message);
      
      // Rollback da transa√ß√£o
      if (connection) {
          try {
              await connection.rollback();
              console.log(`[REVERSE_IMPROVED] üîÑ Rollback executado`);
          } catch (rollbackError) {
              console.error(`[REVERSE_IMPROVED] ‚ùå Erro no rollback:`, rollbackError.message);
          }
      }

      // Atualizar sinal com erro
      if (signal.id && connection) {
          try {
              await connection.query(
                  `UPDATE webhook_signals SET status = 'ERROR', error_message = $1, updated_at = CURRENT_TIMESTAMP WHERE id = $2`,
                  [error.message.substring(0, 250), signal.id]
              );
          } catch (updateError) {
              console.error(`[REVERSE_IMPROVED] ‚ùå Erro ao atualizar sinal:`, updateError.message);
          }
      }

      return { 
          success: false, 
          error: error.message 
      };

  } finally {
      // ‚úÖ LIMPAR LISTENER DEDICADO
      if (temporaryListenerId) {
          websockets.unregisterEntryExecutionListener(temporaryListenerId);
          console.log(`[REVERSE_IMPROVED] üóëÔ∏è Listener dedicado removido: ${temporaryListenerId}`);
      }

      // ‚úÖ LIBERAR CONEX√ÉO
      if (connection) {
          try {
              connection.release();
          } catch (releaseError) {
              console.error(`[REVERSE_IMPROVED] ‚ùå Erro ao liberar conex√£o:`, releaseError.message);
          }
      }
  }
}

/**
 * ‚úÖ FUN√á√ÉO AUXILIAR: Criar ordem de Stop Loss
 */
async function createStopLossOrder(signal, entryPrice, quantity, accountId, positionId, connection) {
    try {
        console.log(`[REVERSE_IMPROVED] üõ°Ô∏è Criando ordem de Stop Loss...`);
        
        const slPrice = parseFloat(signal.sl_price);
        const binanceSide = signal.side.toUpperCase() === 'COMPRA' || signal.side.toUpperCase() === 'BUY' ? "BUY" : "SELL";
        const slSide = binanceSide === 'BUY' ? "SELL" : "BUY"; // Oposto da entrada
        
        // Enviar para corretora
        const slOrderResponse = await newStopOrder(
            signal.symbol,
            slSide,
            quantity,
            slPrice,
            accountId
        );

        if (slOrderResponse && slOrderResponse.orderId) {
            console.log(`[REVERSE_IMPROVED] ‚úÖ Stop Loss enviado: ${slOrderResponse.orderId}`);
            
            // Inserir no banco
            const slOrderData = {
                tipo_ordem: 'STOP_MARKET',
                preco: slPrice,
                quantidade: quantity,
                id_posicao: positionId,
                status: 'NEW',
                data_hora_criacao: formatDateForPostgreSQL(new Date()),
                id_externo: String(slOrderResponse.orderId),
                side: slSide,
                simbolo: signal.symbol,
                tipo_ordem_bot: 'SL',
                target: null,
                reduce_only: true,
                close_position: false,
                last_update: formatDateForPostgreSQL(new Date()),
                orign_sig: `WEBHOOK_${signal.id}`,
                observacao: `Stop Loss para sinal ${signal.id}`,
                stop_price: slPrice
            };

            await insertNewOrder(connection, slOrderData);
            console.log(`[REVERSE_IMPROVED] ‚úÖ Stop Loss inserido no banco`);
        }
    } catch (error) {
        console.error(`[REVERSE_IMPROVED] ‚ùå Erro ao criar Stop Loss:`, error.message);
        throw error;
    }
}

/**
 * ‚úÖ FUN√á√ÉO AUXILIAR: Criar ordem de Take Profit
 */
async function createTakeProfitOrder(signal, tpPrice, quantity, accountId, positionId, connection, targetNumber) {
    try {
        console.log(`[REVERSE_IMPROVED] üéØ Criando Take Profit ${targetNumber} (${tpPrice})...`);
        
        const binanceSide = signal.side.toUpperCase() === 'COMPRA' || signal.side.toUpperCase() === 'BUY' ? "BUY" : "SELL";
        const tpSide = binanceSide === 'BUY' ? "SELL" : "BUY"; // Oposto da entrada
        
        // Enviar para corretora
        const tpOrderResponse = await newLimitMakerOrder(
            signal.symbol,
            tpSide,
            quantity,
            tpPrice,
            accountId,
            true // reduce_only
        );

        if (tpOrderResponse && tpOrderResponse.orderId) {
            console.log(`[REVERSE_IMPROVED] ‚úÖ Take Profit ${targetNumber} enviado: ${tpOrderResponse.orderId}`);
            
            // Inserir no banco
            const tpOrderData = {
                tipo_ordem: 'LIMIT',
                preco: tpPrice,
                quantidade: quantity,
                id_posicao: positionId,
                status: 'NEW',
                data_hora_criacao: formatDateForPostgreSQL(new Date()),
                id_externo: String(tpOrderResponse.orderId),
                side: tpSide,
                simbolo: signal.symbol,
                tipo_ordem_bot: 'TP',
                target: targetNumber,
                reduce_only: true,
                close_position: false,
                last_update: formatDateForPostgreSQL(new Date()),
                orign_sig: `WEBHOOK_${signal.id}`,
                observacao: `Take Profit ${targetNumber} para sinal ${signal.id}`
            };

            await insertNewOrder(connection, tpOrderData);
            console.log(`[REVERSE_IMPROVED] ‚úÖ Take Profit ${targetNumber} inserido no banco`);
        }
    } catch (error) {
        console.error(`[REVERSE_IMPROVED] ‚ùå Erro ao criar Take Profit ${targetNumber}:`, error.message);
        throw error;
    }
}

// FUN√á√ïES AUXILIARES (mantidas como estavam)
async function getAvailableBalance(accountId) {
    try {
        const balanceData = await getFuturesAccountBalanceDetails(accountId);
        return balanceData.availableBalance || 0;
    } catch (error) {
        console.error(`[REVERSE_IMPROVED] Erro ao obter saldo dispon√≠vel:`, error.message);
        return 0;
    }
}

function calculateOrderSize(availableBalance, capitalPercentage, entryPrice, leverage, stepSize, quantityPrecision) {
    const capital = availableBalance * capitalPercentage;
    const rawSize = (capital * leverage) / entryPrice;

    if (stepSize <= 0) {
        return parseFloat(rawSize.toFixed(quantityPrecision));
    }

    const stepMultiplier = 1 / stepSize;
    const stepsRaw = rawSize * stepMultiplier;
    const stepsFloor = Math.floor(stepsRaw);
    const truncatedSize = stepsFloor / stepMultiplier;

    const formattedSize = parseFloat(truncatedSize.toFixed(quantityPrecision));

    console.log(`[REVERSE_IMPROVED] C√°lculo do tamanho:`);
    console.log(`  - Saldo dispon√≠vel: ${availableBalance.toFixed(2)} USDT`);
    console.log(`  - Capital %: ${(capitalPercentage * 100).toFixed(2)}%`);
    console.log(`  - Alavancagem: ${leverage}x`);
    console.log(`  - Pre√ßo entrada: ${entryPrice}`);
    console.log(`  - Tamanho formatado: ${formattedSize}`);

    return formattedSize;
}

module.exports = {
    executeReverse
};
