/**
 * ‚úÖ TESTE COMPLETO: Monitoramento de Orquestra√ß√£o
 * 
 * Este teste verifica se o monitoramento de orquestra√ß√£o funciona corretamente
 * ap√≥s todas as corre√ß√µes aplicadas, incluindo:
 * - Detec√ß√£o e corre√ß√£o de posi√ß√µes √≥rf√£s
 * - Vincula√ß√£o de sinais a posi√ß√µes
 * - Sincroniza√ß√£o de posi√ß√µes e ordens
 * - Tratamento de erros e propriedades undefined
 */

const { getDatabaseInstance } = require('../../../core/database/conexao');
const { syncPositionsWithAutoClose } = require('../services/positionSync');

async function testCompleteMonitoring() {
  console.log('üîç === TESTE COMPLETO DE MONITORAMENTO ===');
  
  try {
    // 1. Conectar ao banco
    console.log('üîÑ 1. Conectando ao banco...');
    const db = await getDatabaseInstance();
    console.log('‚úÖ Banco conectado');
    
    // 2. Verificar contas ativas
    console.log('üîÑ 2. Verificando contas ativas...');
    const accountsResult = await db.query(`
      SELECT id, nome, ativa FROM contas WHERE ativa = true
    `);
    
    if (accountsResult.rows.length === 0) {
      console.log('‚ö†Ô∏è Nenhuma conta ativa encontrada');
      return;
    }
    
    console.log(`‚úÖ Encontradas ${accountsResult.rows.length} contas ativas`);
    
    // 3. Testar sincroniza√ß√£o com auto-close para cada conta
    for (const account of accountsResult.rows) {
      console.log(`\nüîÑ 3. Testando sincroniza√ß√£o para conta ${account.id} (${account.nome})...`);
      
      try {
        const syncResult = await syncPositionsWithAutoClose(account.id);
        console.log(`‚úÖ Sincroniza√ß√£o conclu√≠da para conta ${account.id}:`);
        console.log(`   - Posi√ß√µes sincronizadas: ${syncResult.exchangePositions || 0}`);
        console.log(`   - Ordens movidas: ${syncResult.ordersMoved || 0}`);
        console.log(`   - √ìrf√£s processadas: ${syncResult.orphansProcessed || 0}`);
        console.log(`   - √ìrf√£s corrigidas: ${syncResult.orphansFixed || 0}`);
        console.log(`   - Sinais vinculados: ${syncResult.signalsLinked || 0}`);
        console.log(`   - Erros: ${syncResult.errors || 0}`);
        
        // Verificar se h√° erros cr√≠ticos
        if (syncResult.orphanErrors && syncResult.orphanErrors.length > 0) {
          console.log(`   ‚ö†Ô∏è Erros de √≥rf√£s: ${syncResult.orphanErrors.length}`);
        }
        
        if (syncResult.signalLinkErrors && syncResult.signalLinkErrors.length > 0) {
          console.log(`   ‚ö†Ô∏è Erros de vincula√ß√£o: ${syncResult.signalLinkErrors.length}`);
        }
        
      } catch (syncError) {
        console.error(`‚ùå Erro na sincroniza√ß√£o da conta ${account.id}:`, syncError.message);
      }
    }
    
    // 4. Testar detec√ß√£o de posi√ß√µes √≥rf√£s e vincula√ß√£o de sinais
    console.log('\nüîÑ 4. Testando detec√ß√£o de posi√ß√µes √≥rf√£s e vincula√ß√£o de sinais...');
    
    for (const account of accountsResult.rows) {
      console.log(`\nüîç Testando fun√ß√µes auxiliares para conta ${account.id}...`);
      
      try {
        // Simular as fun√ß√µes auxiliares que estavam falhando
        const { detectAndFixOrphanPositions, linkSignalsToOpenPositions } = require('../services/positionSync');
        
        // Testar detec√ß√£o de √≥rf√£s
        console.log(`   üîç Detectando posi√ß√µes √≥rf√£s...`);
        const orphanResults = await detectAndFixOrphanPositions(account.id);
        console.log(`   ‚úÖ √ìrf√£s: ${orphanResults.processed} processadas, ${orphanResults.fixed} corrigidas`);
        
        // Testar vincula√ß√£o de sinais
        console.log(`   üîó Vinculando sinais...`);
        const linkResults = await linkSignalsToOpenPositions(account.id);
        console.log(`   ‚úÖ Sinais: ${linkResults.linked} vinculados`);
        
      } catch (auxiliaryError) {
        console.error(`   ‚ùå Erro nas fun√ß√µes auxiliares:`, auxiliaryError.message);
      }
    }
    
    // 5. Verificar estado final do sistema
    console.log('\nüîÑ 5. Verificando estado final do sistema...');
    
    const finalStatsResult = await db.query(`
      SELECT 
        (SELECT COUNT(*) FROM posicoes WHERE status = 'OPEN') as posicoes_abertas,
        (SELECT COUNT(*) FROM ordens WHERE status IN ('NEW', 'PARTIALLY_FILLED')) as ordens_ativas,
        (SELECT COUNT(*) FROM webhook_signals WHERE status = 'EXECUTADO' AND position_id IS NULL) as sinais_sem_posicao,
        (SELECT COUNT(*) FROM webhook_signals WHERE status = 'EXECUTADO' AND position_id IS NOT NULL) as sinais_com_posicao
    `);
    
    const stats = finalStatsResult.rows[0];
    console.log('üìä Estado final do sistema:');
    console.log(`   - Posi√ß√µes abertas: ${stats.posicoes_abertas}`);
    console.log(`   - Ordens ativas: ${stats.ordens_ativas}`);
    console.log(`   - Sinais sem posi√ß√£o: ${stats.sinais_sem_posicao}`);
    console.log(`   - Sinais com posi√ß√£o: ${stats.sinais_com_posicao}`);
    
    console.log('\n‚úÖ === TESTE COMPLETO DE MONITORAMENTO CONCLU√çDO ===');
    
  } catch (error) {
    console.error('‚ùå Erro cr√≠tico no teste de monitoramento:', error.message);
    console.error('Stack:', error.stack);
  } finally {
    // Fechar conex√£o com o banco
    process.exit(0);
  }
}

// Executar o teste
testCompleteMonitoring().catch(console.error);
