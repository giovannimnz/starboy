#!/usr/bin/env node

/**
 * üß™ TESTE: Sistema de Detec√ß√£o e Corre√ß√£o de Posi√ß√µes √ìrf√£s
 * 
 * Este script testa a funcionalidade de fallback que detecta posi√ß√µes na corretora
 * que n√£o foram criadas pelo webhook e cria automaticamente as ordens SL, RPs e TP
 * baseadas no √∫ltimo sinal para o s√≠mbolo.
 * 
 * CRIT√âRIOS PARA POSI√á√ÉO √ìRF√É:
 * 1. Posi√ß√£o existe na corretora h√° mais de 4 minutos
 * 2. N√£o tem ordens abertas na corretora  
 * 3. N√£o tem ordens de prote√ß√£o (SL/TP) no banco OU n√£o existe no banco
 * 4. Existe um sinal com pre√ßos de SL/TP para o s√≠mbolo
 * 
 * USO:
 * node test-orphan-positions.js [accountId]
 * 
 * EXEMPLOS:
 * node test-orphan-positions.js 1        # Testar conta 1
 * node test-orphan-positions.js          # Testar conta padr√£o (1)
 */

const { detectAndFixOrphanPositions, createMissingOrdersForPosition } = require('./positionSync');
const { getAllOpenPositions } = require('../api/rest');
const { getDatabaseInstance } = require('../../../core/database/conexao');

// ‚úÖ CONFIGURA√á√ÉO
const DEFAULT_ACCOUNT_ID = 1;
const TEST_MODE = process.env.NODE_ENV === 'test' || process.argv.includes('--dry-run');

/**
 * ‚úÖ FUN√á√ÉO PRINCIPAL DE TESTE
 */
async function testOrphanPositionDetection() {
  console.log('üß™ TESTE: Sistema de Detec√ß√£o de Posi√ß√µes √ìrf√£s');
  console.log('=' .repeat(60));
  
  try {
    // ‚úÖ OBTER ACCOUNT_ID
    const accountId = parseInt(process.argv[2]) || DEFAULT_ACCOUNT_ID;
    console.log(`üìä Testando conta: ${accountId}`);
    
    if (TEST_MODE) {
      console.log('üö® MODO TESTE: Apenas an√°lise, sem criar ordens reais');
    }
    
    // ‚úÖ VERIFICAR CONEX√ÉO COM BANCO
    console.log('\nüîç 1. Verificando conex√£o com banco...');
    const db = await getDatabaseInstance();
    if (!db) {
      throw new Error('Falha ao conectar com banco de dados');
    }
    console.log('‚úÖ Conex√£o com banco estabelecida');
    
    // ‚úÖ OBTER POSI√á√ïES DA CORRETORA
    console.log('\nüîç 2. Obtendo posi√ß√µes da corretora...');
    const exchangePositions = await getAllOpenPositions(accountId);
    console.log(`üìä Encontradas ${exchangePositions.length} posi√ß√µes na corretora`);
    
    if (exchangePositions.length === 0) {
      console.log('‚ÑπÔ∏è Nenhuma posi√ß√£o encontrada na corretora. Teste finalizado.');
      return;
    }
    
    // ‚úÖ LISTAR POSI√á√ïES ENCONTRADAS
    console.log('\nüìã Posi√ß√µes na corretora:');
    exchangePositions.forEach((pos, index) => {
      const ageMinutes = pos.tempoAbertura ? Math.floor((Date.now() - pos.tempoAbertura) / (1000 * 60)) : 'N/A';
      console.log(`  ${index + 1}. ${pos.simbolo}: ${pos.quantidade} (idade: ${ageMinutes} min)`);
    });
    
    // ‚úÖ VERIFICAR POSI√á√ïES NO BANCO
    console.log('\nüîç 3. Verificando posi√ß√µes no banco...');
    const [dbPositions] = await db.query(`
      SELECT id, simbolo, quantidade, status, data_hora_abertura
      FROM posicoes 
      WHERE status = 'OPEN' AND conta_id = $1
      ORDER BY simbolo
    `, [accountId]);
    
    console.log(`üìä Encontradas ${dbPositions.length} posi√ß√µes no banco`);
    
    if (dbPositions.length > 0) {
      console.log('\nüìã Posi√ß√µes no banco:');
      dbPositions.forEach((pos, index) => {
        const ageMinutes = Math.floor((Date.now() - new Date(pos.data_hora_abertura).getTime()) / (1000 * 60));
        console.log(`  ${index + 1}. ${pos.simbolo} (ID: ${pos.id}): ${pos.quantidade} (idade: ${ageMinutes} min)`);
      });
    }
    
    // ‚úÖ VERIFICAR ORDENS DE PROTE√á√ÉO
    console.log('\nüîç 4. Verificando ordens de prote√ß√£o...');
    const [protectionOrders] = await db.query(`
      SELECT simbolo, tipo_ordem_bot, COUNT(*) as count
      FROM ordens 
      WHERE conta_id = $1 AND status IN ('NEW', 'PARTIALLY_FILLED')
        AND tipo_ordem_bot IN ('STOP_LOSS', 'RP1', 'RP2', 'RP3', 'RP4', 'TP')
      GROUP BY simbolo, tipo_ordem_bot
      ORDER BY simbolo
    `, [accountId]);
    
    console.log(`üìä Encontradas ${protectionOrders.length} ordens de prote√ß√£o ativas`);
    
    if (protectionOrders.length > 0) {
      console.log('\nüìã Ordens de prote√ß√£o por s√≠mbolo:');
      const protectionBySymbol = {};
      protectionOrders.forEach(order => {
        if (!protectionBySymbol[order.simbolo]) {
          protectionBySymbol[order.simbolo] = [];
        }
        protectionBySymbol[order.simbolo].push(`${order.tipo_ordem_bot} (${order.count})`);
      });
      
      Object.entries(protectionBySymbol).forEach(([symbol, orders]) => {
        console.log(`  ${symbol}: ${orders.join(', ')}`);
      });
    }
    
    // ‚úÖ VERIFICAR SINAIS DISPON√çVEIS
    console.log('\nüîç 5. Verificando sinais dispon√≠veis...');
    const symbolsFromExchange = [...new Set(exchangePositions.map(pos => pos.simbolo))];
    const signalsInfo = [];
    
    for (const symbol of symbolsFromExchange) {
      const [signals] = await db.query(`
        SELECT id, symbol, side, sl_price, tp1_price, tp2_price, tp3_price, tp4_price, tp5_price, tp_price, created_at
        FROM webhook_signals 
        WHERE symbol = $1 AND conta_id = $2 
        ORDER BY created_at DESC 
        LIMIT 1
      `, [symbol, accountId]);
      
      if (signals.length > 0) {
        const signal = signals[0];
        const ageMinutes = Math.floor((Date.now() - new Date(signal.created_at).getTime()) / (1000 * 60));
        const hasSlPrice = signal.sl_price && parseFloat(signal.sl_price) > 0;
        const hasTpPrices = [signal.tp1_price, signal.tp2_price, signal.tp3_price, signal.tp4_price, signal.tp5_price, signal.tp_price].some(price => price && parseFloat(price) > 0);
        
        signalsInfo.push({
          symbol,
          signalId: signal.id,
          age: ageMinutes,
          hasSlPrice,
          hasTpPrices,
          side: signal.side
        });
      } else {
        signalsInfo.push({
          symbol,
          signalId: null,
          age: null,
          hasSlPrice: false,
          hasTpPrices: false,
          side: null
        });
      }
    }
    
    console.log('\nüìã Sinais por s√≠mbolo:');
    signalsInfo.forEach(info => {
      if (info.signalId) {
        const pricesAvailable = [];
        if (info.hasSlPrice) pricesAvailable.push('SL');
        if (info.hasTpPrices) pricesAvailable.push('TP');
        
        console.log(`  ${info.symbol}: Sinal ID=${info.signalId} (${info.age} min) - ${info.side} - Pre√ßos: ${pricesAvailable.join(', ') || 'Nenhum'}`);
      } else {
        console.log(`  ${info.symbol}: ‚ùå Nenhum sinal encontrado`);
      }
    });
    
    // ‚úÖ EXECUTAR DETEC√á√ÉO DE √ìRF√ÉS
    console.log('\nüîç 6. Executando detec√ß√£o de posi√ß√µes √≥rf√£s...');
    console.log('=' .repeat(50));
    
    if (TEST_MODE) {
      console.log('üö® MODO TESTE ATIVO - Simulando detec√ß√£o sem criar ordens');
      // Simular l√≥gica de detec√ß√£o...
      let simulatedOrphans = 0;
      
      for (const position of exchangePositions) {
        const symbol = position.simbolo;
        const positionAge = position.tempoAbertura ? Date.now() - position.tempoAbertura : 0;
        const ageMinutes = Math.floor(positionAge / (1000 * 60));
        
        console.log(`\nüîç Simulando ${symbol}:`);
        
        // Crit√©rio 1: Idade
        if (ageMinutes < 4) {
          console.log(`  ‚è≥ Muito nova (${ageMinutes} min) - SKIP`);
          continue;
        }
        
        // Crit√©rio 2: Ordens abertas (simulado)
        console.log(`  ‚úÖ Idade ok (${ageMinutes} min)`);
        console.log(`  üîç Verificando ordens abertas...`);
        
        // Crit√©rio 3: Posi√ß√£o no banco
        const dbPos = dbPositions.find(p => p.simbolo === symbol);
        if (dbPos) {
          console.log(`  ‚úÖ Posi√ß√£o encontrada no banco (ID: ${dbPos.id})`);
          
          // Verificar ordens de prote√ß√£o
          const hasProtection = protectionOrders.some(order => order.simbolo === symbol);
          if (hasProtection) {
            console.log(`  ‚úÖ Tem ordens de prote√ß√£o - N√ÉO √â √ìRF√É`);
            continue;
          } else {
            console.log(`  ‚ö†Ô∏è SEM ordens de prote√ß√£o - √ìRF√É DETECTADA!`);
          }
        } else {
          console.log(`  ‚ö†Ô∏è Posi√ß√£o N√ÉO encontrada no banco - √ìRF√É DETECTADA!`);
        }
        
        // Crit√©rio 4: Sinal dispon√≠vel
        const signalInfo = signalsInfo.find(s => s.symbol === symbol);
        if (signalInfo && signalInfo.signalId && (signalInfo.hasSlPrice || signalInfo.hasTpPrices)) {
          console.log(`  ‚úÖ Sinal dispon√≠vel com pre√ßos - √ìRF√É PODE SER CORRIGIDA`);
          simulatedOrphans++;
        } else {
          console.log(`  ‚ùå Sinal n√£o dispon√≠vel ou sem pre√ßos - √ìRF√É N√ÉO PODE SER CORRIGIDA`);
        }
      }
      
      console.log(`\nüìä RESULTADO DA SIMULA√á√ÉO:`);
      console.log(`  üîç Posi√ß√µes verificadas: ${exchangePositions.length}`);
      console.log(`  ‚ö†Ô∏è √ìrf√£s detectadas: ${simulatedOrphans}`);
      console.log(`\nüí° Para executar corre√ß√£o real, rode sem --dry-run`);
      
    } else {
      // ‚úÖ EXECU√á√ÉO REAL
      console.log('üöÄ EXECUTANDO CORRE√á√ÉO REAL...');
      
      const orphanResults = await detectAndFixOrphanPositions(accountId);
      
      console.log('\nüìä RESULTADO DA EXECU√á√ÉO:');
      console.log(`  üîç Posi√ß√µes processadas: ${orphanResults.processed}`);
      console.log(`  üîß √ìrf√£s corrigidas: ${orphanResults.fixed}`);
      console.log(`  ‚ùå Erros: ${orphanResults.errors.length}`);
      
      if (orphanResults.errors.length > 0) {
        console.log('\nüìã Detalhes dos erros:');
        orphanResults.errors.forEach((error, index) => {
          console.log(`  ${index + 1}. ${error}`);
        });
      }
      
      if (orphanResults.fixed > 0) {
        console.log('\n‚úÖ Posi√ß√µes √≥rf√£s foram corrigidas com sucesso!');
        console.log('üí° Verifique as ordens criadas na interface da corretora');
      } else if (orphanResults.processed > 0) {
        console.log('\n‚úÖ Todas as posi√ß√µes est√£o adequadamente protegidas');
      }
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üß™ TESTE CONCLU√çDO COM SUCESSO!');
    
  } catch (error) {
    console.error('\n‚ùå ERRO NO TESTE:', error.message);
    console.error('Stack:', error.stack);
    process.exit(1);
  }
}

/**
 * ‚úÖ FUN√á√ÉO DE HELP
 */
function showHelp() {
  console.log(`
üß™ TESTE: Sistema de Detec√ß√£o de Posi√ß√µes √ìrf√£s

USO:
  node test-orphan-positions.js [accountId] [op√ß√µes]

PAR√ÇMETROS:
  accountId    ID da conta para testar (padr√£o: 1)

OP√á√ïES:
  --dry-run    Apenas simular, sem criar ordens reais
  --help       Mostrar esta ajuda

EXEMPLOS:
  node test-orphan-positions.js 1           # Testar conta 1 (execu√ß√£o real)
  node test-orphan-positions.js 2 --dry-run # Simular teste na conta 2
  node test-orphan-positions.js --help      # Mostrar ajuda

CRIT√âRIOS PARA POSI√á√ÉO √ìRF√É:
‚Ä¢ Posi√ß√£o existe na corretora h√° mais de 4 minutos
‚Ä¢ N√£o tem ordens abertas na corretora
‚Ä¢ N√£o tem ordens de prote√ß√£o (SL/TP) no banco OU n√£o existe no banco
‚Ä¢ Existe um sinal com pre√ßos de SL/TP para o s√≠mbolo

FUNCIONAMENTO:
1. Verifica todas as posi√ß√µes na corretora
2. Identifica posi√ß√µes sem ordens de prote√ß√£o adequadas
3. Busca o √∫ltimo sinal para o s√≠mbolo
4. Cria ordens SL, RP1-4 e TP baseadas no sinal
5. Salva as ordens no banco de dados
  `);
}

// ‚úÖ EXECUTAR TESTE
if (require.main === module) {
  if (process.argv.includes('--help')) {
    showHelp();
    process.exit(0);
  }
  
  testOrphanPositionDetection()
    .then(() => {
      console.log('\nüëã Teste finalizado');
      process.exit(0);
    })
    .catch(error => {
      console.error('\nüí• Erro fatal:', error.message);
      process.exit(1);
    });
}

module.exports = {
  testOrphanPositionDetection,
  showHelp
};
