const { getDatabaseInstance, formatDateForMySQL } = require('../../../core/database/conexao');
const api = require('../api/rest');
const { sendTelegramMessage, formatPositionClosedMessage, formatAlertMessage } = require('../telegram/telegramBot');

/**
 * Limpa sinais √≥rf√£os e inconsist√™ncias
 */
async function cleanupOrphanSignals(accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[CLEANUP] AccountId inv√°lido: ${accountId}`);
      return;
    }
    
    const db = await getDatabaseInstance();
    
    // Resetar sinais em PROCESSANDO h√° mais de 5 minutos
    const [resetResult] = await db.query(`
      UPDATE webhook_signals 
      SET status = 'PENDING', 
          error_message = NULL,
          updated_at = NOW()
      WHERE status = 'PROCESSANDO' 
        AND conta_id = ?
        AND updated_at < DATE_SUB(NOW(), INTERVAL 5 MINUTE)
    `, [accountId]);
    
    if (resetResult.affectedRows > 0) {
      console.log(`[CLEANUP] ${resetResult.affectedRows} sinais resetados para conta ${accountId}`);
    }

    // Limpar sinais com erro de "not defined"
    await db.query(`
      UPDATE webhook_signals 
      SET status = 'ERROR', 
          error_message = CONCAT(IFNULL(error_message, ''), ' | Limpo durante cleanup') 
      WHERE error_message LIKE '%not defined%' 
        AND conta_id = ?
        AND status NOT IN ('ERROR', 'CANCELED')
    `, [accountId]);

  } catch (error) {
    console.error(`[CLEANUP] Erro na limpeza de sinais √≥rf√£os para conta ${accountId}:`, error.message);
  }
}

/**
 * For√ßa fechamento de posi√ß√µes detectadas como fechadas na corretora
 */
async function forceCloseGhostPositions(accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[CLEANUP] AccountId inv√°lido: ${accountId}`);
      return 0;
    }
    
    const db = await getDatabaseInstance();
    
    // Obter posi√ß√µes abertas no banco
    const [dbPositions] = await db.query(`
      SELECT id, simbolo, quantidade FROM posicoes 
      WHERE status = 'OPEN' AND conta_id = ?
    `, [accountId]);
    
    if (dbPositions.length === 0) {
      return 0;
    }
    
    // Obter posi√ß√µes abertas na corretora
    const exchangePositions = await api.getAllOpenPositions(accountId);
    
    let closedCount = 0;
    
    for (const dbPos of dbPositions) {
      const exchangePos = exchangePositions.find(p => p.simbolo === dbPos.simbolo);
      
      if (!exchangePos || Math.abs(parseFloat(exchangePos.quantidade)) <= 0.000001) {
        // Posi√ß√£o n√£o existe na corretora ou tem quantidade zero
        await db.query(`
          UPDATE posicoes 
          SET status = 'CLOSED', 
              data_hora_fechamento = NOW(),
              observacao = 'Fechada via cleanup - n√£o encontrada na corretora'
          WHERE id = ?
        `, [dbPos.id]);
        
        console.log(`[CLEANUP] Posi√ß√£o fantasma ${dbPos.simbolo} fechada para conta ${accountId} (ID: ${dbPos.id})`);
        closedCount++;
      }
    }
    
    return closedCount;
    
  } catch (error) {
    console.error(`[CLEANUP] Erro ao fechar posi√ß√µes fantasma para conta ${accountId}:`, error.message);
    return 0;
  }
}

/**
 * ‚úÖ VERS√ÉO SIMPLIFICADA: Verifica se ordem existe na corretora pelo id_externo
 * Se n√£o existir na corretora = √≥rf√£ (atualizar banco)
 */
async function cancelOrphanOrders(accountId) {
  try {
    if (!accountId || typeof accountId !== 'number') {
      console.error(`[CLEANUP] AccountId inv√°lido: ${accountId}`);
      return 0;
    }
    
    // ‚úÖ VERIFICAR SE SISTEMA EST√Å EM SHUTDOWN
    if (global.isShuttingDown || process.env.NODE_ENV === 'shutdown') {
      console.log(`[CLEANUP] üõë Sistema em shutdown - cancelando verifica√ß√£o de √≥rf√£s para conta ${accountId}`);
      return 0;
    }
   
    const db = await getDatabaseInstance();
    
    // ‚úÖ BUSCAR APENAS ORDENS ATIVAS (excluir j√° finalizadas)
    const [activeOrders] = await db.query(`
      SELECT id_externo, simbolo, tipo_ordem_bot, quantidade, preco, status, id_posicao, orign_sig
      FROM ordens 
      WHERE status IN ('NEW', 'PARTIALLY_FILLED', 'PENDING_CANCEL')
        AND conta_id = ?
    `, [accountId]);

    if (activeOrders.length === 0) {
      return 0;
    }

    console.log(`[CLEANUP] üîç Verificando ${activeOrders.length} ordens ATIVAS para √≥rf√£s (conta ${accountId})...`);

    let orphanCount = 0;
    let preservedCount = 0;

    for (const order of activeOrders) {
      try {
        // ‚úÖ VERIFICAR SE ORDEM EXISTE NA CORRETORA
        const orderStatus = await api.getOrderStatus(order.simbolo, order.id_externo, accountId);

        if (orderStatus && orderStatus.orderId) {
          const exchangeStatus = orderStatus.status;
          
          // ‚úÖ SE STATUS MUDOU PARA FINALIZADO, MOVER IMEDIATAMENTE
          if (['FILLED', 'CANCELED', 'CANCELLED', 'EXPIRED', 'REJECTED'].includes(exchangeStatus)) {
            console.log(`[CLEANUP] üéØ Ordem ${order.id_externo} finalizada na corretora (${exchangeStatus}) - movendo...`);
            
            // Atualizar status no banco primeiro
            await db.query(`
              UPDATE ordens 
              SET status = ?, last_update = NOW()
              WHERE id_externo = ? AND conta_id = ?
            `, [exchangeStatus, order.id_externo, accountId]);
            
            // Mover automaticamente
            const { autoMoveOrderOnCompletion } = require('../handlers/orderHandlers');
            const moved = await autoMoveOrderOnCompletion(order.id_externo, exchangeStatus, accountId);
            
            if (moved) {
              console.log(`[CLEANUP] ‚úÖ Ordem finalizada ${order.id_externo} movida para hist√≥rico`);
              orphanCount++; // Contar como processada
            }
            
          } else if (exchangeStatus !== order.status) {
            // ‚úÖ SINCRONIZAR STATUS SEM MOVER
            console.log(`[CLEANUP] üîÑ Sincronizando status: ${order.status} ‚Üí ${exchangeStatus}`);
            await db.query(`
              UPDATE ordens 
              SET status = ?, last_update = NOW()
              WHERE id_externo = ? AND conta_id = ?
            `, [exchangeStatus, order.id_externo, accountId]);
            preservedCount++;
          } else {
            // ‚úÖ ORDEM OK - PRESERVAR
            preservedCount++;
          }
          
        } else {
          // ‚úÖ ORDEM N√ÉO EXISTE = √ìRF√É
          console.log(`[CLEANUP] üóëÔ∏è Ordem √≥rf√£ detectada: ${order.id_externo} - marcando como CANCELED`);
          
          await db.query(`
            UPDATE ordens 
            SET status = 'CANCELED', 
                last_update = NOW(),
                observacao = CONCAT(
                  IFNULL(observacao, ''), 
                  ' | √ìrf√£ - n√£o existe na corretora'
                )
            WHERE id_externo = ? AND conta_id = ?
          `, [order.id_externo, accountId]);
          
          // ‚úÖ MOVER √ìRF√É PARA HIST√ìRICO IMEDIATAMENTE
          const { autoMoveOrderOnCompletion } = require('../handlers/orderHandlers');
          const moved = await autoMoveOrderOnCompletion(order.id_externo, 'CANCELED', accountId);
          
          if (moved) {
            orphanCount++;
            console.log(`[CLEANUP] ‚úÖ √ìrf√£ ${order.id_externo} movida para hist√≥rico`);
          }
        }

      } catch (orderError) {
        console.error(`[CLEANUP] ‚ö†Ô∏è Erro ao verificar ordem ${order.id_externo}:`, orderError.message);
        preservedCount++;
      }
    }

    console.log(`[CLEANUP] üìä Resumo para conta ${accountId}:`);
    console.log(`  - Ordens processadas/movidas: ${orphanCount}`);
    console.log(`  - Ordens preservadas (ativas): ${preservedCount}`);

    return orphanCount;

  } catch (error) {
    console.error(`[CLEANUP] ‚ùå Erro ao processar ordens para conta ${accountId}:`, error.message);
    return 0;
  }
}

/**
 * ‚úÖ FUN√á√ÉO CORRIGIDA: Mover ordens para hist√≥rico COM TODOS OS CAMPOS
 */
async function moveOrdersToHistory(accountId) {
  try {
    const db = await getDatabaseInstance();
    
    // ‚úÖ BUSCAR ORDENS PARA MOVER (CANCELED + FILLED √≥rf√£s)
    const [ordersToMove] = await db.query(`
      SELECT o.*, p.status as position_status FROM ordens o
      LEFT JOIN posicoes p ON o.id_posicao = p.id
      WHERE o.conta_id = ? 
        AND (
          (o.status = 'CANCELED' AND o.last_update > DATE_SUB(NOW(), INTERVAL 1 MINUTE))
          OR 
          (o.status = 'FILLED' AND (p.id IS NULL OR p.status != 'OPEN') AND o.last_update < DATE_SUB(NOW(), INTERVAL 1 MINUTE))
          OR 
          (o.status = 'EXPIRED' AND (p.id IS NULL OR p.status != 'OPEN') AND o.last_update < DATE_SUB(NOW(), INTERVAL 1 MINUTE))
        )
    `, [accountId]);
    
    if (ordersToMove.length === 0) {
      return 0;
    }
    
    const canceledOrders = ordersToMove.filter(o => o.status === 'CANCELED');
    const orphanFilledOrders = ordersToMove.filter(o => o.status === 'FILLED');
    
    console.log(`[CLEANUP] üìö Movendo para hist√≥rico:`);
    console.log(`  - ${canceledOrders.length} ordens CANCELED`);
    console.log(`  - ${orphanFilledOrders.length} ordens FILLED √≥rf√£s`);
    
    const connection = await db.getConnection();
    await connection.beginTransaction();
    
    try {
      let movedCount = 0;
      
      for (const order of ordersToMove) {
        // Nova regra: Se for ENTRADA, FILLED ou CANCELED, sem id_posicao, aguarda e tenta vincular
        if (
          (order.status === 'FILLED' || order.status === 'CANCELED') &&
          order.tipo_ordem_bot === 'ENTRADA' &&
          (!order.id_posicao || order.id_posicao === 0)
        ) {
          console.warn(`[CLEANUP] ‚è≥ Ordem ENTRADA ${order.status} ${order.id_externo} sem id_posicao. Aguardando 30s para tentar vincular √† posi√ß√£o aberta...`);
          await new Promise(resolve => setTimeout(resolve, 30000));
          // Buscar posi√ß√£o aberta para o symbol
          const [openPositions] = await connection.query(
            'SELECT id FROM posicoes WHERE simbolo = ? AND status = "OPEN" AND conta_id = ? LIMIT 1',
            [order.simbolo, accountId]
          );
          if (openPositions.length > 0) {
            const posId = openPositions[0].id;
            await connection.query(
              'UPDATE ordens SET id_posicao = ? WHERE id_externo = ? AND conta_id = ?',
              [posId, order.id_externo, accountId]
            );
            order.id_posicao = posId;
            console.log(`[CLEANUP] üîó Ordem ${order.id_externo} vinculada √† posi√ß√£o ${posId}`);
          } else {
            console.warn(`[CLEANUP] ‚ö†Ô∏è N√£o foi encontrada posi√ß√£o aberta para o symbol ${order.simbolo} ap√≥s aguardar. Ordem ${order.id_externo} permanecer√° sem v√≠nculo.`);
            // N√£o mover para o hist√≥rico se n√£o conseguir vincular
            continue;
          }
        }
        // S√≥ mover se j√° estiver vinculada a uma posi√ß√£o
        if (!order.id_posicao || order.id_posicao === 0) {
          console.warn(`[CLEANUP] ‚ö†Ô∏è Ordem ${order.id_externo} ainda n√£o vinculada a uma posi√ß√£o (id_posicao NULL/0). Aguardando v√≠nculo antes de mover para _fechadas.`);
          continue;
        }
        // Atualizar posi√ß√£o relacionada, se houver
        if (order.id_posicao) {
          // Buscar posi√ß√£o atual
          const [positions] = await connection.query(
            'SELECT total_commission, total_realized FROM posicoes WHERE id = ? AND conta_id = ?',
            [order.id_posicao, accountId]
          );
          if (positions.length > 0) {
            const pos = positions[0];
            const newTotalCommission = (parseFloat(pos.total_commission) || 0) + (parseFloat(order.commission) || 0);
            const newTotalRealized = (parseFloat(pos.total_realized) || 0) + (parseFloat(order.realized_profit) || 0);

            let newLiquidPnl;
            if (newTotalCommission < 0) {
              newLiquidPnl = newTotalRealized + newTotalCommission;
            } else {
              newLiquidPnl = newTotalRealized - newTotalCommission;
            }

            await connection.query(
              'UPDATE posicoes SET total_commission = ?, total_realized = ?, liquid_pnl = ? WHERE id = ? AND conta_id = ?',
              [newTotalCommission, newTotalRealized, newLiquidPnl, order.id_posicao, accountId]
            );
            console.log(`[CLEANUP] Posi√ß√£o ${order.id_posicao} atualizada: total_commission=${newTotalCommission}, total_realized=${newTotalRealized}, liquid_pnl=${newLiquidPnl}`);
          }
        }
        // ‚úÖ INSERIR COM TODOS OS CAMPOS
        await connection.query(`
          INSERT INTO ordens_fechadas (
            id_original, id_original_ordens, tipo_ordem, preco, quantidade, id_posicao, status,
            data_hora_criacao, id_externo, side, simbolo, tipo_ordem_bot,
            target, reduce_only, close_position, last_update, renew_sl_firs, renew_sl_seco,
            orign_sig, dados_originais_ws, quantidade_executada, preco_executado, observacao,
            conta_id, commission, commission_asset, trade_id, client_order_id, time_in_force,
            stop_price, execution_type, last_filled_quantity, last_filled_price, order_trade_time,
            realized_profit, position_side
          ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        `, [
          order.id, // id_original
          order.id, // id_original_ordens
          order.tipo_ordem,
          order.preco,
          order.quantidade,
          order.id_posicao,
          order.status,
          formatDateForMySQL(order.data_hora_criacao || new Date()),
          order.id_externo,
          order.side,
          order.simbolo,
          order.tipo_ordem_bot,
          order.target,
          order.reduce_only,
          order.close_position,
          formatDateForMySQL(order.last_update || new Date()),
          order.renew_sl_firs,
          order.renew_sl_seco,
          order.orign_sig,
          order.dados_originais_ws,
          order.quantidade_executada || 0,
          order.preco_executado,
          order.observacao || (order.status === 'CANCELED' ? 'Movida via cleanup - √≥rf√£' : 'Movida automaticamente - posi√ß√£o fechada'),
          order.conta_id,
          order.commission || 0,
          order.commission_asset,
          order.trade_id,
          order.client_order_id,
          order.time_in_force,
          order.stop_price,
          order.execution_type,
          order.last_filled_quantity,
          order.last_filled_price,
          order.order_trade_time,
          order.realized_profit,
          order.position_side
        ]);
        // ‚úÖ REMOVER DA TABELA ATIVA
        await connection.query(
          'DELETE FROM ordens WHERE id_externo = ? AND conta_id = ?',
          [order.id_externo, accountId]
        );
        movedCount++;
      }
      
      await connection.commit();
      console.log(`[CLEANUP] ‚úÖ ${movedCount} ordens movidas para hist√≥rico com sucesso`);
      
      return movedCount;
      
    } catch (moveError) {
      await connection.rollback();
      console.error(`[CLEANUP] ‚ùå Erro ao mover ordens para hist√≥rico:`, moveError.message);
      throw moveError;
    } finally {
      connection.release();
    }
    
  } catch (error) {
    console.error(`[CLEANUP] ‚ùå Erro na fun√ß√£o moveOrdersToHistory:`, error.message);
    return 0;
  }
}

/**
 * ‚úÖ FUN√á√ÉO AUXILIAR: Verificar se ordem espec√≠fica existe na corretora
 * @param {string} symbol - S√≠mbolo da ordem
 * @param {string} orderId - ID externo da ordem
 * @param {number} accountId - ID da conta
 * @returns {Promise<Object>} - { exists: boolean, status: string|null }
 */
async function checkOrderExistsOnExchange(symbol, orderId, accountId) {
  try {
    const orderStatus = await api.getOrderStatus(symbol, orderId, accountId);
    
    if (orderStatus && orderStatus.orderId && orderStatus.status) {
      return {
        exists: true,
        status: orderStatus.status,
        data: orderStatus
      };
    } else {
      return {
        exists: false,
        status: null,
        data: null
      };
    }
    
  } catch (error) {
    // Verificar se √© erro de "ordem n√£o existe"
    if (error.message.includes('Unknown order sent') || 
        error.message.includes('Order does not exist') ||
        error.message.includes('-2013')) {
      
      return {
        exists: false,
        status: null,
        error: 'ORDER_NOT_FOUND'
      };
    }
    
    // Outros erros (rede, etc.) - relan√ßar
    throw error;
  }
}

/**
 * ‚úÖ FUN√á√ÉO PARA VERIFICAR ORDEM INDIVIDUAL
 * √ötil para verifica√ß√µes pontuais ou debugging
 */
async function checkSingleOrderStatus(orderId, accountId) {
  try {
    const db = await getDatabaseInstance();
    
    // Buscar ordem no banco
    const [orderInDb] = await db.query(`
      SELECT id_externo, simbolo, tipo_ordem_bot, status, last_update
      FROM ordens 
      WHERE id_externo = ? AND conta_id = ?
    `, [orderId, accountId]);
    
    if (orderInDb.length === 0) {
      return { error: 'Ordem n√£o encontrada no banco de dados' };
    }
    
    const order = orderInDb[0];
    
    // Verificar na corretora
    const exchangeCheck = await checkOrderExistsOnExchange(order.simbolo, orderId, accountId);
    
    const result = {
      orderId: orderId,
      symbol: order.simbolo,
      type: order.tipo_ordem_bot,
      statusInDb: order.status,
      lastUpdate: order.last_update,
      existsOnExchange: exchangeCheck.exists,
      statusOnExchange: exchangeCheck.status,
      isOrphan: !exchangeCheck.exists && ['NEW', 'PARTIALLY_FILLED'].includes(order.status)
    };
    
    console.log(`[CLEANUP] üìã Status da ordem ${orderId}:`);
    console.log(`  - No banco: ${result.statusInDb}`);
    console.log(`  - Na corretora: ${result.existsOnExchange ? result.statusOnExchange : 'N√ÉO EXISTE'}`);
    console.log(`  - √â √≥rf√£: ${result.isOrphan ? 'SIM' : 'N√ÉO'}`);
    
    return result;
    
  } catch (error) {
    console.error(`[CLEANUP] ‚ùå Erro ao verificar ordem ${orderId}:`, error.message);
    return { error: error.message };
  }
}

/**
 * ‚úÖ FUN√á√ÉO PARA HISTORICO DE POSI√á√ïES
 * Move posi√ß√µes fechadas para o hist√≥rico
 */
async function movePositionToHistory(positionId, accountId, force = false) {
  try {
    const db = await getDatabaseInstance();
    
    // Obter posi√ß√£o
    const [positions] = await db.query(`
      SELECT * FROM posicoes 
      WHERE id = ? AND conta_id = ?
    `, [positionId, accountId]);
    
    if (positions.length === 0) {
      return 0;
    }
    
    const position = positions[0];
    
    // Verificar se j√° est√° fechada
    if (position.status !== 'CLOSED' && !force) {
      console.log(`[HISTORICO] Posi√ß√£o ${positionId} n√£o est√° fechada (status: ${position.status})`);
      return 0;
    }
    
    // Inserir no hist√≥rico
    await db.query(`
      INSERT INTO posicoes_fechadas (
        id_original, simbolo, quantidade, preco_medio, status, data_hora_abertura, data_hora_fechamento, motivo_fechamento, side, leverage, data_hora_ultima_atualizacao, preco_entrada, preco_corrente, orign_sig, conta_id, quantidade_aberta, trailing_stop_level, pnl_corrente, breakeven_price, accumulated_realized, unrealized_pnl, margin_type, isolated_wallet, position_side, event_reason, webhook_data_raw, observacoes
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      position.id, // id_original
      position.simbolo,
      position.quantidade,
      position.preco_medio,
      status || position.status,
      formatDateForMySQL(position.data_hora_abertura),
      formatDateForMySQL(new Date()), // data_hora_fechamento = agora
      reason || null, // motivo_fechamento
      position.side,
      position.leverage,
      formatDateForMySQL(position.data_hora_ultima_atualizacao),
      position.preco_entrada,
      position.preco_corrente,
      position.orign_sig,
      position.conta_id,
      position.quantidade_aberta,
      position.trailing_stop_level,
      position.pnl_corrente,
      position.breakeven_price,
      position.accumulated_realized,
      position.unrealized_pnl,
      position.margin_type,
      position.isolated_wallet,
      position.position_side,
      position.event_reason,
      position.webhook_data_raw,
      position.observacoes
    ]);
    
    // Remover da tabela de posi√ß√µes
    await db.query(`
      DELETE FROM posicoes WHERE id = ?
    `, [positionId]);
    
    console.log(`[HISTORICO] Posi√ß√£o ${positionId} movida para hist√≥rico com sucesso`);
    
    // Enviar mensagem para o Telegram
   // const message = formatPositionClosedMessage(position);
   // sendTelegramMessage(message);
    
    return 1;
    
  } catch (error) {
    console.error(`[HISTORICO] Erro ao mover posi√ß√£o ${positionId} para hist√≥rico:`, error.message);
    return 0;
  }
}

/**
 * ‚úÖ FUN√á√ÉO PARA FECHAR E SINCRONIZAR POSI√á√ïES "FANTASMA"
 * Fecha posi√ß√µes que est√£o abertas no banco mas n√£o na corretora
 */
async function checkAndCloseWebsocket(accountId) {
  try {
    const db = await getDatabaseInstance();
    
    // Obter posi√ß√µes abertas no banco
    const [dbPositions] = await db.query(`
      SELECT id, simbolo, quantidade FROM posicoes 
      WHERE status = 'OPEN' AND conta_id = ?
    `, [accountId]);
    
    if (dbPositions.length === 0) {
      return 0;
    }
    
    // Obter posi√ß√µes abertas na corretora via WebSocket
    const exchangePositions = await api.api.getAllOpenPositions(accountId);
    
    let closedCount = 0;
    
    for (const dbPos of dbPositions) {
      const exchangePos = exchangePositions.find(p => p.simbolo === dbPos.simbolo);
      
      if (!exchangePos || Math.abs(parseFloat(exchangePos.quantidade)) <= 0.000001) {
        // Posi√ß√£o n√£o existe na corretora ou tem quantidade zero
        await db.query(`
          UPDATE posicoes 
          SET status = 'CLOSED', 
              data_hora_fechamento = NOW(),
              observacao = 'Fechada via WebSocket - n√£o encontrada na corretora'
          WHERE id = ?
        `, [dbPos.id]);
        
        console.log(`[WEBSOCKET] Posi√ß√£o fantasma ${dbPos.simbolo} fechada para conta ${accountId} (ID: ${dbPos.id})`);
        closedCount++;
      }
    }
    
    return closedCount;
    
  } catch (error) {
    console.error(`[WEBSOCKET] Erro ao fechar posi√ß√µes fantasma para conta ${accountId}:`, error.message);
    return 0;
  }
}

/**
 * ‚ö°Ô∏è SOLU√á√ÉO CORRIGIDA: Mover posi√ß√£o para hist√≥rico COM TODOS OS CAMPOS
 * SEQU√äNCIA CORRETA: 1) Cancelar ordens na corretora ‚Üí 2) Mover para hist√≥rico
 * @param {Object} db - Conex√£o com o banco de dados
 * @param {number} positionId - ID da posi√ß√£o
 * @param {string} status - Status para o hist√≥rico
 * @param {string} reason - Motivo do fechamento 
 * @param {number} accountId - ID da conta
 * @returns {Promise<boolean>} - true se movida com sucesso
 */
async function movePositionToHistory(db, positionId, status = 'CLOSED', reason = 'Movida automaticamente', accountId) {
  let connection;
  try {
    console.log(`[MOVE_POSITION] üìö Iniciando movimento da posi√ß√£o ${positionId} para conta ${accountId}...`);
    connection = await db.getConnection();
    await connection.beginTransaction();

    // 1. Obter a posi√ß√£o
    const [positionResult] = await connection.query(
      'SELECT * FROM posicoes WHERE id = ? AND conta_id = ?', 
      [positionId, accountId]
    );
    if (positionResult.length === 0) {
      console.log(`[MOVE_POSITION] ‚ö†Ô∏è Posi√ß√£o ${positionId} n√£o encontrada para conta ${accountId}`);
      await connection.rollback();
      return false;
    }
    const position = positionResult[0];
    const symbol = position.simbolo;

    // 2. Buscar ordens relacionadas ANTES de mover
    const [relatedOrders] = await connection.query(
      'SELECT id, id_externo, status FROM ordens WHERE id_posicao = ? AND conta_id = ?', 
      [positionId, accountId]
    );
    console.log(`[MOVE_POSITION] üìã Encontradas ${relatedOrders.length} ordens relacionadas para ${symbol}...`);

    // 3. Cancelar ordens na corretora
    let ordersToCancel = relatedOrders.filter(order => 
      ['NEW', 'PARTIALLY_FILLED', 'PENDING_CANCEL'].includes(order.status)
    );
    if (ordersToCancel.length > 0) {
      console.log(`[MOVE_POSITION] üóëÔ∏è Cancelando ${ordersToCancel.length} ordens ativas na corretora...`);
      
      for (const order of ordersToCancel) {
        try {
          const cancelResult = await api.cancelOrder(symbol, order.id_externo, accountId);
          
          if (cancelResult && cancelResult.status) {
            await connection.query(
              'UPDATE ordens SET status = ?, last_update = ?, observacao = ? WHERE id = ? AND conta_id = ?',
              [cancelResult.status, formatDateForMySQL(new Date()), `Cancelada durante fechamento da posi√ß√£o ${positionId}`, order.id, accountId]
            );
          }
        } catch (cancelError) {
          if (cancelError.message.includes('Unknown order') || 
              cancelError.message.includes('-2011') ||
              cancelError.message.includes('Order does not exist')) {
            await connection.query(
              'UPDATE ordens SET status = "CANCELED", last_update = ?, observacao = ? WHERE id = ? AND conta_id = ?',
              [formatDateForMySQL(new Date()), `Marcada como cancelada - n√£o existe na corretora`, order.id, accountId]
            );
          }
        }
      }
      
      console.log(`[MOVE_POSITION] ‚úÖ Processo de cancelamento na corretora conclu√≠do`);
    } else {
      console.log(`[MOVE_POSITION] ‚ÑπÔ∏è Nenhuma ordem ativa para cancelar na corretora`);
    }
    
    // 4. Aguardar 2 segundos
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // 5. Buscar ordens atualizadas
    const [updatedOrders] = await connection.query(
      'SELECT id FROM ordens WHERE id_posicao = ? AND conta_id = ?', 
      [positionId, accountId]
    );
    
    // 6. INSERIR POSI√á√ÉO NO HIST√ìRICO COM TODOS OS CAMPOS CORRETOS
    await connection.query(`
      INSERT INTO posicoes_fechadas (
        id_original, simbolo, quantidade, quantidade_aberta, preco_medio, status, data_hora_abertura, data_hora_fechamento, motivo_fechamento, side, leverage, data_hora_ultima_atualizacao, preco_entrada, preco_corrente, orign_sig, conta_id, trailing_stop_level, pnl_corrente, breakeven_price, accumulated_realized, unrealized_pnl, total_realized, total_commission, liquid_pnl, margin_type, isolated_wallet, position_side, event_reason, webhook_data_raw, observacoes, last_update
      ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
    `, [
      position.id, // id_original
      position.simbolo,
      position.quantidade,
      position.quantidade_aberta,
      position.preco_medio,
      status || position.status,
      formatDateForMySQL(position.data_hora_abertura),
      formatDateForMySQL(new Date()), // data_hora_fechamento = agora
      reason || null, // motivo_fechamento
      position.side,
      position.leverage,
      formatDateForMySQL(position.data_hora_ultima_atualizacao),
      position.preco_entrada,
      position.preco_corrente,
      position.orign_sig,
      position.conta_id,
      position.trailing_stop_level,
      position.pnl_corrente,
      position.breakeven_price,
      position.accumulated_realized,
      position.unrealized_pnl,
      position.total_realized,
      position.total_commission,
      position.liquid_pnl,
      position.margin_type,
      position.isolated_wallet,
      position.position_side,
      position.event_reason,
      position.webhook_data_raw,
      position.observacoes,
      formatDateForMySQL(new Date())
    ]);

    // 7. MOVER ORDENS PARA HIST√ìRICO (mant√©m igual)
    for (const order of updatedOrders) {
      // Atualizar posi√ß√£o relacionada, se houver
      if (order.id_posicao) {
        // Buscar posi√ß√£o atual
        const [positions] = await connection.query(
          'SELECT total_commission, total_realized FROM posicoes WHERE id = ? AND conta_id = ?',
          [order.id_posicao, accountId]
        );
        if (positions.length > 0) {
          const pos = positions[0];
          const newTotalCommission = (parseFloat(pos.total_commission) || 0) + (parseFloat(order.commission) || 0);
          const newTotalRealized = (parseFloat(pos.total_realizado) || 0) + (parseFloat(order.realized_profit) || 0);

          // Regra para c√°lculo do liquid_pnl
          let newLiquidPnl;
          if (newTotalCommission < 0) {
            newLiquidPnl = newTotalRealized + newTotalCommission;
          } else {
            newLiquidPnl = newTotalRealized - newTotalCommission;
          }

          await connection.query(
            'UPDATE posicoes SET total_commission = ?, total_realized = ?, liquid_pnl = ? WHERE id = ? AND conta_id = ?',
            [newTotalCommission, newTotalRealized, newLiquidPnl, order.id_posicao, accountId]
          );
          console.log(`[CLEANUP] Posi√ß√£o ${order.id_posicao} atualizada: total_commission=${newTotalCommission}, total_realized=${newTotalRealized}, liquid_pnl=${newLiquidPnl}`);
        }
      }
      await connection.query(`
        INSERT INTO ordens_fechadas (
          id_original, id_original_ordens, tipo_ordem, preco, quantidade, id_posicao, status,
          data_hora_criacao, id_externo, side, simbolo, tipo_ordem_bot,
          target, reduce_only, close_position, last_update, renew_sl_firs, renew_sl_seco,
          orign_sig, dados_originais_ws, quantidade_executada, preco_executado, observacao,
          conta_id, commission, commission_asset, trade_id, client_order_id, time_in_force,
          stop_price, execution_type, last_filled_quantity, last_filled_price, order_trade_time,
          realized_profit, position_side
        )
        SELECT
          id, -- id_original
          id, -- id_original_ordens
          tipo_ordem,
          preco,
          quantidade,
          id_posicao,
          status,
          data_hora_criacao,
          id_externo,
          side,
          simbolo,
          tipo_ordem_bot,
          target,
          reduce_only,
          close_position,
          ?, -- last_update (formatado)
          renew_sl_firs,
          renew_sl_seco,
          orign_sig,
          dados_originais_ws,
          quantidade_executada,
          preco_executado,
          CONCAT(
            IFNULL(observacao, ''), 
            ' | Cancelada na corretora antes da movimenta√ß√£o para hist√≥rico'
          ),
          conta_id,
          commission,
          commission_asset,
          trade_id,
          client_order_id,
          time_in_force,
          stop_price,
          execution_type,
          last_filled_quantity,
          last_filled_price,
          order_trade_time,
          realized_profit,
          position_side
        FROM ordens
        WHERE id = ? AND conta_id = ?
      `, [
        formatDateForMySQL(new Date()),
        order.id,
        accountId
      ]);
    }
    
    // 8. Remover ordens da tabela ativa
    if (updatedOrders.length > 0) {
      await connection.query(
        'DELETE FROM ordens WHERE id_posicao = ? AND conta_id = ?', 
        [positionId, accountId]
      );
    }
    
    // 9. Remover a posi√ß√£o
    await connection.query(
      'DELETE FROM posicoes WHERE id = ? AND conta_id = ?', 
      [positionId, accountId]
    );
    
    await connection.commit();
    console.log(`[MOVE_POSITION] ‚úÖ Posi√ß√£o ${symbol} (ID: ${positionId}) movida com sucesso ap√≥s cancelar ordens na corretora`);
    
    // 10. Enviar notifica√ß√£o ao Telegram AP√ìS commit e com dados atualizados
    try {
      // Recarregar a posi√ß√£o j√° atualizada (com PnL final)
      const [updatedPositionArr] = await connection.query(
        'SELECT * FROM posicoes_fechadas WHERE id_original = ? AND conta_id = ? ORDER BY id DESC LIMIT 1',
        [positionId, accountId]
      );
      const updatedPosition = updatedPositionArr && updatedPositionArr[0] ? updatedPositionArr[0] : position;
      //const message = formatPositionClosedMessage(updatedPosition);
      //await sendTelegramMessage(accountId, message);
      console.log(`[MOVE_POSITION] üì± Notifica√ß√£o enviada ao Telegram`);
    } catch (telegramError) {
      console.log(`[MOVE_POSITION] ‚ö†Ô∏è Erro ao enviar notifica√ß√£o: ${telegramError.message}`);
    }
    
    return true;
    
  } catch (error) {
    if (connection) await connection.rollback();
    console.error(`[MOVE_POSITION] ‚ùå Erro ao mover posi√ß√£o ${positionId}:`, error.message);
    console.error(`[MOVE_POSITION] Stack:`, error.stack);
    return false;
  } finally {
    if (connection) connection.release();
  }
}

/**
 * ‚úÖ FUN√á√ÉO PARA SINCRONIZAR E FECHAR POSI√á√ïES "FANTASMA"
 * Sincroniza posi√ß√µes abertas na corretora e fecha as que est√£o abertas no banco mas n√£o na corretora
 */
async function syncAndCloseGhostPositions(accountId) {
  try {
    const db = await getDatabaseInstance();
    
    // Obter posi√ß√µes abertas no banco
    const [dbPositions] = await db.query(`
      SELECT id, simbolo, quantidade FROM posicoes 
      WHERE status = 'OPEN' AND conta_id = ?
    `, [accountId]);
    
    if (dbPositions.length === 0) {
      return 0;
    }
    
    // Obter posi√ß√µes abertas na corretora
    const exchangePositions = await api.getAllOpenPositions(accountId);
    
    let closedCount = 0;
    
    for (const dbPos of dbPositions) {
      const exchangePos = exchangePositions.find(p => p.simbolo === dbPos.simbolo);
      
      if (!exchangePos) {
        // Posi√ß√£o n√£o existe na corretora
        await db.query(`
          UPDATE posicoes 
          SET status = 'CLOSED', 
              data_hora_fechamento = NOW(),
              observacao = 'Fechada via sync - n√£o encontrada na corretora'
          WHERE id = ?
        `, [dbPos.id]);
        
        console.log(`[SYNC] Posi√ß√£o fantasma ${dbPos.simbolo} fechada para conta ${accountId} (ID: ${dbPos.id})`);
        closedCount++;
      } else {
        // Sincronizar quantidade e status
        const quantidadeDiff = Math.abs(parseFloat(exchangePos.quantidade)) - Math.abs(parseFloat(dbPos.quantidade));
        
        if (quantidadeDiff > 0.000001) {
          await db.query(`
            UPDATE posicoes 
            SET quantidade = ?, 
                status = 'OPEN', 
                data_hora_fechamento = NULL,
                observacao = 'Sincronizada com a corretora'
            WHERE id = ?
          `, [exchangePos.quantidade, dbPos.id]);
          
          console.log(`[SYNC] Posi√ß√£o ${dbPos.simbolo} sincronizada (nova quantidade: ${exchangePos.quantidade})`);
        }
      }
    }
    
    return closedCount;
    
  } catch (error) {
    console.error(`[SYNC] Erro ao sincronizar e fechar posi√ß√µes fantasma para conta ${accountId}:`, error.message);
    return 0;
  }
}

module.exports = {
  cleanupOrphanSignals,
  forceCloseGhostPositions,
  cancelOrphanOrders,
  moveOrdersToHistory,
  checkOrderExistsOnExchange,
  checkSingleOrderStatus,
  movePositionToHistory,
  checkAndCloseWebsocket,
  syncAndCloseGhostPositions
};